
I2C_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00000ae0  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000714  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000274  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000587  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030a  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 34       	cpi	r26, 0x42	; 66
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	28 d1       	rcall	.+592    	; 0x360 <main>
 110:	e5 c4       	rjmp	.+2506   	; 0xadc <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z6enablev>:
	* @brief Toggle the enable pin to "send" command to display
	* @param None
	* @retval None
	*/
void enable(void){
	PORTG |= (1 << E);
 114:	a2 9a       	sbi	0x14, 2	; 20
	TCNT1L = 0, TCNT1H = 0;
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 11a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < ENABLE_TIME){/* delay for synchronization */}	
 11e:	a4 e8       	ldi	r26, 0x84	; 132
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e5 e8       	ldi	r30, 0x85	; 133
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8c 91       	ld	r24, X
 128:	20 81       	ld	r18, Z
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	92 2b       	or	r25, r18
 12e:	84 36       	cpi	r24, 0x64	; 100
 130:	91 05       	cpc	r25, r1
 132:	cc f3       	brlt	.-14     	; 0x126 <_Z6enablev+0x12>
	TCNT1L = 0, TCNT1H = 0;
 134:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 138:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	PORTG &= ~(1 << E);
 13c:	a2 98       	cbi	0x14, 2	; 20
 13e:	08 95       	ret

00000140 <_Z13LCD_WriteCharc>:
/**
	* @brief set the data pin to a particular character
	* @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f2 e0       	ldi	r31, 0x02	; 2
	int i;
	for (i = 0; i < 8; i++) {
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
 14c:	a1 e0       	ldi	r26, 0x01	; 1
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	c8 2f       	mov	r28, r24
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	9d 01       	movw	r18, r26
 156:	04 2e       	mov	r0, r20
 158:	02 c0       	rjmp	.+4      	; 0x15e <_Z13LCD_WriteCharc+0x1e>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <_Z13LCD_WriteCharc+0x1a>
 162:	2c 23       	and	r18, r28
 164:	3d 23       	and	r19, r29
 166:	04 2e       	mov	r0, r20
 168:	02 c0       	rjmp	.+4      	; 0x16e <_Z13LCD_WriteCharc+0x2e>
 16a:	35 95       	asr	r19
 16c:	27 95       	ror	r18
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <_Z13LCD_WriteCharc+0x2a>
 172:	21 30       	cpi	r18, 0x01	; 1
 174:	31 05       	cpc	r19, r1
 176:	59 f4       	brne	.+22     	; 0x18e <_Z13LCD_WriteCharc+0x4e>
			PORTA |= (1 << dataPin[i]);
 178:	22 b1       	in	r18, 0x02	; 2
 17a:	cd 01       	movw	r24, r26
 17c:	00 80       	ld	r0, Z
 17e:	02 c0       	rjmp	.+4      	; 0x184 <_Z13LCD_WriteCharc+0x44>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <_Z13LCD_WriteCharc+0x40>
 188:	82 2b       	or	r24, r18
 18a:	82 b9       	out	0x02, r24	; 2
 18c:	0c c0       	rjmp	.+24     	; 0x1a6 <_Z13LCD_WriteCharc+0x66>
		} else {
			PORTA &= ~(1 << dataPin[i]);
 18e:	22 b1       	in	r18, 0x02	; 2
 190:	bd 01       	movw	r22, r26
 192:	00 80       	ld	r0, Z
 194:	02 c0       	rjmp	.+4      	; 0x19a <_Z13LCD_WriteCharc+0x5a>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <_Z13LCD_WriteCharc+0x56>
 19e:	96 2f       	mov	r25, r22
 1a0:	90 95       	com	r25
 1a2:	92 23       	and	r25, r18
 1a4:	92 b9       	out	0x02, r25	; 2
	* @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	32 96       	adiw	r30, 0x02	; 2
 1ac:	48 30       	cpi	r20, 0x08	; 8
 1ae:	51 05       	cpc	r21, r1
 1b0:	89 f6       	brne	.-94     	; 0x154 <_Z13LCD_WriteCharc+0x14>
			PORTA |= (1 << dataPin[i]);
		} else {
			PORTA &= ~(1 << dataPin[i]);
		}
	}
	enable();
 1b2:	b0 df       	rcall	.-160    	; 0x114 <_Z6enablev>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <_Z12clearDisplayv>:
	* @brief Clear every character on the display and returns to the first address of display
	* @param None
	* @retval None
	*/
void clearDisplay(void){
	PORTG &= ~(1 << RS);
 1ba:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 1bc:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 1be:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 1c0:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 1c2:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 1c4:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~(1 << DB3);
 1c6:	13 98       	cbi	0x02, 3	; 2
	PORTA &= ~(1 << DB2);
 1c8:	12 98       	cbi	0x02, 2	; 2
	PORTA &= ~(1 << DB1);
 1ca:	11 98       	cbi	0x02, 1	; 2
	PORTA |= (1 << DB0);
 1cc:	10 9a       	sbi	0x02, 0	; 2
	enable();
 1ce:	a2 df       	rcall	.-188    	; 0x114 <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
 1d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 1d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}	
 1d8:	a4 e8       	ldi	r26, 0x84	; 132
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e5 e8       	ldi	r30, 0x85	; 133
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	8c 91       	ld	r24, X
 1e2:	20 81       	ld	r18, Z
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	92 2b       	or	r25, r18
 1e8:	88 3b       	cpi	r24, 0xB8	; 184
 1ea:	9b 40       	sbci	r25, 0x0B	; 11
 1ec:	cc f3       	brlt	.-14     	; 0x1e0 <_Z12clearDisplayv+0x26>
	TCNT1L = 0, TCNT1H = 0;
 1ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 1f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 1f6:	08 95       	ret

000001f8 <_Z9SetAdressi>:
	* @retval None
	* @note When 1-line display mode (N=LOW), DDRAM address is form 0x00 to 0x4F
	* 			In 2-line display mode (N=HIGH), DDRAM address is form 0x00 to 0x27 for first line
	*				and 0x40 to 0x67 for second line
	*/
void SetAdress(int address){
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
  int i;
	PORTG &= ~(1 << RS);
 1fe:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 200:	a1 98       	cbi	0x14, 1	; 20
	PORTA |= (1 << DB7);
 202:	17 9a       	sbi	0x02, 7	; 2
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f2 e0       	ldi	r31, 0x02	; 2
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	50 e0       	ldi	r21, 0x00	; 0
		if ((address & (1 << i)) >> i == 1) {
 20c:	a1 e0       	ldi	r26, 0x01	; 1
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	9d 01       	movw	r18, r26
 212:	04 2e       	mov	r0, r20
 214:	02 c0       	rjmp	.+4      	; 0x21a <_Z9SetAdressi+0x22>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z9SetAdressi+0x1e>
 21e:	2c 23       	and	r18, r28
 220:	3d 23       	and	r19, r29
 222:	04 2e       	mov	r0, r20
 224:	02 c0       	rjmp	.+4      	; 0x22a <_Z9SetAdressi+0x32>
 226:	35 95       	asr	r19
 228:	27 95       	ror	r18
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <_Z9SetAdressi+0x2e>
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	31 05       	cpc	r19, r1
 232:	59 f4       	brne	.+22     	; 0x24a <_Z9SetAdressi+0x52>
			PORTA |= (1 << dataPin[i]);
 234:	22 b1       	in	r18, 0x02	; 2
 236:	cd 01       	movw	r24, r26
 238:	00 80       	ld	r0, Z
 23a:	02 c0       	rjmp	.+4      	; 0x240 <_Z9SetAdressi+0x48>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <_Z9SetAdressi+0x44>
 244:	82 2b       	or	r24, r18
 246:	82 b9       	out	0x02, r24	; 2
 248:	0c c0       	rjmp	.+24     	; 0x262 <_Z9SetAdressi+0x6a>
		} else {
			PORTA &= ~(1 << dataPin[i]);
 24a:	22 b1       	in	r18, 0x02	; 2
 24c:	bd 01       	movw	r22, r26
 24e:	00 80       	ld	r0, Z
 250:	02 c0       	rjmp	.+4      	; 0x256 <_Z9SetAdressi+0x5e>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_Z9SetAdressi+0x5a>
 25a:	96 2f       	mov	r25, r22
 25c:	90 95       	com	r25
 25e:	92 23       	and	r25, r18
 260:	92 b9       	out	0x02, r25	; 2
  int i;
	PORTG &= ~(1 << RS);
	PORTG &= ~(1 << RW);
	PORTA |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
 262:	4f 5f       	subi	r20, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	32 96       	adiw	r30, 0x02	; 2
 268:	47 30       	cpi	r20, 0x07	; 7
 26a:	51 05       	cpc	r21, r1
 26c:	89 f6       	brne	.-94     	; 0x210 <_Z9SetAdressi+0x18>
			PORTA |= (1 << dataPin[i]);
		} else {
			PORTA &= ~(1 << dataPin[i]);
		}
	}
	enable();
 26e:	52 df       	rcall	.-348    	; 0x114 <_Z6enablev>
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <_Z10returnHomev>:
	* @brief change the address of the LCD pointer to the first one
	* @param None
	* @retval None
	*/
void returnHome(void){
	PORTG &= ~(1 << RS);
 276:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 278:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 27a:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 27c:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 27e:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 280:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~(1 << DB3);
 282:	13 98       	cbi	0x02, 3	; 2
	PORTA &= ~(1 << DB2);
 284:	12 98       	cbi	0x02, 2	; 2
	PORTA |= (1 << DB1);
 286:	11 9a       	sbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 288:	10 98       	cbi	0x02, 0	; 2
	enable();
 28a:	44 df       	rcall	.-376    	; 0x114 <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
 28c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 290:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}
 294:	a4 e8       	ldi	r26, 0x84	; 132
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e5 e8       	ldi	r30, 0x85	; 133
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	8c 91       	ld	r24, X
 29e:	20 81       	ld	r18, Z
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	92 2b       	or	r25, r18
 2a4:	88 3b       	cpi	r24, 0xB8	; 184
 2a6:	9b 40       	sbci	r25, 0x0B	; 11
 2a8:	cc f3       	brlt	.-14     	; 0x29c <_Z10returnHomev+0x26>
	TCNT1L = 0, TCNT1H = 0;
 2aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 2ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 2b2:	08 95       	ret

000002b4 <_Z9inputModev>:
	* @brief set up pins to input mode
	* @param None
	* @retval None
	*/
void inputMode(void){
	PORTG |= (1 << RS);
 2b4:	a0 9a       	sbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 2b6:	a1 98       	cbi	0x14, 1	; 20
 2b8:	08 95       	ret

000002ba <_Z15LCD_WriteStringPc>:
/**
	* @brief send one by one all the character of the string to LCD_WriteChar()
    * @param string: String to be printed on the LCD
	* @retval None
	*/
void LCD_WriteString(char * string){
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	8c 01       	movw	r16, r24
	int i;
	inputMode(); /************ NOT sure we need this */
 2c4:	f7 df       	rcall	.-18     	; 0x2b4 <_Z9inputModev>
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 2c6:	f8 01       	movw	r30, r16
 2c8:	80 81       	ld	r24, Z
 2ca:	81 11       	cpse	r24, r1
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <_Z15LCD_WriteStringPc+0x26>
 2ce:	0e c0       	rjmp	.+28     	; 0x2ec <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 2d0:	37 df       	rcall	.-402    	; 0x140 <_Z13LCD_WriteCharc>
void LCD_WriteString(char * string){
	int i;
	inputMode(); /************ NOT sure we need this */
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 2d2:	c0 17       	cp	r28, r16
 2d4:	d1 07       	cpc	r29, r17
 2d6:	51 f0       	breq	.+20     	; 0x2ec <_Z15LCD_WriteStringPc+0x32>
 2d8:	89 91       	ld	r24, Y+
 2da:	81 11       	cpse	r24, r1
 2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <_Z15LCD_WriteStringPc+0x16>
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 2e0:	2f df       	rcall	.-418    	; 0x140 <_Z13LCD_WriteCharc>
 2e2:	e8 01       	movw	r28, r16
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	00 5f       	subi	r16, 0xF0	; 240
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	f6 cf       	rjmp	.-20     	; 0x2d8 <_Z15LCD_WriteStringPc+0x1e>
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <_Z6turnOnv>:
	* @brief Turn on the display
	* @param None
	* @retval None
	*/
void turnOn(void){
	PORTG &= ~(1 << RS);
 2f6:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 2f8:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 2fa:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 2fc:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 2fe:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 300:	14 98       	cbi	0x02, 4	; 2
	PORTA |= (1 << DB3);
 302:	13 9a       	sbi	0x02, 3	; 2
	PORTA |= (1 << DB2);
 304:	12 9a       	sbi	0x02, 2	; 2
	PORTA &= ~(1 << DB1);
 306:	11 98       	cbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 308:	10 98       	cbi	0x02, 0	; 2
	enable();
 30a:	04 cf       	rjmp	.-504    	; 0x114 <_Z6enablev>
 30c:	08 95       	ret

0000030e <_Z11functionSetv>:
	* @brief Set up length of data bus, and size of display
	* @param None
	* @retval None
	*/
void functionSet(void){
	PORTG &= ~(1 << RS);
 30e:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 310:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 312:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 314:	16 98       	cbi	0x02, 6	; 2
	PORTA |= (1 << DB5);
 316:	15 9a       	sbi	0x02, 5	; 2
	PORTA |= (1 << DB4);
 318:	14 9a       	sbi	0x02, 4	; 2
	PORTA |= (1 << DB3);
 31a:	13 9a       	sbi	0x02, 3	; 2
	PORTA &= ~(1 << DB2);
 31c:	12 98       	cbi	0x02, 2	; 2
	PORTA &= ~(1 << DB1);
 31e:	11 98       	cbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 320:	10 98       	cbi	0x02, 0	; 2
	enable();
 322:	f8 ce       	rjmp	.-528    	; 0x114 <_Z6enablev>
 324:	08 95       	ret

00000326 <_Z9entryModev>:
	* @brief set up the entry mode of the display
	* @param None
	* @retval None
	*/
void entryMode(void){
	PORTG &= ~(1 << RS);
 326:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 328:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 32a:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 32c:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 32e:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 330:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~(1 << DB3);
 332:	13 98       	cbi	0x02, 3	; 2
	PORTA |= (1 << DB2);
 334:	12 9a       	sbi	0x02, 2	; 2
	PORTA |= (1 << DB1);
 336:	11 9a       	sbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 338:	10 98       	cbi	0x02, 0	; 2
	enable();
 33a:	ec ce       	rjmp	.-552    	; 0x114 <_Z6enablev>
 33c:	08 95       	ret

0000033e <_Z7initLCDv>:
	* @param None
	* @retval None
	*/
void initLCD(void){
	//init timer for LCD control. Counts up every 0.5 us (1/ (16M/8))
	TCCR1B |= (1 << CS11); /*prescaler 8*/
 33e:	e1 e8       	ldi	r30, 0x81	; 129
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	82 60       	ori	r24, 0x02	; 2
 346:	80 83       	st	Z, r24
	//set pins as outputs
	DDRA |= (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA1) | (1 << DDA0);
 348:	81 b1       	in	r24, 0x01	; 1
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	81 b9       	out	0x01, r24	; 1
	DDRG |= (1 << DDG2) | (1 << DDG1) | (1 << DDG0);
 34e:	83 b3       	in	r24, 0x13	; 19
 350:	87 60       	ori	r24, 0x07	; 7
 352:	83 bb       	out	0x13, r24	; 19
	clearDisplay();
 354:	32 df       	rcall	.-412    	; 0x1ba <_Z12clearDisplayv>
	turnOn();
 356:	cf df       	rcall	.-98     	; 0x2f6 <_Z6turnOnv>
	functionSet();
 358:	da df       	rcall	.-76     	; 0x30e <_Z11functionSetv>
	entryMode();
 35a:	e5 df       	rcall	.-54     	; 0x326 <_Z9entryModev>
	returnHome();
 35c:	8c cf       	rjmp	.-232    	; 0x276 <_Z10returnHomev>
 35e:	08 95       	ret

00000360 <main>:
#include "lcd.h"



int main(void)
{
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	64 97       	sbiw	r28, 0x14	; 20
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	initLCD();
 384:	dc df       	rcall	.-72     	; 0x33e <_Z7initLCDv>
	clearDisplay();
 386:	19 df       	rcall	.-462    	; 0x1ba <_Z12clearDisplayv>
	DDRD = 0xFF;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0XFF;
 38c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	3b e7       	ldi	r19, 0x7B	; 123
 392:	82 e9       	ldi	r24, 0x92	; 146
 394:	21 50       	subi	r18, 0x01	; 1
 396:	30 40       	sbci	r19, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x34>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x3e>
 39e:	00 00       	nop
	_delay_ms(3000);
    char buffer[20];
	/* Replace with your application code */
	clearDisplay();
 3a0:	0c df       	rcall	.-488    	; 0x1ba <_Z12clearDisplayv>
	LCD_WriteString("---1---");
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	89 df       	rcall	.-238    	; 0x2ba <_Z15LCD_WriteStringPc>
	SetAdress(LINE2);
 3a8:	80 e4       	ldi	r24, 0x40	; 64
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	25 df       	rcall	.-438    	; 0x1f8 <_Z9SetAdressi>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f9 eb       	ldi	r31, 0xB9	; 185
 3b2:	af 2e       	mov	r10, r31
 3b4:	b1 2c       	mov	r11, r1
 3b6:	f0 2d       	mov	r31, r0
 3b8:	f5 01       	movw	r30, r10
 3ba:	90 81       	ld	r25, Z
 3bc:	0c eb       	ldi	r16, 0xBC	; 188
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	f8 01       	movw	r30, r16
 3c2:	80 81       	ld	r24, Z
 3c4:	1f 92       	push	r1
 3c6:	9f 93       	push	r25
 3c8:	1f 92       	push	r1
 3ca:	8f 93       	push	r24
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f8 e1       	ldi	r31, 0x18	; 24
 3d0:	cf 2e       	mov	r12, r31
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	df 2e       	mov	r13, r31
 3d6:	f0 2d       	mov	r31, r0
 3d8:	df 92       	push	r13
 3da:	cf 92       	push	r12
 3dc:	9e 01       	movw	r18, r28
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	79 01       	movw	r14, r18
 3e4:	3f 93       	push	r19
 3e6:	2f 93       	push	r18
 3e8:	b0 d0       	rcall	.+352    	; 0x54a <sprintf>
	LCD_WriteString(buffer);
 3ea:	c7 01       	movw	r24, r14
 3ec:	66 df       	rcall	.-308    	; 0x2ba <_Z15LCD_WriteStringPc>
 3ee:	3f ef       	ldi	r19, 0xFF	; 255
 3f0:	8b e7       	ldi	r24, 0x7B	; 123
 3f2:	92 e9       	ldi	r25, 0x92	; 146
 3f4:	31 50       	subi	r19, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x94>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x9e>
 3fe:	00 00       	nop
	_delay_ms(3000);
	//I2C init
	TWBR = ((F_CPU / 40000) - 16) / 2; // set frequency of sclk to 400 kHz
 400:	80 ec       	ldi	r24, 0xC0	; 192
 402:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	//TWSR |= (1<<TWPS0);
	TWCR = (1<<TWEN)|(0<<TWIE)|(0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO);
 406:	84 e0       	ldi	r24, 0x04	; 4
 408:	f8 01       	movw	r30, r16
 40a:	80 83       	st	Z, r24


	
	//I2C send start condition
	clearDisplay();
 40c:	d6 de       	rcall	.-596    	; 0x1ba <_Z12clearDisplayv>
	LCD_WriteString("---2---");
 40e:	89 e2       	ldi	r24, 0x29	; 41
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	53 df       	rcall	.-346    	; 0x2ba <_Z15LCD_WriteStringPc>
	SetAdress(LINE2);
 414:	80 e4       	ldi	r24, 0x40	; 64
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	ef de       	rcall	.-546    	; 0x1f8 <_Z9SetAdressi>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 41a:	f5 01       	movw	r30, r10
 41c:	90 81       	ld	r25, Z
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	1f 92       	push	r1
 424:	9f 93       	push	r25
 426:	1f 92       	push	r1
 428:	8f 93       	push	r24
 42a:	df 92       	push	r13
 42c:	cf 92       	push	r12
 42e:	ff 92       	push	r15
 430:	ef 92       	push	r14
 432:	8b d0       	rcall	.+278    	; 0x54a <sprintf>
	LCD_WriteString(buffer);
 434:	c7 01       	movw	r24, r14
 436:	41 df       	rcall	.-382    	; 0x2ba <_Z15LCD_WriteStringPc>
 438:	ff ef       	ldi	r31, 0xFF	; 255
 43a:	2b e7       	ldi	r18, 0x7B	; 123
 43c:	32 e9       	ldi	r19, 0x92	; 146
 43e:	f1 50       	subi	r31, 0x01	; 1
 440:	20 40       	sbci	r18, 0x00	; 0
 442:	30 40       	sbci	r19, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	_delay_ms(3000);
		
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
 44a:	84 ea       	ldi	r24, 0xA4	; 164
 44c:	f8 01       	movw	r30, r16
 44e:	80 83       	st	Z, r24
	
	while (!(TWCR & (1<<TWINT)))// Wait for TWINT Flag set.
 450:	80 81       	ld	r24, Z
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	88 23       	and	r24, r24
 45e:	b4 f1       	brlt	.+108    	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
	{
	clearDisplay();
	LCD_WriteString("---3---");
	SetAdress(LINE2);
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 460:	0f 2e       	mov	r0, r31
 462:	fc eb       	ldi	r31, 0xBC	; 188
 464:	cf 2e       	mov	r12, r31
 466:	d1 2c       	mov	r13, r1
 468:	f0 2d       	mov	r31, r0
 46a:	0f 2e       	mov	r0, r31
 46c:	f8 e1       	ldi	r31, 0x18	; 24
 46e:	ef 2e       	mov	r14, r31
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	ff 2e       	mov	r15, r31
 474:	f0 2d       	mov	r31, r0
 476:	8e 01       	movw	r16, r28
 478:	0f 5f       	subi	r16, 0xFF	; 255
 47a:	1f 4f       	sbci	r17, 0xFF	; 255
		
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
	
	while (!(TWCR & (1<<TWINT)))// Wait for TWINT Flag set.
	{
	clearDisplay();
 47c:	9e de       	rcall	.-708    	; 0x1ba <_Z12clearDisplayv>
	LCD_WriteString("---3---");
 47e:	81 e3       	ldi	r24, 0x31	; 49
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	1b df       	rcall	.-458    	; 0x2ba <_Z15LCD_WriteStringPc>
	SetAdress(LINE2);
 484:	80 e4       	ldi	r24, 0x40	; 64
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	b7 de       	rcall	.-658    	; 0x1f8 <_Z9SetAdressi>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 48a:	f5 01       	movw	r30, r10
 48c:	90 81       	ld	r25, Z
 48e:	f6 01       	movw	r30, r12
 490:	80 81       	ld	r24, Z
 492:	1f 92       	push	r1
 494:	9f 93       	push	r25
 496:	1f 92       	push	r1
 498:	8f 93       	push	r24
 49a:	ff 92       	push	r15
 49c:	ef 92       	push	r14
 49e:	1f 93       	push	r17
 4a0:	0f 93       	push	r16
 4a2:	53 d0       	rcall	.+166    	; 0x54a <sprintf>
	LCD_WriteString(buffer);
 4a4:	c8 01       	movw	r24, r16
 4a6:	09 df       	rcall	.-494    	; 0x2ba <_Z15LCD_WriteStringPc>
 4a8:	ff ef       	ldi	r31, 0xFF	; 255
 4aa:	2b e7       	ldi	r18, 0x7B	; 123
 4ac:	32 e9       	ldi	r19, 0x92	; 146
 4ae:	f1 50       	subi	r31, 0x01	; 1
 4b0:	20 40       	sbci	r18, 0x00	; 0
 4b2:	30 40       	sbci	r19, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
	LCD_WriteString(buffer);
	_delay_ms(3000);
		
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
	
	while (!(TWCR & (1<<TWINT)))// Wait for TWINT Flag set.
 4ba:	f6 01       	movw	r30, r12
 4bc:	80 81       	ld	r24, Z
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	88 23       	and	r24, r24
 4ca:	c4 f6       	brge	.-80     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
	LCD_WriteString(buffer);
	_delay_ms(3000);		
	}
	
	clearDisplay();
 4cc:	76 de       	rcall	.-788    	; 0x1ba <_Z12clearDisplayv>
	LCD_WriteString("---4---");
 4ce:	89 e3       	ldi	r24, 0x39	; 57
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	f3 de       	rcall	.-538    	; 0x2ba <_Z15LCD_WriteStringPc>
	SetAdress(LINE2);
 4d4:	80 e4       	ldi	r24, 0x40	; 64
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	8f de       	rcall	.-738    	; 0x1f8 <_Z9SetAdressi>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 4da:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4e2:	1f 92       	push	r1
 4e4:	9f 93       	push	r25
 4e6:	1f 92       	push	r1
 4e8:	8f 93       	push	r24
 4ea:	88 e1       	ldi	r24, 0x18	; 24
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	9f 93       	push	r25
 4f0:	8f 93       	push	r24
 4f2:	8e 01       	movw	r16, r28
 4f4:	0f 5f       	subi	r16, 0xFF	; 255
 4f6:	1f 4f       	sbci	r17, 0xFF	; 255
 4f8:	1f 93       	push	r17
 4fa:	0f 93       	push	r16
 4fc:	26 d0       	rcall	.+76     	; 0x54a <sprintf>
	LCD_WriteString(buffer);
 4fe:	c8 01       	movw	r24, r16
 500:	dc de       	rcall	.-584    	; 0x2ba <_Z15LCD_WriteStringPc>
 502:	3f ef       	ldi	r19, 0xFF	; 255
 504:	8b e7       	ldi	r24, 0x7B	; 123
 506:	92 e9       	ldi	r25, 0x92	; 146
 508:	31 50       	subi	r19, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
 512:	00 00       	nop
	_delay_ms(3000);
		
	TWDR = 0xD0; //Load SLA_W into TWDR Register.
 514:	80 ed       	ldi	r24, 0xD0	; 208
 516:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

	
}
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	64 96       	adiw	r28, 0x14	; 20
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	af 90       	pop	r10
 548:	08 95       	ret

0000054a <sprintf>:
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	2e 97       	sbiw	r28, 0x0e	; 14
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	0e 89       	ldd	r16, Y+22	; 0x16
 564:	1f 89       	ldd	r17, Y+23	; 0x17
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	8c 83       	std	Y+4, r24	; 0x04
 56a:	1a 83       	std	Y+2, r17	; 0x02
 56c:	09 83       	std	Y+1, r16	; 0x01
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	9f e7       	ldi	r25, 0x7F	; 127
 572:	9e 83       	std	Y+6, r25	; 0x06
 574:	8d 83       	std	Y+5, r24	; 0x05
 576:	ae 01       	movw	r20, r28
 578:	46 5e       	subi	r20, 0xE6	; 230
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	68 8d       	ldd	r22, Y+24	; 0x18
 57e:	79 8d       	ldd	r23, Y+25	; 0x19
 580:	ce 01       	movw	r24, r28
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	11 d0       	rcall	.+34     	; 0x5a8 <vfprintf>
 586:	2f 81       	ldd	r18, Y+7	; 0x07
 588:	38 85       	ldd	r19, Y+8	; 0x08
 58a:	f8 01       	movw	r30, r16
 58c:	e2 0f       	add	r30, r18
 58e:	f3 1f       	adc	r31, r19
 590:	10 82       	st	Z, r1
 592:	2e 96       	adiw	r28, 0x0e	; 14
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <vfprintf>:
 5a8:	2f 92       	push	r2
 5aa:	3f 92       	push	r3
 5ac:	4f 92       	push	r4
 5ae:	5f 92       	push	r5
 5b0:	6f 92       	push	r6
 5b2:	7f 92       	push	r7
 5b4:	8f 92       	push	r8
 5b6:	9f 92       	push	r9
 5b8:	af 92       	push	r10
 5ba:	bf 92       	push	r11
 5bc:	cf 92       	push	r12
 5be:	df 92       	push	r13
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	2c 97       	sbiw	r28, 0x0c	; 12
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	7c 01       	movw	r14, r24
 5de:	6b 01       	movw	r12, r22
 5e0:	8a 01       	movw	r16, r20
 5e2:	fc 01       	movw	r30, r24
 5e4:	17 82       	std	Z+7, r1	; 0x07
 5e6:	16 82       	std	Z+6, r1	; 0x06
 5e8:	83 81       	ldd	r24, Z+3	; 0x03
 5ea:	81 ff       	sbrs	r24, 1
 5ec:	b0 c1       	rjmp	.+864    	; 0x94e <vfprintf+0x3a6>
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	4c 01       	movw	r8, r24
 5f4:	f7 01       	movw	r30, r14
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	f6 01       	movw	r30, r12
 5fa:	93 fd       	sbrc	r25, 3
 5fc:	85 91       	lpm	r24, Z+
 5fe:	93 ff       	sbrs	r25, 3
 600:	81 91       	ld	r24, Z+
 602:	6f 01       	movw	r12, r30
 604:	88 23       	and	r24, r24
 606:	09 f4       	brne	.+2      	; 0x60a <vfprintf+0x62>
 608:	9e c1       	rjmp	.+828    	; 0x946 <vfprintf+0x39e>
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	39 f4       	brne	.+14     	; 0x61c <vfprintf+0x74>
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	6f 01       	movw	r12, r30
 618:	85 32       	cpi	r24, 0x25	; 37
 61a:	21 f4       	brne	.+8      	; 0x624 <vfprintf+0x7c>
 61c:	b7 01       	movw	r22, r14
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	c7 d1       	rcall	.+910    	; 0x9b0 <fputc>
 622:	e8 cf       	rjmp	.-48     	; 0x5f4 <vfprintf+0x4c>
 624:	51 2c       	mov	r5, r1
 626:	31 2c       	mov	r3, r1
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	20 32       	cpi	r18, 0x20	; 32
 62c:	a0 f4       	brcc	.+40     	; 0x656 <vfprintf+0xae>
 62e:	8b 32       	cpi	r24, 0x2B	; 43
 630:	69 f0       	breq	.+26     	; 0x64c <vfprintf+0xa4>
 632:	30 f4       	brcc	.+12     	; 0x640 <vfprintf+0x98>
 634:	80 32       	cpi	r24, 0x20	; 32
 636:	59 f0       	breq	.+22     	; 0x64e <vfprintf+0xa6>
 638:	83 32       	cpi	r24, 0x23	; 35
 63a:	69 f4       	brne	.+26     	; 0x656 <vfprintf+0xae>
 63c:	20 61       	ori	r18, 0x10	; 16
 63e:	2c c0       	rjmp	.+88     	; 0x698 <vfprintf+0xf0>
 640:	8d 32       	cpi	r24, 0x2D	; 45
 642:	39 f0       	breq	.+14     	; 0x652 <vfprintf+0xaa>
 644:	80 33       	cpi	r24, 0x30	; 48
 646:	39 f4       	brne	.+14     	; 0x656 <vfprintf+0xae>
 648:	21 60       	ori	r18, 0x01	; 1
 64a:	26 c0       	rjmp	.+76     	; 0x698 <vfprintf+0xf0>
 64c:	22 60       	ori	r18, 0x02	; 2
 64e:	24 60       	ori	r18, 0x04	; 4
 650:	23 c0       	rjmp	.+70     	; 0x698 <vfprintf+0xf0>
 652:	28 60       	ori	r18, 0x08	; 8
 654:	21 c0       	rjmp	.+66     	; 0x698 <vfprintf+0xf0>
 656:	27 fd       	sbrc	r18, 7
 658:	27 c0       	rjmp	.+78     	; 0x6a8 <vfprintf+0x100>
 65a:	30 ed       	ldi	r19, 0xD0	; 208
 65c:	38 0f       	add	r19, r24
 65e:	3a 30       	cpi	r19, 0x0A	; 10
 660:	78 f4       	brcc	.+30     	; 0x680 <vfprintf+0xd8>
 662:	26 ff       	sbrs	r18, 6
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0xca>
 666:	fa e0       	ldi	r31, 0x0A	; 10
 668:	5f 9e       	mul	r5, r31
 66a:	30 0d       	add	r19, r0
 66c:	11 24       	eor	r1, r1
 66e:	53 2e       	mov	r5, r19
 670:	13 c0       	rjmp	.+38     	; 0x698 <vfprintf+0xf0>
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	38 9e       	mul	r3, r24
 676:	30 0d       	add	r19, r0
 678:	11 24       	eor	r1, r1
 67a:	33 2e       	mov	r3, r19
 67c:	20 62       	ori	r18, 0x20	; 32
 67e:	0c c0       	rjmp	.+24     	; 0x698 <vfprintf+0xf0>
 680:	8e 32       	cpi	r24, 0x2E	; 46
 682:	21 f4       	brne	.+8      	; 0x68c <vfprintf+0xe4>
 684:	26 fd       	sbrc	r18, 6
 686:	5f c1       	rjmp	.+702    	; 0x946 <vfprintf+0x39e>
 688:	20 64       	ori	r18, 0x40	; 64
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xf0>
 68c:	8c 36       	cpi	r24, 0x6C	; 108
 68e:	11 f4       	brne	.+4      	; 0x694 <vfprintf+0xec>
 690:	20 68       	ori	r18, 0x80	; 128
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0xf0>
 694:	88 36       	cpi	r24, 0x68	; 104
 696:	41 f4       	brne	.+16     	; 0x6a8 <vfprintf+0x100>
 698:	f6 01       	movw	r30, r12
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	6f 01       	movw	r12, r30
 6a4:	81 11       	cpse	r24, r1
 6a6:	c1 cf       	rjmp	.-126    	; 0x62a <vfprintf+0x82>
 6a8:	98 2f       	mov	r25, r24
 6aa:	9f 7d       	andi	r25, 0xDF	; 223
 6ac:	95 54       	subi	r25, 0x45	; 69
 6ae:	93 30       	cpi	r25, 0x03	; 3
 6b0:	28 f4       	brcc	.+10     	; 0x6bc <vfprintf+0x114>
 6b2:	0c 5f       	subi	r16, 0xFC	; 252
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	ff e3       	ldi	r31, 0x3F	; 63
 6b8:	f9 83       	std	Y+1, r31	; 0x01
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <vfprintf+0x12e>
 6bc:	83 36       	cpi	r24, 0x63	; 99
 6be:	31 f0       	breq	.+12     	; 0x6cc <vfprintf+0x124>
 6c0:	83 37       	cpi	r24, 0x73	; 115
 6c2:	71 f0       	breq	.+28     	; 0x6e0 <vfprintf+0x138>
 6c4:	83 35       	cpi	r24, 0x53	; 83
 6c6:	09 f0       	breq	.+2      	; 0x6ca <vfprintf+0x122>
 6c8:	57 c0       	rjmp	.+174    	; 0x778 <vfprintf+0x1d0>
 6ca:	21 c0       	rjmp	.+66     	; 0x70e <vfprintf+0x166>
 6cc:	f8 01       	movw	r30, r16
 6ce:	80 81       	ld	r24, Z
 6d0:	89 83       	std	Y+1, r24	; 0x01
 6d2:	0e 5f       	subi	r16, 0xFE	; 254
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	44 24       	eor	r4, r4
 6d8:	43 94       	inc	r4
 6da:	51 2c       	mov	r5, r1
 6dc:	54 01       	movw	r10, r8
 6de:	14 c0       	rjmp	.+40     	; 0x708 <vfprintf+0x160>
 6e0:	38 01       	movw	r6, r16
 6e2:	f2 e0       	ldi	r31, 0x02	; 2
 6e4:	6f 0e       	add	r6, r31
 6e6:	71 1c       	adc	r7, r1
 6e8:	f8 01       	movw	r30, r16
 6ea:	a0 80       	ld	r10, Z
 6ec:	b1 80       	ldd	r11, Z+1	; 0x01
 6ee:	26 ff       	sbrs	r18, 6
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <vfprintf+0x150>
 6f2:	65 2d       	mov	r22, r5
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x154>
 6f8:	6f ef       	ldi	r22, 0xFF	; 255
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	c5 01       	movw	r24, r10
 6fe:	2c 87       	std	Y+12, r18	; 0x0c
 700:	4c d1       	rcall	.+664    	; 0x99a <strnlen>
 702:	2c 01       	movw	r4, r24
 704:	83 01       	movw	r16, r6
 706:	2c 85       	ldd	r18, Y+12	; 0x0c
 708:	2f 77       	andi	r18, 0x7F	; 127
 70a:	22 2e       	mov	r2, r18
 70c:	16 c0       	rjmp	.+44     	; 0x73a <vfprintf+0x192>
 70e:	38 01       	movw	r6, r16
 710:	f2 e0       	ldi	r31, 0x02	; 2
 712:	6f 0e       	add	r6, r31
 714:	71 1c       	adc	r7, r1
 716:	f8 01       	movw	r30, r16
 718:	a0 80       	ld	r10, Z
 71a:	b1 80       	ldd	r11, Z+1	; 0x01
 71c:	26 ff       	sbrs	r18, 6
 71e:	03 c0       	rjmp	.+6      	; 0x726 <vfprintf+0x17e>
 720:	65 2d       	mov	r22, r5
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0x182>
 726:	6f ef       	ldi	r22, 0xFF	; 255
 728:	7f ef       	ldi	r23, 0xFF	; 255
 72a:	c5 01       	movw	r24, r10
 72c:	2c 87       	std	Y+12, r18	; 0x0c
 72e:	2a d1       	rcall	.+596    	; 0x984 <strnlen_P>
 730:	2c 01       	movw	r4, r24
 732:	2c 85       	ldd	r18, Y+12	; 0x0c
 734:	20 68       	ori	r18, 0x80	; 128
 736:	22 2e       	mov	r2, r18
 738:	83 01       	movw	r16, r6
 73a:	23 fc       	sbrc	r2, 3
 73c:	19 c0       	rjmp	.+50     	; 0x770 <vfprintf+0x1c8>
 73e:	83 2d       	mov	r24, r3
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	48 16       	cp	r4, r24
 744:	59 06       	cpc	r5, r25
 746:	a0 f4       	brcc	.+40     	; 0x770 <vfprintf+0x1c8>
 748:	b7 01       	movw	r22, r14
 74a:	80 e2       	ldi	r24, 0x20	; 32
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	30 d1       	rcall	.+608    	; 0x9b0 <fputc>
 750:	3a 94       	dec	r3
 752:	f5 cf       	rjmp	.-22     	; 0x73e <vfprintf+0x196>
 754:	f5 01       	movw	r30, r10
 756:	27 fc       	sbrc	r2, 7
 758:	85 91       	lpm	r24, Z+
 75a:	27 fe       	sbrs	r2, 7
 75c:	81 91       	ld	r24, Z+
 75e:	5f 01       	movw	r10, r30
 760:	b7 01       	movw	r22, r14
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	25 d1       	rcall	.+586    	; 0x9b0 <fputc>
 766:	31 10       	cpse	r3, r1
 768:	3a 94       	dec	r3
 76a:	f1 e0       	ldi	r31, 0x01	; 1
 76c:	4f 1a       	sub	r4, r31
 76e:	51 08       	sbc	r5, r1
 770:	41 14       	cp	r4, r1
 772:	51 04       	cpc	r5, r1
 774:	79 f7       	brne	.-34     	; 0x754 <vfprintf+0x1ac>
 776:	de c0       	rjmp	.+444    	; 0x934 <vfprintf+0x38c>
 778:	84 36       	cpi	r24, 0x64	; 100
 77a:	11 f0       	breq	.+4      	; 0x780 <vfprintf+0x1d8>
 77c:	89 36       	cpi	r24, 0x69	; 105
 77e:	31 f5       	brne	.+76     	; 0x7cc <vfprintf+0x224>
 780:	f8 01       	movw	r30, r16
 782:	27 ff       	sbrs	r18, 7
 784:	07 c0       	rjmp	.+14     	; 0x794 <vfprintf+0x1ec>
 786:	60 81       	ld	r22, Z
 788:	71 81       	ldd	r23, Z+1	; 0x01
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	0c 5f       	subi	r16, 0xFC	; 252
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <vfprintf+0x1fc>
 794:	60 81       	ld	r22, Z
 796:	71 81       	ldd	r23, Z+1	; 0x01
 798:	07 2e       	mov	r0, r23
 79a:	00 0c       	add	r0, r0
 79c:	88 0b       	sbc	r24, r24
 79e:	99 0b       	sbc	r25, r25
 7a0:	0e 5f       	subi	r16, 0xFE	; 254
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	2f 76       	andi	r18, 0x6F	; 111
 7a6:	72 2e       	mov	r7, r18
 7a8:	97 ff       	sbrs	r25, 7
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x216>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	20 68       	ori	r18, 0x80	; 128
 7bc:	72 2e       	mov	r7, r18
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	a4 01       	movw	r20, r8
 7c4:	2d d1       	rcall	.+602    	; 0xa20 <__ultoa_invert>
 7c6:	a8 2e       	mov	r10, r24
 7c8:	a8 18       	sub	r10, r8
 7ca:	43 c0       	rjmp	.+134    	; 0x852 <vfprintf+0x2aa>
 7cc:	85 37       	cpi	r24, 0x75	; 117
 7ce:	29 f4       	brne	.+10     	; 0x7da <vfprintf+0x232>
 7d0:	2f 7e       	andi	r18, 0xEF	; 239
 7d2:	b2 2e       	mov	r11, r18
 7d4:	2a e0       	ldi	r18, 0x0A	; 10
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	25 c0       	rjmp	.+74     	; 0x824 <vfprintf+0x27c>
 7da:	f2 2f       	mov	r31, r18
 7dc:	f9 7f       	andi	r31, 0xF9	; 249
 7de:	bf 2e       	mov	r11, r31
 7e0:	8f 36       	cpi	r24, 0x6F	; 111
 7e2:	c1 f0       	breq	.+48     	; 0x814 <vfprintf+0x26c>
 7e4:	18 f4       	brcc	.+6      	; 0x7ec <vfprintf+0x244>
 7e6:	88 35       	cpi	r24, 0x58	; 88
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0x260>
 7ea:	ad c0       	rjmp	.+346    	; 0x946 <vfprintf+0x39e>
 7ec:	80 37       	cpi	r24, 0x70	; 112
 7ee:	19 f0       	breq	.+6      	; 0x7f6 <vfprintf+0x24e>
 7f0:	88 37       	cpi	r24, 0x78	; 120
 7f2:	21 f0       	breq	.+8      	; 0x7fc <vfprintf+0x254>
 7f4:	a8 c0       	rjmp	.+336    	; 0x946 <vfprintf+0x39e>
 7f6:	2f 2f       	mov	r18, r31
 7f8:	20 61       	ori	r18, 0x10	; 16
 7fa:	b2 2e       	mov	r11, r18
 7fc:	b4 fe       	sbrs	r11, 4
 7fe:	0d c0       	rjmp	.+26     	; 0x81a <vfprintf+0x272>
 800:	8b 2d       	mov	r24, r11
 802:	84 60       	ori	r24, 0x04	; 4
 804:	b8 2e       	mov	r11, r24
 806:	09 c0       	rjmp	.+18     	; 0x81a <vfprintf+0x272>
 808:	24 ff       	sbrs	r18, 4
 80a:	0a c0       	rjmp	.+20     	; 0x820 <vfprintf+0x278>
 80c:	9f 2f       	mov	r25, r31
 80e:	96 60       	ori	r25, 0x06	; 6
 810:	b9 2e       	mov	r11, r25
 812:	06 c0       	rjmp	.+12     	; 0x820 <vfprintf+0x278>
 814:	28 e0       	ldi	r18, 0x08	; 8
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	05 c0       	rjmp	.+10     	; 0x824 <vfprintf+0x27c>
 81a:	20 e1       	ldi	r18, 0x10	; 16
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <vfprintf+0x27c>
 820:	20 e1       	ldi	r18, 0x10	; 16
 822:	32 e0       	ldi	r19, 0x02	; 2
 824:	f8 01       	movw	r30, r16
 826:	b7 fe       	sbrs	r11, 7
 828:	07 c0       	rjmp	.+14     	; 0x838 <vfprintf+0x290>
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	0c 5f       	subi	r16, 0xFC	; 252
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	06 c0       	rjmp	.+12     	; 0x844 <vfprintf+0x29c>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 5f       	subi	r16, 0xFE	; 254
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	a4 01       	movw	r20, r8
 846:	ec d0       	rcall	.+472    	; 0xa20 <__ultoa_invert>
 848:	a8 2e       	mov	r10, r24
 84a:	a8 18       	sub	r10, r8
 84c:	fb 2d       	mov	r31, r11
 84e:	ff 77       	andi	r31, 0x7F	; 127
 850:	7f 2e       	mov	r7, r31
 852:	76 fe       	sbrs	r7, 6
 854:	0b c0       	rjmp	.+22     	; 0x86c <vfprintf+0x2c4>
 856:	37 2d       	mov	r19, r7
 858:	3e 7f       	andi	r19, 0xFE	; 254
 85a:	a5 14       	cp	r10, r5
 85c:	50 f4       	brcc	.+20     	; 0x872 <vfprintf+0x2ca>
 85e:	74 fe       	sbrs	r7, 4
 860:	0a c0       	rjmp	.+20     	; 0x876 <vfprintf+0x2ce>
 862:	72 fc       	sbrc	r7, 2
 864:	08 c0       	rjmp	.+16     	; 0x876 <vfprintf+0x2ce>
 866:	37 2d       	mov	r19, r7
 868:	3e 7e       	andi	r19, 0xEE	; 238
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x2ce>
 86c:	ba 2c       	mov	r11, r10
 86e:	37 2d       	mov	r19, r7
 870:	03 c0       	rjmp	.+6      	; 0x878 <vfprintf+0x2d0>
 872:	ba 2c       	mov	r11, r10
 874:	01 c0       	rjmp	.+2      	; 0x878 <vfprintf+0x2d0>
 876:	b5 2c       	mov	r11, r5
 878:	34 ff       	sbrs	r19, 4
 87a:	0d c0       	rjmp	.+26     	; 0x896 <vfprintf+0x2ee>
 87c:	fe 01       	movw	r30, r28
 87e:	ea 0d       	add	r30, r10
 880:	f1 1d       	adc	r31, r1
 882:	80 81       	ld	r24, Z
 884:	80 33       	cpi	r24, 0x30	; 48
 886:	11 f4       	brne	.+4      	; 0x88c <vfprintf+0x2e4>
 888:	39 7e       	andi	r19, 0xE9	; 233
 88a:	09 c0       	rjmp	.+18     	; 0x89e <vfprintf+0x2f6>
 88c:	32 ff       	sbrs	r19, 2
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x2f4>
 890:	b3 94       	inc	r11
 892:	b3 94       	inc	r11
 894:	04 c0       	rjmp	.+8      	; 0x89e <vfprintf+0x2f6>
 896:	83 2f       	mov	r24, r19
 898:	86 78       	andi	r24, 0x86	; 134
 89a:	09 f0       	breq	.+2      	; 0x89e <vfprintf+0x2f6>
 89c:	b3 94       	inc	r11
 89e:	33 fd       	sbrc	r19, 3
 8a0:	12 c0       	rjmp	.+36     	; 0x8c6 <vfprintf+0x31e>
 8a2:	30 ff       	sbrs	r19, 0
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x30a>
 8a6:	5a 2c       	mov	r5, r10
 8a8:	b3 14       	cp	r11, r3
 8aa:	18 f4       	brcc	.+6      	; 0x8b2 <vfprintf+0x30a>
 8ac:	53 0c       	add	r5, r3
 8ae:	5b 18       	sub	r5, r11
 8b0:	b3 2c       	mov	r11, r3
 8b2:	b3 14       	cp	r11, r3
 8b4:	60 f4       	brcc	.+24     	; 0x8ce <vfprintf+0x326>
 8b6:	b7 01       	movw	r22, r14
 8b8:	80 e2       	ldi	r24, 0x20	; 32
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	3c 87       	std	Y+12, r19	; 0x0c
 8be:	78 d0       	rcall	.+240    	; 0x9b0 <fputc>
 8c0:	b3 94       	inc	r11
 8c2:	3c 85       	ldd	r19, Y+12	; 0x0c
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <vfprintf+0x30a>
 8c6:	b3 14       	cp	r11, r3
 8c8:	10 f4       	brcc	.+4      	; 0x8ce <vfprintf+0x326>
 8ca:	3b 18       	sub	r3, r11
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <vfprintf+0x328>
 8ce:	31 2c       	mov	r3, r1
 8d0:	34 ff       	sbrs	r19, 4
 8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <vfprintf+0x34e>
 8d4:	b7 01       	movw	r22, r14
 8d6:	80 e3       	ldi	r24, 0x30	; 48
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	3c 87       	std	Y+12, r19	; 0x0c
 8dc:	69 d0       	rcall	.+210    	; 0x9b0 <fputc>
 8de:	3c 85       	ldd	r19, Y+12	; 0x0c
 8e0:	32 ff       	sbrs	r19, 2
 8e2:	16 c0       	rjmp	.+44     	; 0x910 <vfprintf+0x368>
 8e4:	31 fd       	sbrc	r19, 1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <vfprintf+0x346>
 8e8:	88 e7       	ldi	r24, 0x78	; 120
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <vfprintf+0x34a>
 8ee:	88 e5       	ldi	r24, 0x58	; 88
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	b7 01       	movw	r22, r14
 8f4:	0c c0       	rjmp	.+24     	; 0x90e <vfprintf+0x366>
 8f6:	83 2f       	mov	r24, r19
 8f8:	86 78       	andi	r24, 0x86	; 134
 8fa:	51 f0       	breq	.+20     	; 0x910 <vfprintf+0x368>
 8fc:	31 ff       	sbrs	r19, 1
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <vfprintf+0x35c>
 900:	8b e2       	ldi	r24, 0x2B	; 43
 902:	01 c0       	rjmp	.+2      	; 0x906 <vfprintf+0x35e>
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	37 fd       	sbrc	r19, 7
 908:	8d e2       	ldi	r24, 0x2D	; 45
 90a:	b7 01       	movw	r22, r14
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	50 d0       	rcall	.+160    	; 0x9b0 <fputc>
 910:	a5 14       	cp	r10, r5
 912:	30 f4       	brcc	.+12     	; 0x920 <vfprintf+0x378>
 914:	b7 01       	movw	r22, r14
 916:	80 e3       	ldi	r24, 0x30	; 48
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	4a d0       	rcall	.+148    	; 0x9b0 <fputc>
 91c:	5a 94       	dec	r5
 91e:	f8 cf       	rjmp	.-16     	; 0x910 <vfprintf+0x368>
 920:	aa 94       	dec	r10
 922:	f4 01       	movw	r30, r8
 924:	ea 0d       	add	r30, r10
 926:	f1 1d       	adc	r31, r1
 928:	80 81       	ld	r24, Z
 92a:	b7 01       	movw	r22, r14
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	40 d0       	rcall	.+128    	; 0x9b0 <fputc>
 930:	a1 10       	cpse	r10, r1
 932:	f6 cf       	rjmp	.-20     	; 0x920 <vfprintf+0x378>
 934:	33 20       	and	r3, r3
 936:	09 f4       	brne	.+2      	; 0x93a <vfprintf+0x392>
 938:	5d ce       	rjmp	.-838    	; 0x5f4 <vfprintf+0x4c>
 93a:	b7 01       	movw	r22, r14
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	37 d0       	rcall	.+110    	; 0x9b0 <fputc>
 942:	3a 94       	dec	r3
 944:	f7 cf       	rjmp	.-18     	; 0x934 <vfprintf+0x38c>
 946:	f7 01       	movw	r30, r14
 948:	86 81       	ldd	r24, Z+6	; 0x06
 94a:	97 81       	ldd	r25, Z+7	; 0x07
 94c:	02 c0       	rjmp	.+4      	; 0x952 <vfprintf+0x3aa>
 94e:	8f ef       	ldi	r24, 0xFF	; 255
 950:	9f ef       	ldi	r25, 0xFF	; 255
 952:	2c 96       	adiw	r28, 0x0c	; 12
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	ff 90       	pop	r15
 968:	ef 90       	pop	r14
 96a:	df 90       	pop	r13
 96c:	cf 90       	pop	r12
 96e:	bf 90       	pop	r11
 970:	af 90       	pop	r10
 972:	9f 90       	pop	r9
 974:	8f 90       	pop	r8
 976:	7f 90       	pop	r7
 978:	6f 90       	pop	r6
 97a:	5f 90       	pop	r5
 97c:	4f 90       	pop	r4
 97e:	3f 90       	pop	r3
 980:	2f 90       	pop	r2
 982:	08 95       	ret

00000984 <strnlen_P>:
 984:	fc 01       	movw	r30, r24
 986:	05 90       	lpm	r0, Z+
 988:	61 50       	subi	r22, 0x01	; 1
 98a:	70 40       	sbci	r23, 0x00	; 0
 98c:	01 10       	cpse	r0, r1
 98e:	d8 f7       	brcc	.-10     	; 0x986 <strnlen_P+0x2>
 990:	80 95       	com	r24
 992:	90 95       	com	r25
 994:	8e 0f       	add	r24, r30
 996:	9f 1f       	adc	r25, r31
 998:	08 95       	ret

0000099a <strnlen>:
 99a:	fc 01       	movw	r30, r24
 99c:	61 50       	subi	r22, 0x01	; 1
 99e:	70 40       	sbci	r23, 0x00	; 0
 9a0:	01 90       	ld	r0, Z+
 9a2:	01 10       	cpse	r0, r1
 9a4:	d8 f7       	brcc	.-10     	; 0x99c <strnlen+0x2>
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	8e 0f       	add	r24, r30
 9ac:	9f 1f       	adc	r25, r31
 9ae:	08 95       	ret

000009b0 <fputc>:
 9b0:	0f 93       	push	r16
 9b2:	1f 93       	push	r17
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	fb 01       	movw	r30, r22
 9ba:	23 81       	ldd	r18, Z+3	; 0x03
 9bc:	21 fd       	sbrc	r18, 1
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <fputc+0x16>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	28 c0       	rjmp	.+80     	; 0xa16 <fputc+0x66>
 9c6:	22 ff       	sbrs	r18, 2
 9c8:	16 c0       	rjmp	.+44     	; 0x9f6 <fputc+0x46>
 9ca:	46 81       	ldd	r20, Z+6	; 0x06
 9cc:	57 81       	ldd	r21, Z+7	; 0x07
 9ce:	24 81       	ldd	r18, Z+4	; 0x04
 9d0:	35 81       	ldd	r19, Z+5	; 0x05
 9d2:	42 17       	cp	r20, r18
 9d4:	53 07       	cpc	r21, r19
 9d6:	44 f4       	brge	.+16     	; 0x9e8 <fputc+0x38>
 9d8:	a0 81       	ld	r26, Z
 9da:	b1 81       	ldd	r27, Z+1	; 0x01
 9dc:	9d 01       	movw	r18, r26
 9de:	2f 5f       	subi	r18, 0xFF	; 255
 9e0:	3f 4f       	sbci	r19, 0xFF	; 255
 9e2:	31 83       	std	Z+1, r19	; 0x01
 9e4:	20 83       	st	Z, r18
 9e6:	8c 93       	st	X, r24
 9e8:	26 81       	ldd	r18, Z+6	; 0x06
 9ea:	37 81       	ldd	r19, Z+7	; 0x07
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	37 83       	std	Z+7, r19	; 0x07
 9f2:	26 83       	std	Z+6, r18	; 0x06
 9f4:	10 c0       	rjmp	.+32     	; 0xa16 <fputc+0x66>
 9f6:	eb 01       	movw	r28, r22
 9f8:	09 2f       	mov	r16, r25
 9fa:	18 2f       	mov	r17, r24
 9fc:	00 84       	ldd	r0, Z+8	; 0x08
 9fe:	f1 85       	ldd	r31, Z+9	; 0x09
 a00:	e0 2d       	mov	r30, r0
 a02:	19 95       	eicall
 a04:	89 2b       	or	r24, r25
 a06:	e1 f6       	brne	.-72     	; 0x9c0 <fputc+0x10>
 a08:	8e 81       	ldd	r24, Y+6	; 0x06
 a0a:	9f 81       	ldd	r25, Y+7	; 0x07
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9f 83       	std	Y+7, r25	; 0x07
 a10:	8e 83       	std	Y+6, r24	; 0x06
 a12:	81 2f       	mov	r24, r17
 a14:	90 2f       	mov	r25, r16
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__ultoa_invert>:
 a20:	fa 01       	movw	r30, r20
 a22:	aa 27       	eor	r26, r26
 a24:	28 30       	cpi	r18, 0x08	; 8
 a26:	51 f1       	breq	.+84     	; 0xa7c <__ultoa_invert+0x5c>
 a28:	20 31       	cpi	r18, 0x10	; 16
 a2a:	81 f1       	breq	.+96     	; 0xa8c <__ultoa_invert+0x6c>
 a2c:	e8 94       	clt
 a2e:	6f 93       	push	r22
 a30:	6e 7f       	andi	r22, 0xFE	; 254
 a32:	6e 5f       	subi	r22, 0xFE	; 254
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	af 4f       	sbci	r26, 0xFF	; 255
 a3c:	b1 e0       	ldi	r27, 0x01	; 1
 a3e:	3e d0       	rcall	.+124    	; 0xabc <__ultoa_invert+0x9c>
 a40:	b4 e0       	ldi	r27, 0x04	; 4
 a42:	3c d0       	rcall	.+120    	; 0xabc <__ultoa_invert+0x9c>
 a44:	67 0f       	add	r22, r23
 a46:	78 1f       	adc	r23, r24
 a48:	89 1f       	adc	r24, r25
 a4a:	9a 1f       	adc	r25, r26
 a4c:	a1 1d       	adc	r26, r1
 a4e:	68 0f       	add	r22, r24
 a50:	79 1f       	adc	r23, r25
 a52:	8a 1f       	adc	r24, r26
 a54:	91 1d       	adc	r25, r1
 a56:	a1 1d       	adc	r26, r1
 a58:	6a 0f       	add	r22, r26
 a5a:	71 1d       	adc	r23, r1
 a5c:	81 1d       	adc	r24, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	a1 1d       	adc	r26, r1
 a62:	20 d0       	rcall	.+64     	; 0xaa4 <__ultoa_invert+0x84>
 a64:	09 f4       	brne	.+2      	; 0xa68 <__ultoa_invert+0x48>
 a66:	68 94       	set
 a68:	3f 91       	pop	r19
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	26 9f       	mul	r18, r22
 a6e:	11 24       	eor	r1, r1
 a70:	30 19       	sub	r19, r0
 a72:	30 5d       	subi	r19, 0xD0	; 208
 a74:	31 93       	st	Z+, r19
 a76:	de f6       	brtc	.-74     	; 0xa2e <__ultoa_invert+0xe>
 a78:	cf 01       	movw	r24, r30
 a7a:	08 95       	ret
 a7c:	46 2f       	mov	r20, r22
 a7e:	47 70       	andi	r20, 0x07	; 7
 a80:	40 5d       	subi	r20, 0xD0	; 208
 a82:	41 93       	st	Z+, r20
 a84:	b3 e0       	ldi	r27, 0x03	; 3
 a86:	0f d0       	rcall	.+30     	; 0xaa6 <__ultoa_invert+0x86>
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__ultoa_invert+0x5c>
 a8a:	f6 cf       	rjmp	.-20     	; 0xa78 <__ultoa_invert+0x58>
 a8c:	46 2f       	mov	r20, r22
 a8e:	4f 70       	andi	r20, 0x0F	; 15
 a90:	40 5d       	subi	r20, 0xD0	; 208
 a92:	4a 33       	cpi	r20, 0x3A	; 58
 a94:	18 f0       	brcs	.+6      	; 0xa9c <__ultoa_invert+0x7c>
 a96:	49 5d       	subi	r20, 0xD9	; 217
 a98:	31 fd       	sbrc	r19, 1
 a9a:	40 52       	subi	r20, 0x20	; 32
 a9c:	41 93       	st	Z+, r20
 a9e:	02 d0       	rcall	.+4      	; 0xaa4 <__ultoa_invert+0x84>
 aa0:	a9 f7       	brne	.-22     	; 0xa8c <__ultoa_invert+0x6c>
 aa2:	ea cf       	rjmp	.-44     	; 0xa78 <__ultoa_invert+0x58>
 aa4:	b4 e0       	ldi	r27, 0x04	; 4
 aa6:	a6 95       	lsr	r26
 aa8:	97 95       	ror	r25
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	ba 95       	dec	r27
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__ultoa_invert+0x86>
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	61 05       	cpc	r22, r1
 ab8:	71 05       	cpc	r23, r1
 aba:	08 95       	ret
 abc:	9b 01       	movw	r18, r22
 abe:	ac 01       	movw	r20, r24
 ac0:	0a 2e       	mov	r0, r26
 ac2:	06 94       	lsr	r0
 ac4:	57 95       	ror	r21
 ac6:	47 95       	ror	r20
 ac8:	37 95       	ror	r19
 aca:	27 95       	ror	r18
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0xa2>
 ad0:	62 0f       	add	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	95 1f       	adc	r25, r21
 ad8:	a0 1d       	adc	r26, r0
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
