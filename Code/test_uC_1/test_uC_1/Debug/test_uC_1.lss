
test_uC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000b70  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800222  00800222  00000c26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fe  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ef  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d7  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002d0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	10 c2       	rjmp	.+1056   	; 0x4be <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7d 02       	muls	r23, r29
  e6:	cf 02       	muls	r28, r31
  e8:	cf 02       	muls	r28, r31
  ea:	cf 02       	muls	r28, r31
  ec:	cf 02       	muls	r28, r31
  ee:	cf 02       	muls	r28, r31
  f0:	cf 02       	muls	r28, r31
  f2:	cf 02       	muls	r28, r31
  f4:	7d 02       	muls	r23, r29
  f6:	cf 02       	muls	r28, r31
  f8:	cf 02       	muls	r28, r31
  fa:	cf 02       	muls	r28, r31
  fc:	cf 02       	muls	r28, r31
  fe:	cf 02       	muls	r28, r31
 100:	cf 02       	muls	r28, r31
 102:	cf 02       	muls	r28, r31
 104:	7f 02       	muls	r23, r31
 106:	cf 02       	muls	r28, r31
 108:	cf 02       	muls	r28, r31
 10a:	cf 02       	muls	r28, r31
 10c:	cf 02       	muls	r28, r31
 10e:	cf 02       	muls	r28, r31
 110:	cf 02       	muls	r28, r31
 112:	cf 02       	muls	r28, r31
 114:	cf 02       	muls	r28, r31
 116:	cf 02       	muls	r28, r31
 118:	cf 02       	muls	r28, r31
 11a:	cf 02       	muls	r28, r31
 11c:	cf 02       	muls	r28, r31
 11e:	cf 02       	muls	r28, r31
 120:	cf 02       	muls	r28, r31
 122:	cf 02       	muls	r28, r31
 124:	7f 02       	muls	r23, r31
 126:	cf 02       	muls	r28, r31
 128:	cf 02       	muls	r28, r31
 12a:	cf 02       	muls	r28, r31
 12c:	cf 02       	muls	r28, r31
 12e:	cf 02       	muls	r28, r31
 130:	cf 02       	muls	r28, r31
 132:	cf 02       	muls	r28, r31
 134:	cf 02       	muls	r28, r31
 136:	cf 02       	muls	r28, r31
 138:	cf 02       	muls	r28, r31
 13a:	cf 02       	muls	r28, r31
 13c:	cf 02       	muls	r28, r31
 13e:	cf 02       	muls	r28, r31
 140:	cf 02       	muls	r28, r31
 142:	cf 02       	muls	r28, r31
 144:	cb 02       	muls	r28, r27
 146:	cf 02       	muls	r28, r31
 148:	cf 02       	muls	r28, r31
 14a:	cf 02       	muls	r28, r31
 14c:	cf 02       	muls	r28, r31
 14e:	cf 02       	muls	r28, r31
 150:	cf 02       	muls	r28, r31
 152:	cf 02       	muls	r28, r31
 154:	a8 02       	muls	r26, r24
 156:	cf 02       	muls	r28, r31
 158:	cf 02       	muls	r28, r31
 15a:	cf 02       	muls	r28, r31
 15c:	cf 02       	muls	r28, r31
 15e:	cf 02       	muls	r28, r31
 160:	cf 02       	muls	r28, r31
 162:	cf 02       	muls	r28, r31
 164:	cf 02       	muls	r28, r31
 166:	cf 02       	muls	r28, r31
 168:	cf 02       	muls	r28, r31
 16a:	cf 02       	muls	r28, r31
 16c:	cf 02       	muls	r28, r31
 16e:	cf 02       	muls	r28, r31
 170:	cf 02       	muls	r28, r31
 172:	cf 02       	muls	r28, r31
 174:	9c 02       	muls	r25, r28
 176:	cf 02       	muls	r28, r31
 178:	cf 02       	muls	r28, r31
 17a:	cf 02       	muls	r28, r31
 17c:	cf 02       	muls	r28, r31
 17e:	cf 02       	muls	r28, r31
 180:	cf 02       	muls	r28, r31
 182:	cf 02       	muls	r28, r31
 184:	ba 02       	muls	r27, r26

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	e0 e7       	ldi	r30, 0x70	; 112
 19e:	fb e0       	ldi	r31, 0x0B	; 11
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a2 32       	cpi	r26, 0x22	; 34
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	a2 e2       	ldi	r26, 0x22	; 34
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	ac 32       	cpi	r26, 0x2C	; 44
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	e9 d0       	rcall	.+466    	; 0x394 <main>
 1c2:	d4 c4       	rjmp	.+2472   	; 0xb6c <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <_Z6enablev>:
		} else {
			PORTA &= ~(1 << dataPin[i]);
		}
	}
	enable();
}
 1c6:	a2 9a       	sbi	0x14, 2	; 20
 1c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 1cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 1d0:	a4 e8       	ldi	r26, 0x84	; 132
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e5 e8       	ldi	r30, 0x85	; 133
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	8c 91       	ld	r24, X
 1da:	20 81       	ld	r18, Z
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	92 2b       	or	r25, r18
 1e0:	84 36       	cpi	r24, 0x64	; 100
 1e2:	91 05       	cpc	r25, r1
 1e4:	cc f3       	brlt	.-14     	; 0x1d8 <_Z6enablev+0x12>
 1e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 1ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 1ee:	a2 98       	cbi	0x14, 2	; 20
 1f0:	08 95       	ret

000001f2 <_Z13LCD_WriteCharc>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	f2 e0       	ldi	r31, 0x02	; 2
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	a1 e0       	ldi	r26, 0x01	; 1
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	c8 2f       	mov	r28, r24
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	9d 01       	movw	r18, r26
 208:	04 2e       	mov	r0, r20
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z13LCD_WriteCharc+0x1e>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <_Z13LCD_WriteCharc+0x1a>
 214:	2c 23       	and	r18, r28
 216:	3d 23       	and	r19, r29
 218:	04 2e       	mov	r0, r20
 21a:	02 c0       	rjmp	.+4      	; 0x220 <_Z13LCD_WriteCharc+0x2e>
 21c:	35 95       	asr	r19
 21e:	27 95       	ror	r18
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <_Z13LCD_WriteCharc+0x2a>
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	59 f4       	brne	.+22     	; 0x240 <_Z13LCD_WriteCharc+0x4e>
 22a:	22 b1       	in	r18, 0x02	; 2
 22c:	cd 01       	movw	r24, r26
 22e:	00 80       	ld	r0, Z
 230:	02 c0       	rjmp	.+4      	; 0x236 <_Z13LCD_WriteCharc+0x44>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <_Z13LCD_WriteCharc+0x40>
 23a:	82 2b       	or	r24, r18
 23c:	82 b9       	out	0x02, r24	; 2
 23e:	0c c0       	rjmp	.+24     	; 0x258 <_Z13LCD_WriteCharc+0x66>
 240:	22 b1       	in	r18, 0x02	; 2
 242:	bd 01       	movw	r22, r26
 244:	00 80       	ld	r0, Z
 246:	02 c0       	rjmp	.+4      	; 0x24c <_Z13LCD_WriteCharc+0x5a>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <_Z13LCD_WriteCharc+0x56>
 250:	96 2f       	mov	r25, r22
 252:	90 95       	com	r25
 254:	92 23       	and	r25, r18
 256:	92 b9       	out	0x02, r25	; 2
 258:	4f 5f       	subi	r20, 0xFF	; 255
 25a:	5f 4f       	sbci	r21, 0xFF	; 255
 25c:	32 96       	adiw	r30, 0x02	; 2
 25e:	48 30       	cpi	r20, 0x08	; 8
 260:	51 05       	cpc	r21, r1
 262:	89 f6       	brne	.-94     	; 0x206 <_Z13LCD_WriteCharc+0x14>
 264:	b0 df       	rcall	.-160    	; 0x1c6 <_Z6enablev>
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <_Z12clearDisplayv>:
 26c:	a0 98       	cbi	0x14, 0	; 20
 26e:	a1 98       	cbi	0x14, 1	; 20
 270:	17 98       	cbi	0x02, 7	; 2
 272:	16 98       	cbi	0x02, 6	; 2
 274:	15 98       	cbi	0x02, 5	; 2
 276:	14 98       	cbi	0x02, 4	; 2
 278:	13 98       	cbi	0x02, 3	; 2
 27a:	12 98       	cbi	0x02, 2	; 2
 27c:	11 98       	cbi	0x02, 1	; 2
 27e:	10 9a       	sbi	0x02, 0	; 2
 280:	a2 df       	rcall	.-188    	; 0x1c6 <_Z6enablev>
 282:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 286:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 28a:	a4 e8       	ldi	r26, 0x84	; 132
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	e5 e8       	ldi	r30, 0x85	; 133
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	8c 91       	ld	r24, X
 294:	20 81       	ld	r18, Z
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	92 2b       	or	r25, r18
 29a:	88 3b       	cpi	r24, 0xB8	; 184
 29c:	9b 40       	sbci	r25, 0x0B	; 11
 29e:	cc f3       	brlt	.-14     	; 0x292 <_Z12clearDisplayv+0x26>
 2a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 2a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 2a8:	08 95       	ret

000002aa <_Z10returnHomev>:
	* @brief change the address of the LCD pointer to the first one
	* @param None
	* @retval None
	*/
void returnHome(void){
	PORTG &= ~(1 << RS);
 2aa:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 2ac:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 2ae:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 2b0:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 2b2:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 2b4:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~(1 << DB3);
 2b6:	13 98       	cbi	0x02, 3	; 2
	PORTA &= ~(1 << DB2);
 2b8:	12 98       	cbi	0x02, 2	; 2
	PORTA |= (1 << DB1);
 2ba:	11 9a       	sbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 2bc:	10 98       	cbi	0x02, 0	; 2
	enable();
 2be:	83 df       	rcall	.-250    	; 0x1c6 <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
 2c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 2c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}
 2c8:	a4 e8       	ldi	r26, 0x84	; 132
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e5 e8       	ldi	r30, 0x85	; 133
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	8c 91       	ld	r24, X
 2d2:	20 81       	ld	r18, Z
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	92 2b       	or	r25, r18
 2d8:	88 3b       	cpi	r24, 0xB8	; 184
 2da:	9b 40       	sbci	r25, 0x0B	; 11
 2dc:	cc f3       	brlt	.-14     	; 0x2d0 <_Z10returnHomev+0x26>
	TCNT1L = 0, TCNT1H = 0;
 2de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 2e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 2e6:	08 95       	ret

000002e8 <_Z9inputModev>:
	* @brief set up pins to input mode
	* @param None
	* @retval None
	*/
void inputMode(void){
	PORTG |= (1 << RS);
 2e8:	a0 9a       	sbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 2ea:	a1 98       	cbi	0x14, 1	; 20
 2ec:	08 95       	ret

000002ee <_Z15LCD_WriteStringPc>:
/**
	* @brief send one by one all the character of the string to LCD_WriteChar()
    * @param string: String to be printed on the LCD
	* @retval None
	*/
void LCD_WriteString(char * string){
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
	int i;
	inputMode(); /************ NOT sure we need this */
 2f8:	f7 df       	rcall	.-18     	; 0x2e8 <_Z9inputModev>
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 2fa:	f8 01       	movw	r30, r16
 2fc:	80 81       	ld	r24, Z
 2fe:	81 11       	cpse	r24, r1
 300:	09 c0       	rjmp	.+18     	; 0x314 <_Z15LCD_WriteStringPc+0x26>
 302:	0e c0       	rjmp	.+28     	; 0x320 <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 304:	76 df       	rcall	.-276    	; 0x1f2 <_Z13LCD_WriteCharc>
void LCD_WriteString(char * string){
	int i;
	inputMode(); /************ NOT sure we need this */
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 306:	c0 17       	cp	r28, r16
 308:	d1 07       	cpc	r29, r17
 30a:	51 f0       	breq	.+20     	; 0x320 <_Z15LCD_WriteStringPc+0x32>
 30c:	89 91       	ld	r24, Y+
 30e:	81 11       	cpse	r24, r1
 310:	f9 cf       	rjmp	.-14     	; 0x304 <_Z15LCD_WriteStringPc+0x16>
 312:	06 c0       	rjmp	.+12     	; 0x320 <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 314:	6e df       	rcall	.-292    	; 0x1f2 <_Z13LCD_WriteCharc>
 316:	e8 01       	movw	r28, r16
 318:	21 96       	adiw	r28, 0x01	; 1
 31a:	00 5f       	subi	r16, 0xF0	; 240
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	f6 cf       	rjmp	.-20     	; 0x30c <_Z15LCD_WriteStringPc+0x1e>
	}
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <_Z6turnOnv>:
	* @brief Turn on the display
	* @param None
	* @retval None
	*/
void turnOn(void){
	PORTG &= ~(1 << RS);
 32a:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 32c:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 32e:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 330:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 332:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 334:	14 98       	cbi	0x02, 4	; 2
	PORTA |= (1 << DB3);
 336:	13 9a       	sbi	0x02, 3	; 2
	PORTA |= (1 << DB2);
 338:	12 9a       	sbi	0x02, 2	; 2
	PORTA &= ~(1 << DB1);
 33a:	11 98       	cbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 33c:	10 98       	cbi	0x02, 0	; 2
	enable();
 33e:	43 cf       	rjmp	.-378    	; 0x1c6 <_Z6enablev>
 340:	08 95       	ret

00000342 <_Z11functionSetv>:
	* @brief Set up length of data bus, and size of display
	* @param None
	* @retval None
	*/
void functionSet(void){
	PORTG &= ~(1 << RS);
 342:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 344:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 346:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 348:	16 98       	cbi	0x02, 6	; 2
	PORTA |= (1 << DB5);
 34a:	15 9a       	sbi	0x02, 5	; 2
	PORTA |= (1 << DB4);
 34c:	14 9a       	sbi	0x02, 4	; 2
	PORTA |= (1 << DB3);
 34e:	13 9a       	sbi	0x02, 3	; 2
	PORTA &= ~(1 << DB2);
 350:	12 98       	cbi	0x02, 2	; 2
	PORTA &= ~(1 << DB1);
 352:	11 98       	cbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 354:	10 98       	cbi	0x02, 0	; 2
	enable();
 356:	37 cf       	rjmp	.-402    	; 0x1c6 <_Z6enablev>
 358:	08 95       	ret

0000035a <_Z9entryModev>:
	* @brief set up the entry mode of the display
	* @param None
	* @retval None
	*/
void entryMode(void){
	PORTG &= ~(1 << RS);
 35a:	a0 98       	cbi	0x14, 0	; 20
	PORTG &= ~(1 << RW);
 35c:	a1 98       	cbi	0x14, 1	; 20
	PORTA &= ~(1 << DB7);
 35e:	17 98       	cbi	0x02, 7	; 2
	PORTA &= ~(1 << DB6);
 360:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1 << DB5);
 362:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~(1 << DB4);
 364:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~(1 << DB3);
 366:	13 98       	cbi	0x02, 3	; 2
	PORTA |= (1 << DB2);
 368:	12 9a       	sbi	0x02, 2	; 2
	PORTA |= (1 << DB1);
 36a:	11 9a       	sbi	0x02, 1	; 2
	PORTA &= ~(1 << DB0);
 36c:	10 98       	cbi	0x02, 0	; 2
	enable();
 36e:	2b cf       	rjmp	.-426    	; 0x1c6 <_Z6enablev>
 370:	08 95       	ret

00000372 <_Z7initLCDv>:
	* @param None
	* @retval None
	*/
void initLCD(void){
	//init timer for LCD control. Counts up every 0.5 us (1/ (16M/8))
	TCCR1B |= (1 << CS11); /*prescaler 8*/
 372:	e1 e8       	ldi	r30, 0x81	; 129
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	80 83       	st	Z, r24
	//set pins as outputs
	DDRA |= (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA1) | (1 << DDA0);
 37c:	81 b1       	in	r24, 0x01	; 1
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	81 b9       	out	0x01, r24	; 1
	DDRG |= (1 << DDG2) | (1 << DDG1) | (1 << DDG0);
 382:	83 b3       	in	r24, 0x13	; 19
 384:	87 60       	ori	r24, 0x07	; 7
 386:	83 bb       	out	0x13, r24	; 19
	clearDisplay();
 388:	71 df       	rcall	.-286    	; 0x26c <_Z12clearDisplayv>
	turnOn();
 38a:	cf df       	rcall	.-98     	; 0x32a <_Z6turnOnv>
	functionSet();
 38c:	da df       	rcall	.-76     	; 0x342 <_Z11functionSetv>
	entryMode();
 38e:	e5 df       	rcall	.-54     	; 0x35a <_Z9entryModev>
	returnHome();
 390:	8c cf       	rjmp	.-232    	; 0x2aa <_Z10returnHomev>
 392:	08 95       	ret

00000394 <main>:
#include <stdio.h>
#include "lcd.h"
#include "TWI_Master.h"

int main(void)
{
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	64 97       	sbiw	r28, 0x14	; 20
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
	////initialize LCD
	initLCD(); 		// configure LCD
 3b8:	dc df       	rcall	.-72     	; 0x372 <_Z7initLCDv>
	////char* buffers for printing stuff on the LCD
	char buffer[20];
	
	clearDisplay();
 3ba:	58 df       	rcall	.-336    	; 0x26c <_Z12clearDisplayv>
	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 3bc:	0f 2e       	mov	r0, r31
 3be:	f9 eb       	ldi	r31, 0xB9	; 185
 3c0:	af 2e       	mov	r10, r31
 3c2:	b1 2c       	mov	r11, r1
 3c4:	f0 2d       	mov	r31, r0
 3c6:	f5 01       	movw	r30, r10
 3c8:	90 81       	ld	r25, Z
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fc eb       	ldi	r31, 0xBC	; 188
 3ce:	cf 2e       	mov	r12, r31
 3d0:	d1 2c       	mov	r13, r1
 3d2:	f0 2d       	mov	r31, r0
 3d4:	f6 01       	movw	r30, r12
 3d6:	80 81       	ld	r24, Z
 3d8:	1f 92       	push	r1
 3da:	9f 93       	push	r25
 3dc:	1f 92       	push	r1
 3de:	8f 93       	push	r24
 3e0:	0f 2e       	mov	r0, r31
 3e2:	f1 e1       	ldi	r31, 0x11	; 17
 3e4:	ef 2e       	mov	r14, r31
 3e6:	f2 e0       	ldi	r31, 0x02	; 2
 3e8:	ff 2e       	mov	r15, r31
 3ea:	f0 2d       	mov	r31, r0
 3ec:	ff 92       	push	r15
 3ee:	ef 92       	push	r14
 3f0:	8e 01       	movw	r16, r28
 3f2:	0f 5f       	subi	r16, 0xFF	; 255
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255
 3f6:	1f 93       	push	r17
 3f8:	0f 93       	push	r16
 3fa:	ef d0       	rcall	.+478    	; 0x5da <sprintf>
	LCD_WriteString(buffer);
 3fc:	c8 01       	movw	r24, r16
 3fe:	77 df       	rcall	.-274    	; 0x2ee <_Z15LCD_WriteStringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	ff ef       	ldi	r31, 0xFF	; 255
 402:	23 ed       	ldi	r18, 0xD3	; 211
 404:	80 e3       	ldi	r24, 0x30	; 48
 406:	f1 50       	subi	r31, 0x01	; 1
 408:	20 40       	sbci	r18, 0x00	; 0
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(1000);
  TWBR = TWI_TWBR;                                  // Set bit rate register (Baudrate). Defined in header file.
 412:	87 e0       	ldi	r24, 0x07	; 7
 414:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
  // TWSR = TWI_TWPS;                                  // Not used. Driver presumes prescaler to be 00.
  TWDR = 0xFF;                                      // Default content = SDA released.
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins.
  (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt.
  (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests.
  (0<<TWWC);                             //
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	f6 01       	movw	r30, r12
 422:	80 83       	st	Z, r24
  
  
  
  	clearDisplay();
 424:	23 df       	rcall	.-442    	; 0x26c <_Z12clearDisplayv>
  	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 426:	f5 01       	movw	r30, r10
 428:	90 81       	ld	r25, Z
 42a:	f6 01       	movw	r30, r12
 42c:	80 81       	ld	r24, Z
 42e:	1f 92       	push	r1
 430:	9f 93       	push	r25
 432:	1f 92       	push	r1
 434:	8f 93       	push	r24
 436:	ff 92       	push	r15
 438:	ef 92       	push	r14
 43a:	1f 93       	push	r17
 43c:	0f 93       	push	r16
 43e:	cd d0       	rcall	.+410    	; 0x5da <sprintf>
  	LCD_WriteString(buffer);
 440:	c8 01       	movw	r24, r16
 442:	55 df       	rcall	.-342    	; 0x2ee <_Z15LCD_WriteStringPc>
 444:	ff ef       	ldi	r31, 0xFF	; 255
 446:	23 ed       	ldi	r18, 0xD3	; 211
 448:	80 e3       	ldi	r24, 0x30	; 48
 44a:	f1 50       	subi	r31, 0x01	; 1
 44c:	20 40       	sbci	r18, 0x00	; 0
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 454:	00 00       	nop
	  
	  
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
  (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
  (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|       // Initiate a START condition.
  (0<<TWWC);                             //
 456:	85 ea       	ldi	r24, 0xA5	; 165
 458:	f6 01       	movw	r30, r12
 45a:	80 83       	st	Z, r24
  
   	clearDisplay();
 45c:	07 df       	rcall	.-498    	; 0x26c <_Z12clearDisplayv>
   	sprintf(buffer, "TWCR:%X, TWSR:%X", TWCR, TWSR);
 45e:	f5 01       	movw	r30, r10
 460:	90 81       	ld	r25, Z
 462:	f6 01       	movw	r30, r12
 464:	80 81       	ld	r24, Z
 466:	1f 92       	push	r1
 468:	9f 93       	push	r25
 46a:	1f 92       	push	r1
 46c:	8f 93       	push	r24
 46e:	ff 92       	push	r15
 470:	ef 92       	push	r14
 472:	1f 93       	push	r17
 474:	0f 93       	push	r16
 476:	b1 d0       	rcall	.+354    	; 0x5da <sprintf>
   	LCD_WriteString(buffer);
 478:	c8 01       	movw	r24, r16
 47a:	39 df       	rcall	.-398    	; 0x2ee <_Z15LCD_WriteStringPc>
 47c:	ff ef       	ldi	r31, 0xFF	; 255
 47e:	23 ed       	ldi	r18, 0xD3	; 211
 480:	80 e3       	ldi	r24, 0x30	; 48
 482:	f1 50       	subi	r31, 0x01	; 1
 484:	20 40       	sbci	r18, 0x00	; 0
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 48c:	00 00       	nop
		//PORTD = 0xFF; //Turns ON All LEDs
		//_delay_ms(1000); //1 second delay
		//PORTD= 0x00; //Turns OFF All LEDs
		//_delay_ms(1000); //1 second delay
	//}
}
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	64 96       	adiw	r28, 0x14	; 20
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	08 95       	ret

000004be <__vector_39>:
// {
//   ...
// }

ISR(TWI_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	0f 92       	push	r0
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;

  switch (TWSR)
 4dc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4e0:	8e 2f       	mov	r24, r30
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	38 97       	sbiw	r30, 0x08	; 8
 4e8:	e1 35       	cpi	r30, 0x51	; 81
 4ea:	f1 05       	cpc	r31, r1
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <__vector_39+0x32>
 4ee:	57 c0       	rjmp	.+174    	; 0x59e <__vector_39+0xe0>
 4f0:	88 27       	eor	r24, r24
 4f2:	ee 58       	subi	r30, 0x8E	; 142
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	68 c0       	rjmp	.+208    	; 0x5ca <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 4fa:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 4fe:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end>
 502:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <TWI_msgSize>
 506:	e8 17       	cp	r30, r24
 508:	70 f4       	brcc	.+28     	; 0x526 <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8e 0f       	add	r24, r30
 50e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	eb 5d       	subi	r30, 0xDB	; 219
 516:	fd 4f       	sbci	r31, 0xFD	; 253
 518:	80 81       	ld	r24, Z
 51a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 51e:	85 e8       	ldi	r24, 0x85	; 133
 520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 524:	43 c0       	rjmp	.+134    	; 0x5ac <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 526:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TWI_statusReg>
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 530:	84 e9       	ldi	r24, 0x94	; 148
 532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 536:	3a c0       	rjmp	.+116    	; 0x5ac <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 538:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	8e 0f       	add	r24, r30
 540:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
 544:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	eb 5d       	subi	r30, 0xDB	; 219
 54c:	fd 4f       	sbci	r31, 0xFD	; 253
 54e:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 550:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__data_end>
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <TWI_msgSize>
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	28 17       	cp	r18, r24
 560:	39 07       	cpc	r19, r25
 562:	24 f4       	brge	.+8      	; 0x56c <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 564:	85 ec       	ldi	r24, 0xC5	; 197
 566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 56a:	20 c0       	rjmp	.+64     	; 0x5ac <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 56c:	85 e8       	ldi	r24, 0x85	; 133
 56e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 572:	1c c0       	rjmp	.+56     	; 0x5ac <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 574:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 578:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end>
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	eb 5d       	subi	r30, 0xDB	; 219
 580:	fd 4f       	sbci	r31, 0xFD	; 253
 582:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 584:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TWI_statusReg>
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 58e:	84 e9       	ldi	r24, 0x94	; 148
 590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;
 594:	0b c0       	rjmp	.+22     	; 0x5ac <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 596:	85 ea       	ldi	r24, 0xA5	; 165
 598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <__vector_39+0xee>
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
//    case TWI_NO_STATE              // No relevant state information available; TWINT = "0"
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 59e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 5a2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	0f 90       	pop	r0
 5be:	0b be       	out	0x3b, r0	; 59
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__tablejump2__>:
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	88 1f       	adc	r24, r24
 5d0:	8b bf       	out	0x3b, r24	; 59
 5d2:	07 90       	elpm	r0, Z+
 5d4:	f6 91       	elpm	r31, Z
 5d6:	e0 2d       	mov	r30, r0
 5d8:	19 94       	eijmp

000005da <sprintf>:
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	2e 97       	sbiw	r28, 0x0e	; 14
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	cd bf       	out	0x3d, r28	; 61
 5f2:	0e 89       	ldd	r16, Y+22	; 0x16
 5f4:	1f 89       	ldd	r17, Y+23	; 0x17
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	8c 83       	std	Y+4, r24	; 0x04
 5fa:	1a 83       	std	Y+2, r17	; 0x02
 5fc:	09 83       	std	Y+1, r16	; 0x01
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	9f e7       	ldi	r25, 0x7F	; 127
 602:	9e 83       	std	Y+6, r25	; 0x06
 604:	8d 83       	std	Y+5, r24	; 0x05
 606:	ae 01       	movw	r20, r28
 608:	46 5e       	subi	r20, 0xE6	; 230
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	68 8d       	ldd	r22, Y+24	; 0x18
 60e:	79 8d       	ldd	r23, Y+25	; 0x19
 610:	ce 01       	movw	r24, r28
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	11 d0       	rcall	.+34     	; 0x638 <vfprintf>
 616:	2f 81       	ldd	r18, Y+7	; 0x07
 618:	38 85       	ldd	r19, Y+8	; 0x08
 61a:	f8 01       	movw	r30, r16
 61c:	e2 0f       	add	r30, r18
 61e:	f3 1f       	adc	r31, r19
 620:	10 82       	st	Z, r1
 622:	2e 96       	adiw	r28, 0x0e	; 14
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <vfprintf>:
 638:	2f 92       	push	r2
 63a:	3f 92       	push	r3
 63c:	4f 92       	push	r4
 63e:	5f 92       	push	r5
 640:	6f 92       	push	r6
 642:	7f 92       	push	r7
 644:	8f 92       	push	r8
 646:	9f 92       	push	r9
 648:	af 92       	push	r10
 64a:	bf 92       	push	r11
 64c:	cf 92       	push	r12
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	2c 97       	sbiw	r28, 0x0c	; 12
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	7c 01       	movw	r14, r24
 66e:	6b 01       	movw	r12, r22
 670:	8a 01       	movw	r16, r20
 672:	fc 01       	movw	r30, r24
 674:	17 82       	std	Z+7, r1	; 0x07
 676:	16 82       	std	Z+6, r1	; 0x06
 678:	83 81       	ldd	r24, Z+3	; 0x03
 67a:	81 ff       	sbrs	r24, 1
 67c:	b0 c1       	rjmp	.+864    	; 0x9de <vfprintf+0x3a6>
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	4c 01       	movw	r8, r24
 684:	f7 01       	movw	r30, r14
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	f6 01       	movw	r30, r12
 68a:	93 fd       	sbrc	r25, 3
 68c:	85 91       	lpm	r24, Z+
 68e:	93 ff       	sbrs	r25, 3
 690:	81 91       	ld	r24, Z+
 692:	6f 01       	movw	r12, r30
 694:	88 23       	and	r24, r24
 696:	09 f4       	brne	.+2      	; 0x69a <vfprintf+0x62>
 698:	9e c1       	rjmp	.+828    	; 0x9d6 <vfprintf+0x39e>
 69a:	85 32       	cpi	r24, 0x25	; 37
 69c:	39 f4       	brne	.+14     	; 0x6ac <vfprintf+0x74>
 69e:	93 fd       	sbrc	r25, 3
 6a0:	85 91       	lpm	r24, Z+
 6a2:	93 ff       	sbrs	r25, 3
 6a4:	81 91       	ld	r24, Z+
 6a6:	6f 01       	movw	r12, r30
 6a8:	85 32       	cpi	r24, 0x25	; 37
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <vfprintf+0x7c>
 6ac:	b7 01       	movw	r22, r14
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	c7 d1       	rcall	.+910    	; 0xa40 <fputc>
 6b2:	e8 cf       	rjmp	.-48     	; 0x684 <vfprintf+0x4c>
 6b4:	51 2c       	mov	r5, r1
 6b6:	31 2c       	mov	r3, r1
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	20 32       	cpi	r18, 0x20	; 32
 6bc:	a0 f4       	brcc	.+40     	; 0x6e6 <vfprintf+0xae>
 6be:	8b 32       	cpi	r24, 0x2B	; 43
 6c0:	69 f0       	breq	.+26     	; 0x6dc <vfprintf+0xa4>
 6c2:	30 f4       	brcc	.+12     	; 0x6d0 <vfprintf+0x98>
 6c4:	80 32       	cpi	r24, 0x20	; 32
 6c6:	59 f0       	breq	.+22     	; 0x6de <vfprintf+0xa6>
 6c8:	83 32       	cpi	r24, 0x23	; 35
 6ca:	69 f4       	brne	.+26     	; 0x6e6 <vfprintf+0xae>
 6cc:	20 61       	ori	r18, 0x10	; 16
 6ce:	2c c0       	rjmp	.+88     	; 0x728 <vfprintf+0xf0>
 6d0:	8d 32       	cpi	r24, 0x2D	; 45
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <vfprintf+0xaa>
 6d4:	80 33       	cpi	r24, 0x30	; 48
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <vfprintf+0xae>
 6d8:	21 60       	ori	r18, 0x01	; 1
 6da:	26 c0       	rjmp	.+76     	; 0x728 <vfprintf+0xf0>
 6dc:	22 60       	ori	r18, 0x02	; 2
 6de:	24 60       	ori	r18, 0x04	; 4
 6e0:	23 c0       	rjmp	.+70     	; 0x728 <vfprintf+0xf0>
 6e2:	28 60       	ori	r18, 0x08	; 8
 6e4:	21 c0       	rjmp	.+66     	; 0x728 <vfprintf+0xf0>
 6e6:	27 fd       	sbrc	r18, 7
 6e8:	27 c0       	rjmp	.+78     	; 0x738 <vfprintf+0x100>
 6ea:	30 ed       	ldi	r19, 0xD0	; 208
 6ec:	38 0f       	add	r19, r24
 6ee:	3a 30       	cpi	r19, 0x0A	; 10
 6f0:	78 f4       	brcc	.+30     	; 0x710 <vfprintf+0xd8>
 6f2:	26 ff       	sbrs	r18, 6
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <vfprintf+0xca>
 6f6:	fa e0       	ldi	r31, 0x0A	; 10
 6f8:	5f 9e       	mul	r5, r31
 6fa:	30 0d       	add	r19, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	53 2e       	mov	r5, r19
 700:	13 c0       	rjmp	.+38     	; 0x728 <vfprintf+0xf0>
 702:	8a e0       	ldi	r24, 0x0A	; 10
 704:	38 9e       	mul	r3, r24
 706:	30 0d       	add	r19, r0
 708:	11 24       	eor	r1, r1
 70a:	33 2e       	mov	r3, r19
 70c:	20 62       	ori	r18, 0x20	; 32
 70e:	0c c0       	rjmp	.+24     	; 0x728 <vfprintf+0xf0>
 710:	8e 32       	cpi	r24, 0x2E	; 46
 712:	21 f4       	brne	.+8      	; 0x71c <vfprintf+0xe4>
 714:	26 fd       	sbrc	r18, 6
 716:	5f c1       	rjmp	.+702    	; 0x9d6 <vfprintf+0x39e>
 718:	20 64       	ori	r18, 0x40	; 64
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0xf0>
 71c:	8c 36       	cpi	r24, 0x6C	; 108
 71e:	11 f4       	brne	.+4      	; 0x724 <vfprintf+0xec>
 720:	20 68       	ori	r18, 0x80	; 128
 722:	02 c0       	rjmp	.+4      	; 0x728 <vfprintf+0xf0>
 724:	88 36       	cpi	r24, 0x68	; 104
 726:	41 f4       	brne	.+16     	; 0x738 <vfprintf+0x100>
 728:	f6 01       	movw	r30, r12
 72a:	93 fd       	sbrc	r25, 3
 72c:	85 91       	lpm	r24, Z+
 72e:	93 ff       	sbrs	r25, 3
 730:	81 91       	ld	r24, Z+
 732:	6f 01       	movw	r12, r30
 734:	81 11       	cpse	r24, r1
 736:	c1 cf       	rjmp	.-126    	; 0x6ba <vfprintf+0x82>
 738:	98 2f       	mov	r25, r24
 73a:	9f 7d       	andi	r25, 0xDF	; 223
 73c:	95 54       	subi	r25, 0x45	; 69
 73e:	93 30       	cpi	r25, 0x03	; 3
 740:	28 f4       	brcc	.+10     	; 0x74c <vfprintf+0x114>
 742:	0c 5f       	subi	r16, 0xFC	; 252
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	ff e3       	ldi	r31, 0x3F	; 63
 748:	f9 83       	std	Y+1, r31	; 0x01
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x12e>
 74c:	83 36       	cpi	r24, 0x63	; 99
 74e:	31 f0       	breq	.+12     	; 0x75c <vfprintf+0x124>
 750:	83 37       	cpi	r24, 0x73	; 115
 752:	71 f0       	breq	.+28     	; 0x770 <vfprintf+0x138>
 754:	83 35       	cpi	r24, 0x53	; 83
 756:	09 f0       	breq	.+2      	; 0x75a <vfprintf+0x122>
 758:	57 c0       	rjmp	.+174    	; 0x808 <vfprintf+0x1d0>
 75a:	21 c0       	rjmp	.+66     	; 0x79e <vfprintf+0x166>
 75c:	f8 01       	movw	r30, r16
 75e:	80 81       	ld	r24, Z
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	0e 5f       	subi	r16, 0xFE	; 254
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	44 24       	eor	r4, r4
 768:	43 94       	inc	r4
 76a:	51 2c       	mov	r5, r1
 76c:	54 01       	movw	r10, r8
 76e:	14 c0       	rjmp	.+40     	; 0x798 <vfprintf+0x160>
 770:	38 01       	movw	r6, r16
 772:	f2 e0       	ldi	r31, 0x02	; 2
 774:	6f 0e       	add	r6, r31
 776:	71 1c       	adc	r7, r1
 778:	f8 01       	movw	r30, r16
 77a:	a0 80       	ld	r10, Z
 77c:	b1 80       	ldd	r11, Z+1	; 0x01
 77e:	26 ff       	sbrs	r18, 6
 780:	03 c0       	rjmp	.+6      	; 0x788 <vfprintf+0x150>
 782:	65 2d       	mov	r22, r5
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0x154>
 788:	6f ef       	ldi	r22, 0xFF	; 255
 78a:	7f ef       	ldi	r23, 0xFF	; 255
 78c:	c5 01       	movw	r24, r10
 78e:	2c 87       	std	Y+12, r18	; 0x0c
 790:	4c d1       	rcall	.+664    	; 0xa2a <strnlen>
 792:	2c 01       	movw	r4, r24
 794:	83 01       	movw	r16, r6
 796:	2c 85       	ldd	r18, Y+12	; 0x0c
 798:	2f 77       	andi	r18, 0x7F	; 127
 79a:	22 2e       	mov	r2, r18
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <vfprintf+0x192>
 79e:	38 01       	movw	r6, r16
 7a0:	f2 e0       	ldi	r31, 0x02	; 2
 7a2:	6f 0e       	add	r6, r31
 7a4:	71 1c       	adc	r7, r1
 7a6:	f8 01       	movw	r30, r16
 7a8:	a0 80       	ld	r10, Z
 7aa:	b1 80       	ldd	r11, Z+1	; 0x01
 7ac:	26 ff       	sbrs	r18, 6
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <vfprintf+0x17e>
 7b0:	65 2d       	mov	r22, r5
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0x182>
 7b6:	6f ef       	ldi	r22, 0xFF	; 255
 7b8:	7f ef       	ldi	r23, 0xFF	; 255
 7ba:	c5 01       	movw	r24, r10
 7bc:	2c 87       	std	Y+12, r18	; 0x0c
 7be:	2a d1       	rcall	.+596    	; 0xa14 <strnlen_P>
 7c0:	2c 01       	movw	r4, r24
 7c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c4:	20 68       	ori	r18, 0x80	; 128
 7c6:	22 2e       	mov	r2, r18
 7c8:	83 01       	movw	r16, r6
 7ca:	23 fc       	sbrc	r2, 3
 7cc:	19 c0       	rjmp	.+50     	; 0x800 <vfprintf+0x1c8>
 7ce:	83 2d       	mov	r24, r3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	48 16       	cp	r4, r24
 7d4:	59 06       	cpc	r5, r25
 7d6:	a0 f4       	brcc	.+40     	; 0x800 <vfprintf+0x1c8>
 7d8:	b7 01       	movw	r22, r14
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	30 d1       	rcall	.+608    	; 0xa40 <fputc>
 7e0:	3a 94       	dec	r3
 7e2:	f5 cf       	rjmp	.-22     	; 0x7ce <vfprintf+0x196>
 7e4:	f5 01       	movw	r30, r10
 7e6:	27 fc       	sbrc	r2, 7
 7e8:	85 91       	lpm	r24, Z+
 7ea:	27 fe       	sbrs	r2, 7
 7ec:	81 91       	ld	r24, Z+
 7ee:	5f 01       	movw	r10, r30
 7f0:	b7 01       	movw	r22, r14
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	25 d1       	rcall	.+586    	; 0xa40 <fputc>
 7f6:	31 10       	cpse	r3, r1
 7f8:	3a 94       	dec	r3
 7fa:	f1 e0       	ldi	r31, 0x01	; 1
 7fc:	4f 1a       	sub	r4, r31
 7fe:	51 08       	sbc	r5, r1
 800:	41 14       	cp	r4, r1
 802:	51 04       	cpc	r5, r1
 804:	79 f7       	brne	.-34     	; 0x7e4 <vfprintf+0x1ac>
 806:	de c0       	rjmp	.+444    	; 0x9c4 <vfprintf+0x38c>
 808:	84 36       	cpi	r24, 0x64	; 100
 80a:	11 f0       	breq	.+4      	; 0x810 <vfprintf+0x1d8>
 80c:	89 36       	cpi	r24, 0x69	; 105
 80e:	31 f5       	brne	.+76     	; 0x85c <vfprintf+0x224>
 810:	f8 01       	movw	r30, r16
 812:	27 ff       	sbrs	r18, 7
 814:	07 c0       	rjmp	.+14     	; 0x824 <vfprintf+0x1ec>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	82 81       	ldd	r24, Z+2	; 0x02
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	0c 5f       	subi	r16, 0xFC	; 252
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0x1fc>
 824:	60 81       	ld	r22, Z
 826:	71 81       	ldd	r23, Z+1	; 0x01
 828:	07 2e       	mov	r0, r23
 82a:	00 0c       	add	r0, r0
 82c:	88 0b       	sbc	r24, r24
 82e:	99 0b       	sbc	r25, r25
 830:	0e 5f       	subi	r16, 0xFE	; 254
 832:	1f 4f       	sbci	r17, 0xFF	; 255
 834:	2f 76       	andi	r18, 0x6F	; 111
 836:	72 2e       	mov	r7, r18
 838:	97 ff       	sbrs	r25, 7
 83a:	09 c0       	rjmp	.+18     	; 0x84e <vfprintf+0x216>
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	20 68       	ori	r18, 0x80	; 128
 84c:	72 2e       	mov	r7, r18
 84e:	2a e0       	ldi	r18, 0x0A	; 10
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	a4 01       	movw	r20, r8
 854:	2d d1       	rcall	.+602    	; 0xab0 <__ultoa_invert>
 856:	a8 2e       	mov	r10, r24
 858:	a8 18       	sub	r10, r8
 85a:	43 c0       	rjmp	.+134    	; 0x8e2 <vfprintf+0x2aa>
 85c:	85 37       	cpi	r24, 0x75	; 117
 85e:	29 f4       	brne	.+10     	; 0x86a <vfprintf+0x232>
 860:	2f 7e       	andi	r18, 0xEF	; 239
 862:	b2 2e       	mov	r11, r18
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	25 c0       	rjmp	.+74     	; 0x8b4 <vfprintf+0x27c>
 86a:	f2 2f       	mov	r31, r18
 86c:	f9 7f       	andi	r31, 0xF9	; 249
 86e:	bf 2e       	mov	r11, r31
 870:	8f 36       	cpi	r24, 0x6F	; 111
 872:	c1 f0       	breq	.+48     	; 0x8a4 <vfprintf+0x26c>
 874:	18 f4       	brcc	.+6      	; 0x87c <vfprintf+0x244>
 876:	88 35       	cpi	r24, 0x58	; 88
 878:	79 f0       	breq	.+30     	; 0x898 <vfprintf+0x260>
 87a:	ad c0       	rjmp	.+346    	; 0x9d6 <vfprintf+0x39e>
 87c:	80 37       	cpi	r24, 0x70	; 112
 87e:	19 f0       	breq	.+6      	; 0x886 <vfprintf+0x24e>
 880:	88 37       	cpi	r24, 0x78	; 120
 882:	21 f0       	breq	.+8      	; 0x88c <vfprintf+0x254>
 884:	a8 c0       	rjmp	.+336    	; 0x9d6 <vfprintf+0x39e>
 886:	2f 2f       	mov	r18, r31
 888:	20 61       	ori	r18, 0x10	; 16
 88a:	b2 2e       	mov	r11, r18
 88c:	b4 fe       	sbrs	r11, 4
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <vfprintf+0x272>
 890:	8b 2d       	mov	r24, r11
 892:	84 60       	ori	r24, 0x04	; 4
 894:	b8 2e       	mov	r11, r24
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x272>
 898:	24 ff       	sbrs	r18, 4
 89a:	0a c0       	rjmp	.+20     	; 0x8b0 <vfprintf+0x278>
 89c:	9f 2f       	mov	r25, r31
 89e:	96 60       	ori	r25, 0x06	; 6
 8a0:	b9 2e       	mov	r11, r25
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0x278>
 8a4:	28 e0       	ldi	r18, 0x08	; 8
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <vfprintf+0x27c>
 8aa:	20 e1       	ldi	r18, 0x10	; 16
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x27c>
 8b0:	20 e1       	ldi	r18, 0x10	; 16
 8b2:	32 e0       	ldi	r19, 0x02	; 2
 8b4:	f8 01       	movw	r30, r16
 8b6:	b7 fe       	sbrs	r11, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <vfprintf+0x290>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <vfprintf+0x29c>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 5f       	subi	r16, 0xFE	; 254
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	a4 01       	movw	r20, r8
 8d6:	ec d0       	rcall	.+472    	; 0xab0 <__ultoa_invert>
 8d8:	a8 2e       	mov	r10, r24
 8da:	a8 18       	sub	r10, r8
 8dc:	fb 2d       	mov	r31, r11
 8de:	ff 77       	andi	r31, 0x7F	; 127
 8e0:	7f 2e       	mov	r7, r31
 8e2:	76 fe       	sbrs	r7, 6
 8e4:	0b c0       	rjmp	.+22     	; 0x8fc <vfprintf+0x2c4>
 8e6:	37 2d       	mov	r19, r7
 8e8:	3e 7f       	andi	r19, 0xFE	; 254
 8ea:	a5 14       	cp	r10, r5
 8ec:	50 f4       	brcc	.+20     	; 0x902 <vfprintf+0x2ca>
 8ee:	74 fe       	sbrs	r7, 4
 8f0:	0a c0       	rjmp	.+20     	; 0x906 <vfprintf+0x2ce>
 8f2:	72 fc       	sbrc	r7, 2
 8f4:	08 c0       	rjmp	.+16     	; 0x906 <vfprintf+0x2ce>
 8f6:	37 2d       	mov	r19, r7
 8f8:	3e 7e       	andi	r19, 0xEE	; 238
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <vfprintf+0x2ce>
 8fc:	ba 2c       	mov	r11, r10
 8fe:	37 2d       	mov	r19, r7
 900:	03 c0       	rjmp	.+6      	; 0x908 <vfprintf+0x2d0>
 902:	ba 2c       	mov	r11, r10
 904:	01 c0       	rjmp	.+2      	; 0x908 <vfprintf+0x2d0>
 906:	b5 2c       	mov	r11, r5
 908:	34 ff       	sbrs	r19, 4
 90a:	0d c0       	rjmp	.+26     	; 0x926 <vfprintf+0x2ee>
 90c:	fe 01       	movw	r30, r28
 90e:	ea 0d       	add	r30, r10
 910:	f1 1d       	adc	r31, r1
 912:	80 81       	ld	r24, Z
 914:	80 33       	cpi	r24, 0x30	; 48
 916:	11 f4       	brne	.+4      	; 0x91c <vfprintf+0x2e4>
 918:	39 7e       	andi	r19, 0xE9	; 233
 91a:	09 c0       	rjmp	.+18     	; 0x92e <vfprintf+0x2f6>
 91c:	32 ff       	sbrs	r19, 2
 91e:	06 c0       	rjmp	.+12     	; 0x92c <vfprintf+0x2f4>
 920:	b3 94       	inc	r11
 922:	b3 94       	inc	r11
 924:	04 c0       	rjmp	.+8      	; 0x92e <vfprintf+0x2f6>
 926:	83 2f       	mov	r24, r19
 928:	86 78       	andi	r24, 0x86	; 134
 92a:	09 f0       	breq	.+2      	; 0x92e <vfprintf+0x2f6>
 92c:	b3 94       	inc	r11
 92e:	33 fd       	sbrc	r19, 3
 930:	12 c0       	rjmp	.+36     	; 0x956 <vfprintf+0x31e>
 932:	30 ff       	sbrs	r19, 0
 934:	06 c0       	rjmp	.+12     	; 0x942 <vfprintf+0x30a>
 936:	5a 2c       	mov	r5, r10
 938:	b3 14       	cp	r11, r3
 93a:	18 f4       	brcc	.+6      	; 0x942 <vfprintf+0x30a>
 93c:	53 0c       	add	r5, r3
 93e:	5b 18       	sub	r5, r11
 940:	b3 2c       	mov	r11, r3
 942:	b3 14       	cp	r11, r3
 944:	60 f4       	brcc	.+24     	; 0x95e <vfprintf+0x326>
 946:	b7 01       	movw	r22, r14
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	3c 87       	std	Y+12, r19	; 0x0c
 94e:	78 d0       	rcall	.+240    	; 0xa40 <fputc>
 950:	b3 94       	inc	r11
 952:	3c 85       	ldd	r19, Y+12	; 0x0c
 954:	f6 cf       	rjmp	.-20     	; 0x942 <vfprintf+0x30a>
 956:	b3 14       	cp	r11, r3
 958:	10 f4       	brcc	.+4      	; 0x95e <vfprintf+0x326>
 95a:	3b 18       	sub	r3, r11
 95c:	01 c0       	rjmp	.+2      	; 0x960 <vfprintf+0x328>
 95e:	31 2c       	mov	r3, r1
 960:	34 ff       	sbrs	r19, 4
 962:	11 c0       	rjmp	.+34     	; 0x986 <vfprintf+0x34e>
 964:	b7 01       	movw	r22, r14
 966:	80 e3       	ldi	r24, 0x30	; 48
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	3c 87       	std	Y+12, r19	; 0x0c
 96c:	69 d0       	rcall	.+210    	; 0xa40 <fputc>
 96e:	3c 85       	ldd	r19, Y+12	; 0x0c
 970:	32 ff       	sbrs	r19, 2
 972:	16 c0       	rjmp	.+44     	; 0x9a0 <vfprintf+0x368>
 974:	31 fd       	sbrc	r19, 1
 976:	03 c0       	rjmp	.+6      	; 0x97e <vfprintf+0x346>
 978:	88 e7       	ldi	r24, 0x78	; 120
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	02 c0       	rjmp	.+4      	; 0x982 <vfprintf+0x34a>
 97e:	88 e5       	ldi	r24, 0x58	; 88
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	b7 01       	movw	r22, r14
 984:	0c c0       	rjmp	.+24     	; 0x99e <vfprintf+0x366>
 986:	83 2f       	mov	r24, r19
 988:	86 78       	andi	r24, 0x86	; 134
 98a:	51 f0       	breq	.+20     	; 0x9a0 <vfprintf+0x368>
 98c:	31 ff       	sbrs	r19, 1
 98e:	02 c0       	rjmp	.+4      	; 0x994 <vfprintf+0x35c>
 990:	8b e2       	ldi	r24, 0x2B	; 43
 992:	01 c0       	rjmp	.+2      	; 0x996 <vfprintf+0x35e>
 994:	80 e2       	ldi	r24, 0x20	; 32
 996:	37 fd       	sbrc	r19, 7
 998:	8d e2       	ldi	r24, 0x2D	; 45
 99a:	b7 01       	movw	r22, r14
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	50 d0       	rcall	.+160    	; 0xa40 <fputc>
 9a0:	a5 14       	cp	r10, r5
 9a2:	30 f4       	brcc	.+12     	; 0x9b0 <vfprintf+0x378>
 9a4:	b7 01       	movw	r22, r14
 9a6:	80 e3       	ldi	r24, 0x30	; 48
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	4a d0       	rcall	.+148    	; 0xa40 <fputc>
 9ac:	5a 94       	dec	r5
 9ae:	f8 cf       	rjmp	.-16     	; 0x9a0 <vfprintf+0x368>
 9b0:	aa 94       	dec	r10
 9b2:	f4 01       	movw	r30, r8
 9b4:	ea 0d       	add	r30, r10
 9b6:	f1 1d       	adc	r31, r1
 9b8:	80 81       	ld	r24, Z
 9ba:	b7 01       	movw	r22, r14
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	40 d0       	rcall	.+128    	; 0xa40 <fputc>
 9c0:	a1 10       	cpse	r10, r1
 9c2:	f6 cf       	rjmp	.-20     	; 0x9b0 <vfprintf+0x378>
 9c4:	33 20       	and	r3, r3
 9c6:	09 f4       	brne	.+2      	; 0x9ca <vfprintf+0x392>
 9c8:	5d ce       	rjmp	.-838    	; 0x684 <vfprintf+0x4c>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	37 d0       	rcall	.+110    	; 0xa40 <fputc>
 9d2:	3a 94       	dec	r3
 9d4:	f7 cf       	rjmp	.-18     	; 0x9c4 <vfprintf+0x38c>
 9d6:	f7 01       	movw	r30, r14
 9d8:	86 81       	ldd	r24, Z+6	; 0x06
 9da:	97 81       	ldd	r25, Z+7	; 0x07
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <vfprintf+0x3aa>
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	2c 96       	adiw	r28, 0x0c	; 12
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	df 90       	pop	r13
 9fc:	cf 90       	pop	r12
 9fe:	bf 90       	pop	r11
 a00:	af 90       	pop	r10
 a02:	9f 90       	pop	r9
 a04:	8f 90       	pop	r8
 a06:	7f 90       	pop	r7
 a08:	6f 90       	pop	r6
 a0a:	5f 90       	pop	r5
 a0c:	4f 90       	pop	r4
 a0e:	3f 90       	pop	r3
 a10:	2f 90       	pop	r2
 a12:	08 95       	ret

00000a14 <strnlen_P>:
 a14:	fc 01       	movw	r30, r24
 a16:	05 90       	lpm	r0, Z+
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen_P+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <strnlen>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	61 50       	subi	r22, 0x01	; 1
 a2e:	70 40       	sbci	r23, 0x00	; 0
 a30:	01 90       	ld	r0, Z+
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <fputc>:
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	fb 01       	movw	r30, r22
 a4a:	23 81       	ldd	r18, Z+3	; 0x03
 a4c:	21 fd       	sbrc	r18, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x16>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	28 c0       	rjmp	.+80     	; 0xaa6 <fputc+0x66>
 a56:	22 ff       	sbrs	r18, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <fputc+0x46>
 a5a:	46 81       	ldd	r20, Z+6	; 0x06
 a5c:	57 81       	ldd	r21, Z+7	; 0x07
 a5e:	24 81       	ldd	r18, Z+4	; 0x04
 a60:	35 81       	ldd	r19, Z+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	44 f4       	brge	.+16     	; 0xa78 <fputc+0x38>
 a68:	a0 81       	ld	r26, Z
 a6a:	b1 81       	ldd	r27, Z+1	; 0x01
 a6c:	9d 01       	movw	r18, r26
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	31 83       	std	Z+1, r19	; 0x01
 a74:	20 83       	st	Z, r18
 a76:	8c 93       	st	X, r24
 a78:	26 81       	ldd	r18, Z+6	; 0x06
 a7a:	37 81       	ldd	r19, Z+7	; 0x07
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	37 83       	std	Z+7, r19	; 0x07
 a82:	26 83       	std	Z+6, r18	; 0x06
 a84:	10 c0       	rjmp	.+32     	; 0xaa6 <fputc+0x66>
 a86:	eb 01       	movw	r28, r22
 a88:	09 2f       	mov	r16, r25
 a8a:	18 2f       	mov	r17, r24
 a8c:	00 84       	ldd	r0, Z+8	; 0x08
 a8e:	f1 85       	ldd	r31, Z+9	; 0x09
 a90:	e0 2d       	mov	r30, r0
 a92:	19 95       	eicall
 a94:	89 2b       	or	r24, r25
 a96:	e1 f6       	brne	.-72     	; 0xa50 <fputc+0x10>
 a98:	8e 81       	ldd	r24, Y+6	; 0x06
 a9a:	9f 81       	ldd	r25, Y+7	; 0x07
 a9c:	01 96       	adiw	r24, 0x01	; 1
 a9e:	9f 83       	std	Y+7, r25	; 0x07
 aa0:	8e 83       	std	Y+6, r24	; 0x06
 aa2:	81 2f       	mov	r24, r17
 aa4:	90 2f       	mov	r25, r16
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	1f 91       	pop	r17
 aac:	0f 91       	pop	r16
 aae:	08 95       	ret

00000ab0 <__ultoa_invert>:
 ab0:	fa 01       	movw	r30, r20
 ab2:	aa 27       	eor	r26, r26
 ab4:	28 30       	cpi	r18, 0x08	; 8
 ab6:	51 f1       	breq	.+84     	; 0xb0c <__ultoa_invert+0x5c>
 ab8:	20 31       	cpi	r18, 0x10	; 16
 aba:	81 f1       	breq	.+96     	; 0xb1c <__ultoa_invert+0x6c>
 abc:	e8 94       	clt
 abe:	6f 93       	push	r22
 ac0:	6e 7f       	andi	r22, 0xFE	; 254
 ac2:	6e 5f       	subi	r22, 0xFE	; 254
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	af 4f       	sbci	r26, 0xFF	; 255
 acc:	b1 e0       	ldi	r27, 0x01	; 1
 ace:	3e d0       	rcall	.+124    	; 0xb4c <__ultoa_invert+0x9c>
 ad0:	b4 e0       	ldi	r27, 0x04	; 4
 ad2:	3c d0       	rcall	.+120    	; 0xb4c <__ultoa_invert+0x9c>
 ad4:	67 0f       	add	r22, r23
 ad6:	78 1f       	adc	r23, r24
 ad8:	89 1f       	adc	r24, r25
 ada:	9a 1f       	adc	r25, r26
 adc:	a1 1d       	adc	r26, r1
 ade:	68 0f       	add	r22, r24
 ae0:	79 1f       	adc	r23, r25
 ae2:	8a 1f       	adc	r24, r26
 ae4:	91 1d       	adc	r25, r1
 ae6:	a1 1d       	adc	r26, r1
 ae8:	6a 0f       	add	r22, r26
 aea:	71 1d       	adc	r23, r1
 aec:	81 1d       	adc	r24, r1
 aee:	91 1d       	adc	r25, r1
 af0:	a1 1d       	adc	r26, r1
 af2:	20 d0       	rcall	.+64     	; 0xb34 <__ultoa_invert+0x84>
 af4:	09 f4       	brne	.+2      	; 0xaf8 <__ultoa_invert+0x48>
 af6:	68 94       	set
 af8:	3f 91       	pop	r19
 afa:	2a e0       	ldi	r18, 0x0A	; 10
 afc:	26 9f       	mul	r18, r22
 afe:	11 24       	eor	r1, r1
 b00:	30 19       	sub	r19, r0
 b02:	30 5d       	subi	r19, 0xD0	; 208
 b04:	31 93       	st	Z+, r19
 b06:	de f6       	brtc	.-74     	; 0xabe <__ultoa_invert+0xe>
 b08:	cf 01       	movw	r24, r30
 b0a:	08 95       	ret
 b0c:	46 2f       	mov	r20, r22
 b0e:	47 70       	andi	r20, 0x07	; 7
 b10:	40 5d       	subi	r20, 0xD0	; 208
 b12:	41 93       	st	Z+, r20
 b14:	b3 e0       	ldi	r27, 0x03	; 3
 b16:	0f d0       	rcall	.+30     	; 0xb36 <__ultoa_invert+0x86>
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0x5c>
 b1a:	f6 cf       	rjmp	.-20     	; 0xb08 <__ultoa_invert+0x58>
 b1c:	46 2f       	mov	r20, r22
 b1e:	4f 70       	andi	r20, 0x0F	; 15
 b20:	40 5d       	subi	r20, 0xD0	; 208
 b22:	4a 33       	cpi	r20, 0x3A	; 58
 b24:	18 f0       	brcs	.+6      	; 0xb2c <__ultoa_invert+0x7c>
 b26:	49 5d       	subi	r20, 0xD9	; 217
 b28:	31 fd       	sbrc	r19, 1
 b2a:	40 52       	subi	r20, 0x20	; 32
 b2c:	41 93       	st	Z+, r20
 b2e:	02 d0       	rcall	.+4      	; 0xb34 <__ultoa_invert+0x84>
 b30:	a9 f7       	brne	.-22     	; 0xb1c <__ultoa_invert+0x6c>
 b32:	ea cf       	rjmp	.-44     	; 0xb08 <__ultoa_invert+0x58>
 b34:	b4 e0       	ldi	r27, 0x04	; 4
 b36:	a6 95       	lsr	r26
 b38:	97 95       	ror	r25
 b3a:	87 95       	ror	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	ba 95       	dec	r27
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__ultoa_invert+0x86>
 b44:	00 97       	sbiw	r24, 0x00	; 0
 b46:	61 05       	cpc	r22, r1
 b48:	71 05       	cpc	r23, r1
 b4a:	08 95       	ret
 b4c:	9b 01       	movw	r18, r22
 b4e:	ac 01       	movw	r20, r24
 b50:	0a 2e       	mov	r0, r26
 b52:	06 94       	lsr	r0
 b54:	57 95       	ror	r21
 b56:	47 95       	ror	r20
 b58:	37 95       	ror	r19
 b5a:	27 95       	ror	r18
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__ultoa_invert+0xa2>
 b60:	62 0f       	add	r22, r18
 b62:	73 1f       	adc	r23, r19
 b64:	84 1f       	adc	r24, r20
 b66:	95 1f       	adc	r25, r21
 b68:	a0 1d       	adc	r26, r0
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>
