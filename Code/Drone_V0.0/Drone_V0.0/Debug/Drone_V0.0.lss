
Drone_V0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  0000171e  000017b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000171e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  0080022c  0080022c  000017de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028e4  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cd  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00006404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b86  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db6  00000000  00000000  0000736e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__vector_10>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c1       	rjmp	.+588    	; 0x2a2 <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e2 06       	cpc	r14, r18
      e6:	f3 06       	cpc	r15, r19
      e8:	04 07       	cpc	r16, r20
      ea:	15 07       	cpc	r17, r21
      ec:	26 07       	cpc	r18, r22
      ee:	37 07       	cpc	r19, r23
      f0:	48 07       	cpc	r20, r24
      f2:	59 07       	cpc	r21, r25

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	ee e1       	ldi	r30, 0x1E	; 30
     10c:	f7 e1       	ldi	r31, 0x17	; 23
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 32       	cpi	r26, 0x2C	; 44
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	22 e0       	ldi	r18, 0x02	; 2
     120:	ac e2       	ldi	r26, 0x2C	; 44
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	ab 38       	cpi	r26, 0x8B	; 139
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	1a d3       	rcall	.+1588   	; 0x764 <main>
     130:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <_ZN3EscC1Ei>:

//constructor

Esc::Esc(int escPosition)
{
	escNumber = escPosition;
     136:	fc 01       	movw	r30, r24
     138:	71 83       	std	Z+1, r23	; 0x01
     13a:	60 83       	st	Z, r22
     13c:	08 95       	ret

0000013e <_Z13initializeESCv>:
}

void initializeESC()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
     13e:	e0 ea       	ldi	r30, 0xA0	; 160
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	82 6a       	ori	r24, 0xA2	; 162
     146:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
     148:	e0 e2       	ldi	r30, 0x20	; 32
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	80 81       	ld	r24, Z
     14e:	82 6a       	ori	r24, 0xA2	; 162
     150:	80 83       	st	Z, r24

  //wave generator mode Ã  phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
     152:	e1 ea       	ldi	r30, 0xA1	; 161
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	81 61       	ori	r24, 0x11	; 17
     15a:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
     15c:	e1 e2       	ldi	r30, 0x21	; 33
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	80 81       	ld	r24, Z
     162:	81 61       	ori	r24, 0x11	; 17
     164:	80 83       	st	Z, r24
  
  //rÃ©gler TOP Ã  65535
  ICR4 = 65535;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	9f ef       	ldi	r25, 0xFF	; 255
     16a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     16e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  ICR5 = 65535;
     172:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     176:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
	if(RFInitialized){
     17a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <RFInitialized>
     17e:	88 23       	and	r24, r24
     180:	99 f0       	breq	.+38     	; 0x1a8 <_Z13initializeESCv+0x6a>
		OCR4A = ESC_INIT_PW;
     182:	88 e5       	ldi	r24, 0x58	; 88
     184:	91 e1       	ldi	r25, 0x11	; 17
     186:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     18a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		OCR4B = ESC_INIT_PW;
     18e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     192:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
		OCR5A = ESC_INIT_PW;
     196:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     19a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		OCR5B = ESC_INIT_PW;
     19e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     1a2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     1a6:	10 c0       	rjmp	.+32     	; 0x1c8 <_Z13initializeESCv+0x8a>
	}
	else{
		OCR4A = 0;
     1a8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1ac:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		OCR4B = 0;
     1b0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1b4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
		OCR5A = 0;
     1b8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     1bc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		OCR5B = 0;
     1c0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     1c4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
     1c8:	ea e0       	ldi	r30, 0x0A	; 10
     1ca:	f1 e0       	ldi	r31, 0x01	; 1
     1cc:	80 81       	ld	r24, Z
     1ce:	88 61       	ori	r24, 0x18	; 24
     1d0:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
     1d2:	e1 e0       	ldi	r30, 0x01	; 1
     1d4:	f1 e0       	ldi	r31, 0x01	; 1
     1d6:	80 81       	ld	r24, Z
     1d8:	88 61       	ori	r24, 0x18	; 24
     1da:	80 83       	st	Z, r24
  
  //delay to make sure the ESC are armed before playing with the PWM
  _delay_ms(DELAY_ESC);
  
  //Timer 4/5 set to 0
  TCNT4 = 0;
     1dc:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     1e0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5 = 0;
     1e4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     1e8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
  
  escInitialized = true;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
     1f2:	08 95       	ret

000001f4 <_ZN3Esc3setEj>:
}

void Esc::set(uint16_t pwm)
{
	switch (escNumber) {
     1f4:	fc 01       	movw	r30, r24
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	91 05       	cpc	r25, r1
     1fe:	99 f0       	breq	.+38     	; 0x226 <_ZN3Esc3setEj+0x32>
     200:	1c f4       	brge	.+6      	; 0x208 <_ZN3Esc3setEj+0x14>
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	39 f0       	breq	.+14     	; 0x214 <_ZN3Esc3setEj+0x20>
     206:	2a c0       	rjmp	.+84     	; 0x25c <_ZN3Esc3setEj+0x68>
     208:	83 30       	cpi	r24, 0x03	; 3
     20a:	91 05       	cpc	r25, r1
     20c:	a9 f0       	breq	.+42     	; 0x238 <_ZN3Esc3setEj+0x44>
     20e:	04 97       	sbiw	r24, 0x04	; 4
     210:	e1 f0       	breq	.+56     	; 0x24a <_ZN3Esc3setEj+0x56>
     212:	24 c0       	rjmp	.+72     	; 0x25c <_ZN3Esc3setEj+0x68>
		//multiply by 4 here to get from the PWM of the RF controller to the ESC
		//ESC requires 1-2ms pulse width so from 8000 to 16000 pwm
		//since the number we get from the RF is between 2000 and 4000, multiply by 4
		case 1: 
			OCR4A = pwm*4;
     214:	66 0f       	add	r22, r22
     216:	77 1f       	adc	r23, r23
     218:	66 0f       	add	r22, r22
     21a:	77 1f       	adc	r23, r23
     21c:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     220:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
     224:	08 95       	ret
		case 2: 
			OCR4B = pwm*4;
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	66 0f       	add	r22, r22
     22c:	77 1f       	adc	r23, r23
     22e:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     232:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
     236:	08 95       	ret
		case 3: 
			OCR5A = pwm*4;
     238:	66 0f       	add	r22, r22
     23a:	77 1f       	adc	r23, r23
     23c:	66 0f       	add	r22, r22
     23e:	77 1f       	adc	r23, r23
     240:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     244:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     248:	08 95       	ret
		case 4: 
			OCR5B = pwm*4;
     24a:	66 0f       	add	r22, r22
     24c:	77 1f       	adc	r23, r23
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     256:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     25a:	08 95       	ret
		default: 
			OCR4A = 0;
     25c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     260:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			OCR4B = 0;
     264:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     268:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			OCR5A = 0;
     26c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     270:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			OCR5B = 0;
     274:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     278:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     27c:	08 95       	ret

0000027e <_ZN3IMUC1Ev>:
int16_t tempRaw;
uint32_t timer;
uint8_t i2cData[14];

//constructor
IMU::IMU()
     27e:	08 95       	ret

00000280 <_Z14startInterruptv>:
    * @param none
	* @retval None
	*/
void startInterrupt()
{
	sei();	/* Turn interrupts on */
     280:	78 94       	sei
     282:	08 95       	ret

00000284 <__vector_10>:
	* ch_x_pw variables. The counter always runs to avoid having issues when 2 channels are triggerred at the same time
	* and overflow protection is implemented. 
    * @param none
	* @retval None
	*/
ISR(PCINT1_vect) {
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	8f 93       	push	r24
	flagRF = 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <flagRF>
}
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <__vector_21>:
	in order to control different hardware. This is where to add different flags if you want more interrupt
	routines
    * @param none
	* @retval None
	*/
ISR(TIMER0_COMPA_vect){
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
	
	static int LCDFlagCount;
	static int ESCFlagCount;
	static int WS2812FlagCount;
	
	if(lcdInitialized == true){
     2b2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lcdInitialized>
     2b6:	88 23       	and	r24, r24
     2b8:	a1 f0       	breq	.+40     	; 0x2e2 <__vector_21+0x40>
		if(LCDFlagCount >= LCD_PERIOD){
     2ba:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <_ZZ11__vector_21E12LCDFlagCount>
     2be:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	91 05       	cpc	r25, r1
     2c6:	44 f0       	brlt	.+16     	; 0x2d8 <__vector_21+0x36>
			flagLCD = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <flagLCD>
			LCDFlagCount = 0;
     2ce:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     2d2:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <_ZZ11__vector_21E12LCDFlagCount>
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <__vector_21+0x40>
		}
		else {
			LCDFlagCount++;
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     2de:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <_ZZ11__vector_21E12LCDFlagCount>
		}
	}

	if(escInitialized == true){	
     2e2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
     2e6:	88 23       	and	r24, r24
     2e8:	a9 f0       	breq	.+42     	; 0x314 <__vector_21+0x72>
		if(ESCFlagCount >= ESC_PERIOD){
     2ea:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_ZZ11__vector_21E12ESCFlagCount>
     2ee:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     2f2:	88 3e       	cpi	r24, 0xE8	; 232
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	92 07       	cpc	r25, r18
     2f8:	44 f0       	brlt	.+16     	; 0x30a <__vector_21+0x68>
			flagESC = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <flagESC>
			ESCFlagCount = 0;
     300:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     304:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <_ZZ11__vector_21E12ESCFlagCount>
     308:	05 c0       	rjmp	.+10     	; 0x314 <__vector_21+0x72>
		}
		else {
			ESCFlagCount++;
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     310:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <_ZZ11__vector_21E12ESCFlagCount>
		}
	}

	if(WS2812Initialized == true){
     314:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <WS2812Initialized>
     318:	88 23       	and	r24, r24
     31a:	a9 f0       	breq	.+42     	; 0x346 <__vector_21+0xa4>
		if(WS2812FlagCount >= WS2812_PERIOD){
     31c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZZ11__vector_21E15WS2812FlagCount>
     320:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     324:	88 3b       	cpi	r24, 0xB8	; 184
     326:	2b e0       	ldi	r18, 0x0B	; 11
     328:	92 07       	cpc	r25, r18
     32a:	44 f0       	brlt	.+16     	; 0x33c <__vector_21+0x9a>
			flagWS2812 = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flagWS2812>
			WS2812FlagCount = 0;
     332:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     336:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <_ZZ11__vector_21E15WS2812FlagCount>
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_21+0xa4>
		}
		else {
			WS2812FlagCount++;
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     342:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <_ZZ11__vector_21E15WS2812FlagCount>
		}
	}
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	2f 91       	pop	r18
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <_Z13LCD_WriteCharc>:
	PORTA &= ~(1 << DB4);
	PORTA &= ~(1 << DB3);
	PORTA |= (1 << DB2);
	PORTA |= (1 << DB1);
	PORTA &= ~(1 << DB0);
	PORTG |= (1 << E);
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	e8 e0       	ldi	r30, 0x08	; 8
     35c:	f2 e0       	ldi	r31, 0x02	; 2
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	a1 e0       	ldi	r26, 0x01	; 1
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	c8 2f       	mov	r28, r24
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	9d 01       	movw	r18, r26
     36c:	04 2e       	mov	r0, r20
     36e:	02 c0       	rjmp	.+4      	; 0x374 <_Z13LCD_WriteCharc+0x1e>
     370:	22 0f       	add	r18, r18
     372:	33 1f       	adc	r19, r19
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <_Z13LCD_WriteCharc+0x1a>
     378:	2c 23       	and	r18, r28
     37a:	3d 23       	and	r19, r29
     37c:	04 2e       	mov	r0, r20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <_Z13LCD_WriteCharc+0x2e>
     380:	35 95       	asr	r19
     382:	27 95       	ror	r18
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <_Z13LCD_WriteCharc+0x2a>
     388:	21 30       	cpi	r18, 0x01	; 1
     38a:	31 05       	cpc	r19, r1
     38c:	59 f4       	brne	.+22     	; 0x3a4 <_Z13LCD_WriteCharc+0x4e>
     38e:	22 b1       	in	r18, 0x02	; 2
     390:	cd 01       	movw	r24, r26
     392:	00 80       	ld	r0, Z
     394:	02 c0       	rjmp	.+4      	; 0x39a <_Z13LCD_WriteCharc+0x44>
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	0a 94       	dec	r0
     39c:	e2 f7       	brpl	.-8      	; 0x396 <_Z13LCD_WriteCharc+0x40>
     39e:	82 2b       	or	r24, r18
     3a0:	82 b9       	out	0x02, r24	; 2
     3a2:	0c c0       	rjmp	.+24     	; 0x3bc <_Z13LCD_WriteCharc+0x66>
     3a4:	22 b1       	in	r18, 0x02	; 2
     3a6:	bd 01       	movw	r22, r26
     3a8:	00 80       	ld	r0, Z
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z13LCD_WriteCharc+0x5a>
     3ac:	66 0f       	add	r22, r22
     3ae:	77 1f       	adc	r23, r23
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z13LCD_WriteCharc+0x56>
     3b4:	96 2f       	mov	r25, r22
     3b6:	90 95       	com	r25
     3b8:	92 23       	and	r25, r18
     3ba:	92 b9       	out	0x02, r25	; 2
     3bc:	4f 5f       	subi	r20, 0xFF	; 255
     3be:	5f 4f       	sbci	r21, 0xFF	; 255
     3c0:	32 96       	adiw	r30, 0x02	; 2
     3c2:	48 30       	cpi	r20, 0x08	; 8
     3c4:	51 05       	cpc	r21, r1
     3c6:	89 f6       	brne	.-94     	; 0x36a <_Z13LCD_WriteCharc+0x14>
     3c8:	a2 9a       	sbi	0x14, 2	; 20
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <_Z12clearDisplayv>:
     3d0:	a0 98       	cbi	0x14, 0	; 20
     3d2:	a1 98       	cbi	0x14, 1	; 20
     3d4:	17 98       	cbi	0x02, 7	; 2
     3d6:	16 98       	cbi	0x02, 6	; 2
     3d8:	15 98       	cbi	0x02, 5	; 2
     3da:	14 98       	cbi	0x02, 4	; 2
     3dc:	13 98       	cbi	0x02, 3	; 2
     3de:	12 98       	cbi	0x02, 2	; 2
     3e0:	11 98       	cbi	0x02, 1	; 2
     3e2:	10 9a       	sbi	0x02, 0	; 2
     3e4:	a2 9a       	sbi	0x14, 2	; 20
     3e6:	08 95       	ret

000003e8 <_Z9SetAdressi>:
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
     3ee:	a0 98       	cbi	0x14, 0	; 20
     3f0:	a1 98       	cbi	0x14, 1	; 20
     3f2:	17 9a       	sbi	0x02, 7	; 2
     3f4:	e8 e0       	ldi	r30, 0x08	; 8
     3f6:	f2 e0       	ldi	r31, 0x02	; 2
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	a1 e0       	ldi	r26, 0x01	; 1
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	9d 01       	movw	r18, r26
     402:	04 2e       	mov	r0, r20
     404:	02 c0       	rjmp	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	0a 94       	dec	r0
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     40e:	2c 23       	and	r18, r28
     410:	3d 23       	and	r19, r29
     412:	04 2e       	mov	r0, r20
     414:	02 c0       	rjmp	.+4      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
     416:	35 95       	asr	r19
     418:	27 95       	ror	r18
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     41e:	21 30       	cpi	r18, 0x01	; 1
     420:	31 05       	cpc	r19, r1
     422:	59 f4       	brne	.+22     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     424:	22 b1       	in	r18, 0x02	; 2
     426:	cd 01       	movw	r24, r26
     428:	00 80       	ld	r0, Z
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	0a 94       	dec	r0
     432:	e2 f7       	brpl	.-8      	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     434:	82 2b       	or	r24, r18
     436:	82 b9       	out	0x02, r24	; 2
     438:	0c c0       	rjmp	.+24     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     43a:	22 b1       	in	r18, 0x02	; 2
     43c:	bd 01       	movw	r22, r26
     43e:	00 80       	ld	r0, Z
     440:	02 c0       	rjmp	.+4      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     442:	66 0f       	add	r22, r22
     444:	77 1f       	adc	r23, r23
     446:	0a 94       	dec	r0
     448:	e2 f7       	brpl	.-8      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     44a:	96 2f       	mov	r25, r22
     44c:	90 95       	com	r25
     44e:	92 23       	and	r25, r18
     450:	92 b9       	out	0x02, r25	; 2
     452:	4f 5f       	subi	r20, 0xFF	; 255
     454:	5f 4f       	sbci	r21, 0xFF	; 255
     456:	32 96       	adiw	r30, 0x02	; 2
     458:	47 30       	cpi	r20, 0x07	; 7
     45a:	51 05       	cpc	r21, r1
     45c:	89 f6       	brne	.-94     	; 0x400 <__FUSE_REGION_LENGTH__>
     45e:	a2 9a       	sbi	0x14, 2	; 20
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <_Z9inputModev>:
     466:	a0 9a       	sbi	0x14, 0	; 20
     468:	a1 98       	cbi	0x14, 1	; 20
     46a:	08 95       	ret

0000046c <_Z6turnOnv>:
     46c:	a0 98       	cbi	0x14, 0	; 20
     46e:	a1 98       	cbi	0x14, 1	; 20
     470:	17 98       	cbi	0x02, 7	; 2
     472:	16 98       	cbi	0x02, 6	; 2
     474:	15 98       	cbi	0x02, 5	; 2
     476:	14 98       	cbi	0x02, 4	; 2
     478:	13 9a       	sbi	0x02, 3	; 2
     47a:	12 9a       	sbi	0x02, 2	; 2
     47c:	11 98       	cbi	0x02, 1	; 2
     47e:	10 98       	cbi	0x02, 0	; 2
     480:	a2 9a       	sbi	0x14, 2	; 20
     482:	08 95       	ret

00000484 <_Z11functionSetv>:
     484:	a0 98       	cbi	0x14, 0	; 20
     486:	a1 98       	cbi	0x14, 1	; 20
     488:	17 98       	cbi	0x02, 7	; 2
     48a:	16 98       	cbi	0x02, 6	; 2
     48c:	15 9a       	sbi	0x02, 5	; 2
     48e:	14 9a       	sbi	0x02, 4	; 2
     490:	13 9a       	sbi	0x02, 3	; 2
     492:	12 98       	cbi	0x02, 2	; 2
     494:	11 98       	cbi	0x02, 1	; 2
     496:	10 98       	cbi	0x02, 0	; 2
     498:	a2 9a       	sbi	0x14, 2	; 20
     49a:	08 95       	ret

0000049c <_Z7initLCDv>:
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	e1 e8       	ldi	r30, 0x81	; 129
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	80 83       	st	Z, r24
     4ae:	81 b1       	in	r24, 0x01	; 1
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	81 b9       	out	0x01, r24	; 1
     4b4:	83 b3       	in	r24, 0x13	; 19
     4b6:	87 60       	ori	r24, 0x07	; 7
     4b8:	83 bb       	out	0x13, r24	; 19
     4ba:	8a df       	rcall	.-236    	; 0x3d0 <_Z12clearDisplayv>
     4bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     4c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     4c4:	a4 e8       	ldi	r26, 0x84	; 132
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e5 e8       	ldi	r30, 0x85	; 133
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	8c 91       	ld	r24, X
     4ce:	20 81       	ld	r18, Z
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	92 2b       	or	r25, r18
     4d4:	84 36       	cpi	r24, 0x64	; 100
     4d6:	91 05       	cpc	r25, r1
     4d8:	cc f3       	brlt	.-14     	; 0x4cc <_Z7initLCDv+0x30>
     4da:	a4 e8       	ldi	r26, 0x84	; 132
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	1c 92       	st	X, r1
     4e0:	e5 e8       	ldi	r30, 0x85	; 133
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	10 82       	st	Z, r1
     4e6:	a2 98       	cbi	0x14, 2	; 20
     4e8:	1c 92       	st	X, r1
     4ea:	10 82       	st	Z, r1
     4ec:	8c 91       	ld	r24, X
     4ee:	20 81       	ld	r18, Z
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	92 2b       	or	r25, r18
     4f4:	88 3b       	cpi	r24, 0xB8	; 184
     4f6:	9b 40       	sbci	r25, 0x0B	; 11
     4f8:	cc f3       	brlt	.-14     	; 0x4ec <_Z7initLCDv+0x50>
     4fa:	04 e8       	ldi	r16, 0x84	; 132
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	f8 01       	movw	r30, r16
     500:	10 82       	st	Z, r1
     502:	c5 e8       	ldi	r28, 0x85	; 133
     504:	d0 e0       	ldi	r29, 0x00	; 0
     506:	18 82       	st	Y, r1
     508:	b1 df       	rcall	.-158    	; 0x46c <_Z6turnOnv>
     50a:	f8 01       	movw	r30, r16
     50c:	10 82       	st	Z, r1
     50e:	18 82       	st	Y, r1
     510:	a4 e8       	ldi	r26, 0x84	; 132
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e5 e8       	ldi	r30, 0x85	; 133
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	8c 91       	ld	r24, X
     51a:	20 81       	ld	r18, Z
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	92 2b       	or	r25, r18
     520:	84 36       	cpi	r24, 0x64	; 100
     522:	91 05       	cpc	r25, r1
     524:	cc f3       	brlt	.-14     	; 0x518 <_Z7initLCDv+0x7c>
     526:	04 e8       	ldi	r16, 0x84	; 132
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	f8 01       	movw	r30, r16
     52c:	10 82       	st	Z, r1
     52e:	c5 e8       	ldi	r28, 0x85	; 133
     530:	d0 e0       	ldi	r29, 0x00	; 0
     532:	18 82       	st	Y, r1
     534:	a2 98       	cbi	0x14, 2	; 20
     536:	a6 df       	rcall	.-180    	; 0x484 <_Z11functionSetv>
     538:	f8 01       	movw	r30, r16
     53a:	10 82       	st	Z, r1
     53c:	18 82       	st	Y, r1
     53e:	a4 e8       	ldi	r26, 0x84	; 132
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	e5 e8       	ldi	r30, 0x85	; 133
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	8c 91       	ld	r24, X
     548:	20 81       	ld	r18, Z
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	92 2b       	or	r25, r18
     54e:	84 36       	cpi	r24, 0x64	; 100
     550:	91 05       	cpc	r25, r1
     552:	cc f3       	brlt	.-14     	; 0x546 <_Z7initLCDv+0xaa>
     554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     558:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     55c:	a2 98       	cbi	0x14, 2	; 20
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lcdInitialized>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <_Z13changeLCDTextPcS_>:
}

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1, char* line2)
{
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	e2 e5       	ldi	r30, 0x52	; 82
     578:	f2 e0       	ldi	r31, 0x02	; 2
     57a:	06 2f       	mov	r16, r22
     57c:	17 2f       	mov	r17, r23
     57e:	ce e3       	ldi	r28, 0x3E	; 62
     580:	d2 e0       	ldi	r29, 0x02	; 2
     582:	42 e6       	ldi	r20, 0x62	; 98
     584:	52 e0       	ldi	r21, 0x02	; 2
	int i = 0;
	for(; i < 16; i++)
	{
		g_line1[i] = line1[i];
     586:	dc 01       	movw	r26, r24
     588:	2d 91       	ld	r18, X+
     58a:	cd 01       	movw	r24, r26
     58c:	21 93       	st	Z+, r18
		g_line2[i] = line2[i];
     58e:	d8 01       	movw	r26, r16
     590:	2d 91       	ld	r18, X+
     592:	8d 01       	movw	r16, r26
     594:	29 93       	st	Y+, r18

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1, char* line2)
{
	int i = 0;
	for(; i < 16; i++)
     596:	e4 17       	cp	r30, r20
     598:	f5 07       	cpc	r31, r21
     59a:	a9 f7       	brne	.-22     	; 0x586 <_Z13changeLCDTextPcS_+0x18>
	{
		g_line1[i] = line1[i];
		g_line2[i] = line2[i];
	}
	i++;
	g_line1[i] = '\0';
     59c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <g_line1+0x11>
	g_line2[i] = '\0';
     5a0:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_line2+0x11>
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <_Z12handleFSMLCDv>:




//Finite state machine for the interrupt service routine
void handleFSMLCD(void){
     5ae:	cf 93       	push	r28
	static uint8_t counterShortLCD = 0;
	static uint16_t counterLongLCD = 0;
	static uint8_t charPosition = 0;
	static char currentChar;

	switch(LCDState){
     5b0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	71 f1       	breq	.+92     	; 0x614 <_Z12handleFSMLCDv+0x66>
     5b8:	28 f4       	brcc	.+10     	; 0x5c4 <_Z12handleFSMLCDv+0x16>
     5ba:	88 23       	and	r24, r24
     5bc:	61 f0       	breq	.+24     	; 0x5d6 <_Z12handleFSMLCDv+0x28>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	d9 f0       	breq	.+54     	; 0x5f8 <_Z12handleFSMLCDv+0x4a>
     5c2:	9a c0       	rjmp	.+308    	; 0x6f8 <_Z12handleFSMLCDv+0x14a>
     5c4:	84 30       	cpi	r24, 0x04	; 4
     5c6:	09 f4       	brne	.+2      	; 0x5ca <_Z12handleFSMLCDv+0x1c>
     5c8:	5d c0       	rjmp	.+186    	; 0x684 <_Z12handleFSMLCDv+0xd6>
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <_Z12handleFSMLCDv+0x20>
     5cc:	46 c0       	rjmp	.+140    	; 0x65a <_Z12handleFSMLCDv+0xac>
     5ce:	85 30       	cpi	r24, 0x05	; 5
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <_Z12handleFSMLCDv+0x26>
     5d2:	81 c0       	rjmp	.+258    	; 0x6d6 <_Z12handleFSMLCDv+0x128>
     5d4:	91 c0       	rjmp	.+290    	; 0x6f8 <_Z12handleFSMLCDv+0x14a>
		case CLEAR_STATE:
		clearDisplay();
     5d6:	fc de       	rcall	.-520    	; 0x3d0 <_Z12clearDisplayv>
		//Set enable bit for 1 cycle of 50 us
		if(enableOnOff){
     5d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     5dc:	88 23       	and	r24, r24
     5de:	19 f0       	breq	.+6      	; 0x5e6 <_Z12handleFSMLCDv+0x38>
			enableOnOff = 0;
     5e0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     5e4:	95 c0       	rjmp	.+298    	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			enableOnOff = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
			PORTG &= ~(1 << E);
     5ec:	a2 98       	cbi	0x14, 2	; 20
			counterShortLCD = 0;
     5ee:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <_ZZ12handleFSMLCDvE15counterShortLCD>
			LCDState = WAIT_1_5_MS_STATE;
     5f2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
     5f6:	8c c0       	rjmp	.+280    	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		break;

		// 30 * 50us = 1.5ms
		case WAIT_1_5_MS_STATE:
		if (counterShortLCD >= 30){
     5f8:	c0 91 3b 02 	lds	r28, 0x023B	; 0x80023b <_ZZ12handleFSMLCDvE15counterShortLCD>
     5fc:	ce 31       	cpi	r28, 0x1E	; 30
     5fe:	30 f0       	brcs	.+12     	; 0x60c <_Z12handleFSMLCDv+0x5e>
			LCDState = LINE1_STATE;
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
			charPosition = 0;
     606:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
			inputMode();
     60a:	2d df       	rcall	.-422    	; 0x466 <_Z9inputModev>
		}
		counterShortLCD++;
     60c:	cf 5f       	subi	r28, 0xFF	; 255
     60e:	c0 93 3b 02 	sts	0x023B, r28	; 0x80023b <_ZZ12handleFSMLCDvE15counterShortLCD>
		break;
     612:	7e c0       	rjmp	.+252    	; 0x710 <_Z12handleFSMLCDv+0x162>
		case LINE1_STATE:
		currentChar = g_line1[charPosition];
     614:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     618:	e9 2f       	mov	r30, r25
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ee 5a       	subi	r30, 0xAE	; 174
     61e:	fd 4f       	sbci	r31, 0xFD	; 253
     620:	80 81       	ld	r24, Z
     622:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <_ZZ12handleFSMLCDvE11currentChar>
		if((charPosition < MAX_NUMBER_CHAR_LCD_DISPLAY) && (currentChar != '\0'))
     626:	90 31       	cpi	r25, 0x10	; 16
     628:	a0 f4       	brcc	.+40     	; 0x652 <_Z12handleFSMLCDv+0xa4>
     62a:	88 23       	and	r24, r24
     62c:	91 f0       	breq	.+36     	; 0x652 <_Z12handleFSMLCDv+0xa4>
		{
			if(enableOnOff){
     62e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     632:	99 23       	and	r25, r25
     634:	21 f0       	breq	.+8      	; 0x63e <_Z12handleFSMLCDv+0x90>
				LCD_WriteChar(currentChar);
     636:	8f de       	rcall	.-738    	; 0x356 <_Z13LCD_WriteCharc>
				enableOnOff = 0;
     638:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     63c:	69 c0       	rjmp	.+210    	; 0x710 <_Z12handleFSMLCDv+0x162>
			}
			else
			{
				PORTG &= ~(1 << E);
     63e:	a2 98       	cbi	0x14, 2	; 20
				enableOnOff = 1;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
				charPosition++;
     646:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     650:	5f c0       	rjmp	.+190    	; 0x710 <_Z12handleFSMLCDv+0x162>
			}
		}
		else
		{
			LCDState = CHANGE_ADDRESS_STATE;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
     658:	5b c0       	rjmp	.+182    	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		break;

		case CHANGE_ADDRESS_STATE:
		if(enableOnOff){
     65a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     65e:	88 23       	and	r24, r24
     660:	31 f0       	breq	.+12     	; 0x66e <_Z12handleFSMLCDv+0xc0>
			SetAdress(LINE2);
     662:	80 e4       	ldi	r24, 0x40	; 64
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	c0 de       	rcall	.-640    	; 0x3e8 <_Z9SetAdressi>
			enableOnOff = 0;
     668:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     66c:	51 c0       	rjmp	.+162    	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			PORTG &= ~(1 << E);
     66e:	a2 98       	cbi	0x14, 2	; 20
			enableOnOff = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
			charPosition = 0;
     676:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
			LCDState = LINE2_STATE;
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
			inputMode();
     680:	f2 de       	rcall	.-540    	; 0x466 <_Z9inputModev>
     682:	46 c0       	rjmp	.+140    	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		break;

		case LINE2_STATE:
		currentChar = g_line2[charPosition];
     684:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     688:	e9 2f       	mov	r30, r25
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	e2 5c       	subi	r30, 0xC2	; 194
     68e:	fd 4f       	sbci	r31, 0xFD	; 253
     690:	80 81       	ld	r24, Z
     692:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <_ZZ12handleFSMLCDvE11currentChar>
		if((charPosition < MAX_NUMBER_CHAR_LCD_DISPLAY) && (currentChar != '\0'))
     696:	90 31       	cpi	r25, 0x10	; 16
     698:	a0 f4       	brcc	.+40     	; 0x6c2 <_Z12handleFSMLCDv+0x114>
     69a:	88 23       	and	r24, r24
     69c:	91 f0       	breq	.+36     	; 0x6c2 <_Z12handleFSMLCDv+0x114>
		{
			if(enableOnOff){
     69e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     6a2:	99 23       	and	r25, r25
     6a4:	21 f0       	breq	.+8      	; 0x6ae <_Z12handleFSMLCDv+0x100>
				LCD_WriteChar(currentChar);
     6a6:	57 de       	rcall	.-850    	; 0x356 <_Z13LCD_WriteCharc>
				enableOnOff = 0;
     6a8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     6ac:	31 c0       	rjmp	.+98     	; 0x710 <_Z12handleFSMLCDv+0x162>
			}
			else
			{
				PORTG &= ~(1 << E);
     6ae:	a2 98       	cbi	0x14, 2	; 20
				enableOnOff = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
				charPosition++;
     6b6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
     6c0:	27 c0       	rjmp	.+78     	; 0x710 <_Z12handleFSMLCDv+0x162>
			}
		}
		else
		{
			charPosition = 0;
     6c2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZZ12handleFSMLCDvE12charPosition>
			counterLongLCD = 0;
     6c6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     6ca:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <_ZZ12handleFSMLCDvE14counterLongLCD>
			LCDState = WAIT_STATE;
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
     6d4:	1d c0       	rjmp	.+58     	; 0x710 <_Z12handleFSMLCDv+0x162>
		// After these 100 cycles, the state machine stays in this state for a certain
		// time depending on the LCD_REFRESH_RATE parameter set in lcd.h
		// 1/LCD_REFRESH_RATE = (100 + number of cycles) * time_between_LCD_interrupts
		//
		case WAIT_STATE:
		if(counterLongLCD >= 2000) // approximately 10 Hz refresh rate
     6d6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <_ZZ12handleFSMLCDvE14counterLongLCD>
     6da:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     6de:	80 3d       	cpi	r24, 0xD0	; 208
     6e0:	27 e0       	ldi	r18, 0x07	; 7
     6e2:	92 07       	cpc	r25, r18
     6e4:	18 f0       	brcs	.+6      	; 0x6ec <_Z12handleFSMLCDv+0x13e>
		{
			LCDState = CLEAR_STATE;
     6e6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
     6ea:	12 c0       	rjmp	.+36     	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			counterLongLCD++;
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     6f2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <_ZZ12handleFSMLCDvE14counterLongLCD>
     6f6:	0c c0       	rjmp	.+24     	; 0x710 <_Z12handleFSMLCDv+0x162>
		}
		break;
		default:
		LCDState = WAIT_STATE;
     6f8:	85 e0       	ldi	r24, 0x05	; 5
     6fa:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZZ12handleFSMLCDvE8LCDState>
		counterShortLCD = 0;
     6fe:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <_ZZ12handleFSMLCDvE15counterShortLCD>
		counterLongLCD = 0;
     702:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     706:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <_ZZ12handleFSMLCDvE14counterLongLCD>
		enableOnOff = 1;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
	}
}
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>:
	* @param *port: port of the pin (e.g. PORTA)
	* @param *portreg: ddr of the pin (e.g. DDRA)
	* @retval none
	*/
void  WS2812::ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi,uint8_t *port, uint8_t *portreg)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	d8 01       	movw	r26, r16
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo = ~maskhi & *port;
     71c:	8c 91       	ld	r24, X
     71e:	92 2f       	mov	r25, r18
     720:	90 95       	com	r25
     722:	98 23       	and	r25, r24
  maskhi |= *port;
     724:	28 2b       	or	r18, r24
  sreg_prev=SREG;
     726:	cf b7       	in	r28, 0x3f	; 63
  cli();  
     728:	f8 94       	cli

  while (datlen--) {
     72a:	41 15       	cp	r20, r1
     72c:	51 05       	cpc	r21, r1
     72e:	a9 f0       	breq	.+42     	; 0x75a <skipone55+0xc>
     730:	fb 01       	movw	r30, r22
     732:	64 0f       	add	r22, r20
     734:	75 1f       	adc	r23, r21
    curbyte=*data++;
     736:	81 91       	ld	r24, Z+
    "       dec   %0    \n\t"    //  '1' [+4] '0' [+3]
    "       brne  loop%=\n\t"    //  '1' [+5] '0' [+4]
    :	"=&d" (ctr)
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
     738:	38 e0       	ldi	r19, 0x08	; 8

0000073a <loop55>:
     73a:	2c 93       	st	X, r18
     73c:	00 c0       	rjmp	.+0      	; 0x73e <loop55+0x4>
     73e:	87 ff       	sbrs	r24, 7
     740:	9c 93       	st	X, r25
     742:	88 0f       	add	r24, r24
     744:	00 c0       	rjmp	.+0      	; 0x746 <loop55+0xc>
     746:	00 c0       	rjmp	.+0      	; 0x748 <loop55+0xe>
     748:	00 c0       	rjmp	.+0      	; 0x74a <loop55+0x10>
     74a:	08 f4       	brcc	.+2      	; 0x74e <skipone55>
     74c:	9c 93       	st	X, r25

0000074e <skipone55>:
     74e:	00 c0       	rjmp	.+0      	; 0x750 <skipone55+0x2>
     750:	3a 95       	dec	r19
     752:	99 f7       	brne	.-26     	; 0x73a <loop55>
  masklo = ~maskhi & *port;
  maskhi |= *port;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     754:	e6 17       	cp	r30, r22
     756:	f7 07       	cpc	r31, r23
     758:	71 f7       	brne	.-36     	; 0x736 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_+0x22>
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     75a:	cf bf       	out	0x3f, r28	; 63
}
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <main>:




int main()
{	
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	cf 54       	subi	r28, 0x4F	; 79
     76e:	d1 09       	sbc	r29, r1
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
	//char* buffers for printing stuff on the LCD
	char buffer[20];
	char buffer2[20];
	
	//create ESC object
	Esc escFL(FL), escBL(BL),escBR(BR), escFR(FR);
     77a:	62 e0       	ldi	r22, 0x02	; 2
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	ce 01       	movw	r24, r28
     780:	82 5b       	subi	r24, 0xB2	; 178
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	d8 dc       	rcall	.-1616   	; 0x136 <_ZN3EscC1Ei>
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	ce 01       	movw	r24, r28
     78c:	84 5b       	subi	r24, 0xB4	; 180
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	d2 dc       	rcall	.-1628   	; 0x136 <_ZN3EscC1Ei>
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	ce 01       	movw	r24, r28
     798:	86 5b       	subi	r24, 0xB6	; 182
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	cc dc       	rcall	.-1640   	; 0x136 <_ZN3EscC1Ei>
     79e:	63 e0       	ldi	r22, 0x03	; 3
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	88 5b       	subi	r24, 0xB8	; 184
     7a6:	9f 4f       	sbci	r25, 0xFF	; 255
     7a8:	c6 dc       	rcall	.-1652   	; 0x136 <_ZN3EscC1Ei>
	
	//create objects for led strips
	WS2812 LEDFRT(1, FRT); // 100 LED
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	ce 01       	movw	r24, r28
     7b2:	cb 96       	adiw	r24, 0x3b	; 59
     7b4:	b3 d2       	rcall	.+1382   	; 0xd1c <_ZN6WS2812C1Ejh>
	cRGB valueFRT;	
	
	//create IMU object
	IMU imu;	
     7b6:	ce 01       	movw	r24, r28
     7b8:	89 96       	adiw	r24, 0x29	; 41
     7ba:	61 dd       	rcall	.-1342   	; 0x27e <_ZN3IMUC1Ev>
	
	//Initialize modules; comment out to deactivate feature
	initLCD();
     7bc:	6f de       	rcall	.-802    	; 0x49c <_Z7initLCDv>
	initRF();
     7be:	ad d0       	rcall	.+346    	; 0x91a <_Z6initRFv>
	initializeESC();
     7c0:	be dc       	rcall	.-1668   	; 0x13e <_Z13initializeESCv>
	initWS2812();
     7c2:	c2 d2       	rcall	.+1412   	; 0xd48 <_Z10initWS2812v>
	//initializeI2C();
	//imu.initialize();

	//After everything is initialized, start interrupts
	startInterrupt();
     7c4:	5d dd       	rcall	.-1350   	; 0x280 <_Z14startInterruptv>
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     7c6:	6e 01       	movw	r12, r28
     7c8:	85 e1       	ldi	r24, 0x15	; 21
     7ca:	c8 0e       	add	r12, r24
     7cc:	d1 1c       	adc	r13, r1
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	5c 01       	movw	r10, r24
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     7d4:	6c 2c       	mov	r6, r12
     7d6:	7d 2c       	mov	r7, r13
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     7d8:	88 2e       	mov	r8, r24
     7da:	9b 2c       	mov	r9, r11
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     7dc:	0f 2e       	mov	r0, r31
     7de:	f8 e1       	ldi	r31, 0x18	; 24
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f2 e0       	ldi	r31, 0x02	; 2
     7e4:	ff 2e       	mov	r15, r31
     7e6:	f0 2d       	mov	r31, r0
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     7e8:	02 e2       	ldi	r16, 0x22	; 34
     7ea:	12 e0       	ldi	r17, 0x02	; 2
	{
		////minimum useless operation in the while loop, otherwise bugs
		//DDRA = 0xFF;

		//LCD handler
		if(flagLCD){
     7ec:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <flagLCD>
     7f0:	22 23       	and	r18, r18
     7f2:	19 f0       	breq	.+6      	; 0x7fa <main+0x96>
			flagLCD = 0;
     7f4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <flagLCD>
			handleFSMLCD();
     7f8:	da de       	rcall	.-588    	; 0x5ae <_Z12handleFSMLCDv>
		}

		//RF receiver handler
		if(flagRF)
     7fa:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <flagRF>
     7fe:	22 23       	and	r18, r18
     800:	79 f1       	breq	.+94     	; 0x860 <main+0xfc>
		{
			flagRF = 0;
     802:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <flagRF>
			handleFSMRF();
     806:	a9 d0       	rcall	.+338    	; 0x95a <_Z11handleFSMRFv>
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     808:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <ch_2_pw+0x1>
     80c:	8f 93       	push	r24
     80e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <ch_2_pw>
     812:	8f 93       	push	r24
     814:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <ch_1_pw+0x1>
     818:	8f 93       	push	r24
     81a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ch_1_pw>
     81e:	8f 93       	push	r24
     820:	ff 92       	push	r15
     822:	ef 92       	push	r14
     824:	df 92       	push	r13
     826:	cf 92       	push	r12
     828:	af d4       	rcall	.+2398   	; 0x1188 <sprintf>
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     82a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ch_4_pw+0x1>
     82e:	8f 93       	push	r24
     830:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <ch_4_pw>
     834:	8f 93       	push	r24
     836:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <ch_3_pw+0x1>
     83a:	8f 93       	push	r24
     83c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <ch_3_pw>
     840:	8f 93       	push	r24
     842:	1f 93       	push	r17
     844:	0f 93       	push	r16
     846:	bf 92       	push	r11
     848:	af 92       	push	r10
     84a:	9e d4       	rcall	.+2364   	; 0x1188 <sprintf>
			changeLCDText(buffer, buffer2);
     84c:	68 2d       	mov	r22, r8
     84e:	79 2d       	mov	r23, r9
     850:	86 2d       	mov	r24, r6
     852:	97 2d       	mov	r25, r7
     854:	8c de       	rcall	.-744    	; 0x56e <_Z13changeLCDTextPcS_>
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
		}
		
		//ESC handler
		if(flagESC)
     860:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <flagESC>
     864:	22 23       	and	r18, r18
     866:	11 f1       	breq	.+68     	; 0x8ac <main+0x148>
		{
			flagESC = 0;
     868:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <flagESC>
			escFL.set(ch_3_pw);
     86c:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <ch_3_pw>
     870:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <ch_3_pw+0x1>
     874:	ce 01       	movw	r24, r28
     876:	82 5b       	subi	r24, 0xB2	; 178
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	bc dc       	rcall	.-1672   	; 0x1f4 <_ZN3Esc3setEj>
			escBL.set(ch_3_pw);
     87c:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <ch_3_pw>
     880:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <ch_3_pw+0x1>
     884:	ce 01       	movw	r24, r28
     886:	84 5b       	subi	r24, 0xB4	; 180
     888:	9f 4f       	sbci	r25, 0xFF	; 255
     88a:	b4 dc       	rcall	.-1688   	; 0x1f4 <_ZN3Esc3setEj>
			escBR.set(ch_3_pw);
     88c:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <ch_3_pw>
     890:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <ch_3_pw+0x1>
     894:	ce 01       	movw	r24, r28
     896:	86 5b       	subi	r24, 0xB6	; 182
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	ac dc       	rcall	.-1704   	; 0x1f4 <_ZN3Esc3setEj>
			escFR.set(ch_3_pw);
     89c:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <ch_3_pw>
     8a0:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <ch_3_pw+0x1>
     8a4:	ce 01       	movw	r24, r28
     8a6:	88 5b       	subi	r24, 0xB8	; 184
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	a4 dc       	rcall	.-1720   	; 0x1f4 <_ZN3Esc3setEj>
		}
		
		if(flagWS2812)
     8ac:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <flagWS2812>
     8b0:	22 23       	and	r18, r18
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <main+0x152>
     8b4:	9b cf       	rjmp	.-202    	; 0x7ec <main+0x88>
		{
			flagWS2812 = 0;
     8b6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <flagWS2812>
			static int i = 0;
			static bool directionUp = true;
			//Led strips shit
			for(int j = 0; j<1; j++)
			{
				valueFRT.b = i; valueFRT.g = i; valueFRT.r = i; // RGB Value -> red
     8ba:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <_ZZ4mainE1i>
				LEDFRT.set_crgb_at(j, valueFRT); // Set value at LED found at index j
     8be:	24 2f       	mov	r18, r20
     8c0:	34 2f       	mov	r19, r20
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	ce 01       	movw	r24, r28
     8c8:	cb 96       	adiw	r24, 0x3b	; 59
     8ca:	42 d2       	rcall	.+1156   	; 0xd50 <_ZN6WS281211set_crgb_atEj4cRGB>
			}
			LEDFRT.sync(); // Sends the value to the LED
     8cc:	ce 01       	movw	r24, r28
     8ce:	cb 96       	adiw	r24, 0x3b	; 59
     8d0:	01 d3       	rcall	.+1538   	; 0xed4 <_ZN6WS28124syncEv>
			if(i>=255) directionUp = false;
     8d2:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZZ4mainE1i>
     8d6:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <_ZZ4mainE1i+0x1>
     8da:	8f 3f       	cpi	r24, 0xFF	; 255
     8dc:	91 05       	cpc	r25, r1
     8de:	34 f0       	brlt	.+12     	; 0x8ec <main+0x188>
     8e0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZZ4mainE11directionUp>
			if(i<=0) directionUp = true;
     8e4:	18 16       	cp	r1, r24
     8e6:	19 06       	cpc	r1, r25
     8e8:	94 f0       	brlt	.+36     	; 0x90e <main+0x1aa>
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <main+0x18e>
     8ec:	18 16       	cp	r1, r24
     8ee:	19 06       	cpc	r1, r25
     8f0:	24 f0       	brlt	.+8      	; 0x8fa <main+0x196>
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <_ZZ4mainE11directionUp>
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <main+0x19e>
			if (directionUp) i++;
     8fa:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZZ4mainE11directionUp>
     8fe:	22 23       	and	r18, r18
     900:	31 f0       	breq	.+12     	; 0x90e <main+0x1aa>
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <_ZZ4mainE1i+0x1>
     908:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZZ4mainE1i>
     90c:	67 cf       	rjmp	.-306    	; 0x7dc <main+0x78>
			else i--;
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <_ZZ4mainE1i+0x1>
     914:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZZ4mainE1i>
     918:	61 cf       	rjmp	.-318    	; 0x7dc <main+0x78>

0000091a <_Z6initRFv>:
    * @param none
	* @retval None
	*/
void initRF()
{
	PCICR |= (1<<PCIE1); /* enable pin change interrupt 1 */
     91a:	e8 e6       	ldi	r30, 0x68	; 104
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	82 60       	ori	r24, 0x02	; 2
     922:	80 83       	st	Z, r24
	//PCMSK0 |= (1<<PCINT4); /* enable pin B0 to trigger PCINT0 */
	PCMSK1 |= (1<<PCINT11) | (1<<PCINT12) | (1<<PCINT13) | (1<<PCINT14); /* enable pin J3-J6 to trigger PCINT1 */
     924:	ec e6       	ldi	r30, 0x6C	; 108
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 67       	ori	r24, 0x78	; 120
     92c:	80 83       	st	Z, r24
	
	//counter for measuring pulse width of incoming radio signal
	TCCR3B |= (1 << CS31); //set-up counter in normal mode with prescaler = 8
     92e:	e1 e9       	ldi	r30, 0x91	; 145
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	82 60       	ori	r24, 0x02	; 2
     936:	80 83       	st	Z, r24
	//TIMSK3 |= (1 << TOIE3); // enable interrupt on overflow
	
	/*by setting the max count of the counter (OCR0A) and the prescaler (with TCCR0B), the frequency of the interrupts
	generated by the counter can be controlled with precision */
	OCR0A = 0xFF;	/*Sets the maximum value of the counter before going back to 0*/
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS00); /*prescaler 001 = 1, 010 = 8, 011 = 64, 100 = 256, 101 = 1024*/
     93c:	85 b5       	in	r24, 0x25	; 37
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1 << WGM01); /*Sets the mode of the counter to CTC to clear counter once OCR0A is reached*/
     942:	84 b5       	in	r24, 0x24	; 36
     944:	82 60       	ori	r24, 0x02	; 2
     946:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A); /*enable interrupt when counter reaches OCR0A*/
     948:	ee e6       	ldi	r30, 0x6E	; 110
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	80 83       	st	Z, r24
	RFInitialized = true;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <RFInitialized>
     958:	08 95       	ret

0000095a <_Z11handleFSMRFv>:
	static bool ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
	static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
	static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;
	
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
     95a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     95e:	85 ff       	sbrs	r24, 5
     960:	71 c1       	rjmp	.+738    	; 0xc44 <_Z11handleFSMRFv+0x2ea>
     962:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZZ11handleFSMRFvE9last_ch_1>
     966:	81 11       	cpse	r24, r1
     968:	c5 c1       	rjmp	.+906    	; 0xcf4 <_Z11handleFSMRFv+0x39a>
     96a:	71 c1       	rjmp	.+738    	; 0xc4e <_Z11handleFSMRFv+0x2f4>
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     972:	02 c0       	rjmp	.+4      	; 0x978 <_Z11handleFSMRFv+0x1e>
		else ch_1_ovf_rising = false;
     974:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     978:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     97c:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	92 2b       	or	r25, r18
     984:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     988:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <_ZZ11handleFSMRFvE10count_ch_1>
     98c:	43 c0       	rjmp	.+134    	; 0xa14 <_Z11handleFSMRFv+0xba>
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     98e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZZ11handleFSMRFvE9last_ch_1>
     992:	81 11       	cpse	r24, r1
     994:	66 c1       	rjmp	.+716    	; 0xc62 <_Z11handleFSMRFv+0x308>
     996:	3e c0       	rjmp	.+124    	; 0xa14 <_Z11handleFSMRFv+0xba>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
     998:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     99c:	81 11       	cpse	r24, r1
     99e:	16 c0       	rjmp	.+44     	; 0x9cc <_Z11handleFSMRFv+0x72>
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <_Z11handleFSMRFv+0x50>
     9a2:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     9a6:	88 23       	and	r24, r24
     9a8:	89 f0       	breq	.+34     	; 0x9cc <_Z11handleFSMRFv+0x72>
     9aa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9ae:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	92 2b       	or	r25, r18
     9b6:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <_ZZ11handleFSMRFvE10count_ch_1>
     9ba:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     9be:	82 1b       	sub	r24, r18
     9c0:	93 0b       	sbc	r25, r19
     9c2:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ch_1_pw+0x1>
     9c6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ch_1_pw>
     9ca:	10 c0       	rjmp	.+32     	; 0x9ec <_Z11handleFSMRFv+0x92>
		else ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     9cc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9d0:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	92 2b       	or	r25, r18
     9d8:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <_ZZ11handleFSMRFvE10count_ch_1>
     9dc:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ch_1_pw+0x1>
     9e8:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ch_1_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     9ec:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
     9f0:	81 11       	cpse	r24, r1
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <_Z11handleFSMRFv+0xb6>
     9f4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
     9f8:	81 11       	cpse	r24, r1
     9fa:	0a c0       	rjmp	.+20     	; 0xa10 <_Z11handleFSMRFv+0xb6>
     9fc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
     a00:	81 11       	cpse	r24, r1
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <_Z11handleFSMRFv+0xb6>
     a04:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
     a08:	81 11       	cpse	r24, r1
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <_Z11handleFSMRFv+0xb6>
     a0c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_1_counting = false;
     a10:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
	}
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
     a14:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     a18:	84 ff       	sbrs	r24, 4
     a1a:	34 c1       	rjmp	.+616    	; 0xc84 <_Z11handleFSMRFv+0x32a>
     a1c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <_ZZ11handleFSMRFvE9last_ch_2>
     a20:	81 11       	cpse	r24, r1
     a22:	6d c1       	rjmp	.+730    	; 0xcfe <_Z11handleFSMRFv+0x3a4>
     a24:	25 c1       	rjmp	.+586    	; 0xc70 <_Z11handleFSMRFv+0x316>
	{	last_ch_2 = true; ch_2_counting = true;
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <_Z11handleFSMRFv+0xd8>
		else ch_2_ovf_rising = false;
     a2e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     a32:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a36:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	92 2b       	or	r25, r18
     a3e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     a42:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZZ11handleFSMRFvE10count_ch_2>
     a46:	43 c0       	rjmp	.+134    	; 0xace <_Z11handleFSMRFv+0x174>
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     a48:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <_ZZ11handleFSMRFvE9last_ch_2>
     a4c:	81 11       	cpse	r24, r1
     a4e:	1f c1       	rjmp	.+574    	; 0xc8e <_Z11handleFSMRFv+0x334>
     a50:	3e c0       	rjmp	.+124    	; 0xace <_Z11handleFSMRFv+0x174>
	{	last_ch_2 = false;
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising)) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     a52:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     a56:	81 11       	cpse	r24, r1
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <_Z11handleFSMRFv+0x12c>
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <_Z11handleFSMRFv+0x10a>
     a5c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     a60:	88 23       	and	r24, r24
     a62:	89 f0       	breq	.+34     	; 0xa86 <_Z11handleFSMRFv+0x12c>
     a64:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a68:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	92 2b       	or	r25, r18
     a70:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <_ZZ11handleFSMRFvE10count_ch_2>
     a74:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <ch_2_pw+0x1>
     a80:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <ch_2_pw>
     a84:	10 c0       	rjmp	.+32     	; 0xaa6 <_Z11handleFSMRFv+0x14c>
		else ch_2_pw = 65535 - count_ch_2 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     a86:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a8a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	92 2b       	or	r25, r18
     a92:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <_ZZ11handleFSMRFvE10count_ch_2>
     a96:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     a9a:	82 1b       	sub	r24, r18
     a9c:	93 0b       	sbc	r25, r19
     a9e:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <ch_2_pw+0x1>
     aa2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <ch_2_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     aa6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
     aaa:	81 11       	cpse	r24, r1
     aac:	0e c0       	rjmp	.+28     	; 0xaca <_Z11handleFSMRFv+0x170>
     aae:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
     ab2:	81 11       	cpse	r24, r1
     ab4:	0a c0       	rjmp	.+20     	; 0xaca <_Z11handleFSMRFv+0x170>
     ab6:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
     aba:	81 11       	cpse	r24, r1
     abc:	06 c0       	rjmp	.+12     	; 0xaca <_Z11handleFSMRFv+0x170>
     abe:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
     ac2:	81 11       	cpse	r24, r1
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <_Z11handleFSMRFv+0x170>
     ac6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_2_counting = false;
     aca:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
	}
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
     ace:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     ad2:	83 ff       	sbrs	r24, 3
     ad4:	e3 c0       	rjmp	.+454    	; 0xc9c <_Z11handleFSMRFv+0x342>
     ad6:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZZ11handleFSMRFvE9last_ch_3>
     ada:	81 11       	cpse	r24, r1
     adc:	15 c1       	rjmp	.+554    	; 0xd08 <_Z11handleFSMRFv+0x3ae>
     ade:	e3 c0       	rjmp	.+454    	; 0xca6 <_Z11handleFSMRFv+0x34c>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_Z11handleFSMRFv+0x192>
		else ch_3_ovf_rising = false;
     ae8:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     aec:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     af0:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	92 2b       	or	r25, r18
     af8:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <_ZZ11handleFSMRFvE10count_ch_3+0x1>
     afc:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZZ11handleFSMRFvE10count_ch_3>
     b00:	43 c0       	rjmp	.+134    	; 0xb88 <_Z11handleFSMRFv+0x22e>
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     b02:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZZ11handleFSMRFvE9last_ch_3>
     b06:	81 11       	cpse	r24, r1
     b08:	d8 c0       	rjmp	.+432    	; 0xcba <_Z11handleFSMRFv+0x360>
     b0a:	3e c0       	rjmp	.+124    	; 0xb88 <_Z11handleFSMRFv+0x22e>
	{	last_ch_3 = false;
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising)) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     b0c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
     b10:	81 11       	cpse	r24, r1
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <_Z11handleFSMRFv+0x1e6>
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <_Z11handleFSMRFv+0x1c4>
     b16:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
     b1a:	88 23       	and	r24, r24
     b1c:	89 f0       	breq	.+34     	; 0xb40 <_Z11handleFSMRFv+0x1e6>
     b1e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     b22:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	92 2b       	or	r25, r18
     b2a:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <_ZZ11handleFSMRFvE10count_ch_3>
     b2e:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <_ZZ11handleFSMRFvE10count_ch_3+0x1>
     b32:	82 1b       	sub	r24, r18
     b34:	93 0b       	sbc	r25, r19
     b36:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <ch_3_pw+0x1>
     b3a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <ch_3_pw>
     b3e:	10 c0       	rjmp	.+32     	; 0xb60 <_Z11handleFSMRFv+0x206>
		else ch_3_pw = 65535 - count_ch_3 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     b40:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     b44:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	92 2b       	or	r25, r18
     b4c:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <_ZZ11handleFSMRFvE10count_ch_3>
     b50:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <_ZZ11handleFSMRFvE10count_ch_3+0x1>
     b54:	82 1b       	sub	r24, r18
     b56:	93 0b       	sbc	r25, r19
     b58:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <ch_3_pw+0x1>
     b5c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <ch_3_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     b60:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
     b64:	81 11       	cpse	r24, r1
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <_Z11handleFSMRFv+0x22a>
     b68:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
     b6c:	81 11       	cpse	r24, r1
     b6e:	0a c0       	rjmp	.+20     	; 0xb84 <_Z11handleFSMRFv+0x22a>
     b70:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
     b74:	81 11       	cpse	r24, r1
     b76:	06 c0       	rjmp	.+12     	; 0xb84 <_Z11handleFSMRFv+0x22a>
     b78:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
     b7c:	81 11       	cpse	r24, r1
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <_Z11handleFSMRFv+0x22a>
     b80:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_3_counting = false;
     b84:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
	}
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
     b88:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     b8c:	82 ff       	sbrs	r24, 2
     b8e:	a6 c0       	rjmp	.+332    	; 0xcdc <_Z11handleFSMRFv+0x382>
     b90:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZZ11handleFSMRFvE9last_ch_4>
     b94:	81 11       	cpse	r24, r1
     b96:	bd c0       	rjmp	.+378    	; 0xd12 <_Z11handleFSMRFv+0x3b8>
     b98:	97 c0       	rjmp	.+302    	; 0xcc8 <_Z11handleFSMRFv+0x36e>
	{	last_ch_4 = true; ch_4_counting = true;
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <_Z11handleFSMRFv+0x24c>
		else ch_4_ovf_rising = false;
     ba2:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     ba6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     baa:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	92 2b       	or	r25, r18
     bb2:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <_ZZ11handleFSMRFvE10count_ch_4+0x1>
     bb6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <_ZZ11handleFSMRFvE10count_ch_4>
     bba:	08 95       	ret
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     bbc:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZZ11handleFSMRFvE9last_ch_4>
     bc0:	81 11       	cpse	r24, r1
     bc2:	91 c0       	rjmp	.+290    	; 0xce6 <_Z11handleFSMRFv+0x38c>
     bc4:	08 95       	ret
	{	last_ch_4 = false;
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising)) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     bc6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
     bca:	81 11       	cpse	r24, r1
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <_Z11handleFSMRFv+0x2a0>
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <_Z11handleFSMRFv+0x27e>
     bd0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
     bd4:	88 23       	and	r24, r24
     bd6:	89 f0       	breq	.+34     	; 0xbfa <_Z11handleFSMRFv+0x2a0>
     bd8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     bdc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	92 2b       	or	r25, r18
     be4:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <_ZZ11handleFSMRFvE10count_ch_4>
     be8:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <_ZZ11handleFSMRFvE10count_ch_4+0x1>
     bec:	82 1b       	sub	r24, r18
     bee:	93 0b       	sbc	r25, r19
     bf0:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <ch_4_pw+0x1>
     bf4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <ch_4_pw>
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <_Z11handleFSMRFv+0x2c0>
		else ch_4_pw = 65535 - count_ch_4 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     bfa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     bfe:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	92 2b       	or	r25, r18
     c06:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <_ZZ11handleFSMRFvE10count_ch_4>
     c0a:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <_ZZ11handleFSMRFvE10count_ch_4+0x1>
     c0e:	82 1b       	sub	r24, r18
     c10:	93 0b       	sbc	r25, r19
     c12:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <ch_4_pw+0x1>
     c16:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <ch_4_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     c1a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
     c1e:	81 11       	cpse	r24, r1
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <_Z11handleFSMRFv+0x2e4>
     c22:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
     c26:	81 11       	cpse	r24, r1
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <_Z11handleFSMRFv+0x2e4>
     c2a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
     c2e:	81 11       	cpse	r24, r1
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <_Z11handleFSMRFv+0x2e4>
     c32:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
     c36:	81 11       	cpse	r24, r1
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_Z11handleFSMRFv+0x2e4>
     c3a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_4_counting = false;
     c3e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
     c42:	08 95       	ret
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     c44:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     c48:	85 ff       	sbrs	r24, 5
     c4a:	a1 ce       	rjmp	.-702    	; 0x98e <_Z11handleFSMRFv+0x34>
     c4c:	e3 ce       	rjmp	.-570    	; 0xa14 <_Z11handleFSMRFv+0xba>
	static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
	static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;
	
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true; ch_1_counting = true;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <_ZZ11handleFSMRFvE9last_ch_1>
     c54:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_ZZ11handleFSMRFvE13ch_1_counting>
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
     c58:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     c5c:	81 11       	cpse	r24, r1
     c5e:	86 ce       	rjmp	.-756    	; 0x96c <_Z11handleFSMRFv+0x12>
     c60:	89 ce       	rjmp	.-750    	; 0x974 <_Z11handleFSMRFv+0x1a>
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
     c62:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZZ11handleFSMRFvE9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
     c66:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     c6a:	81 11       	cpse	r24, r1
     c6c:	9a ce       	rjmp	.-716    	; 0x9a2 <_Z11handleFSMRFv+0x48>
     c6e:	94 ce       	rjmp	.-728    	; 0x998 <_Z11handleFSMRFv+0x3e>
		ch_1_counting = false;
	}
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
	{	last_ch_2 = true; ch_2_counting = true;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <_ZZ11handleFSMRFvE9last_ch_2>
     c76:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZZ11handleFSMRFvE13ch_2_counting>
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
     c7a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     c7e:	81 11       	cpse	r24, r1
     c80:	d2 ce       	rjmp	.-604    	; 0xa26 <_Z11handleFSMRFv+0xcc>
     c82:	d5 ce       	rjmp	.-598    	; 0xa2e <_Z11handleFSMRFv+0xd4>
		else ch_2_ovf_rising = false;
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     c84:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     c88:	84 ff       	sbrs	r24, 4
     c8a:	de ce       	rjmp	.-580    	; 0xa48 <_Z11handleFSMRFv+0xee>
     c8c:	20 cf       	rjmp	.-448    	; 0xace <_Z11handleFSMRFv+0x174>
	{	last_ch_2 = false;
     c8e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <_ZZ11handleFSMRFvE9last_ch_2>
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising)) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     c92:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     c96:	81 11       	cpse	r24, r1
     c98:	e1 ce       	rjmp	.-574    	; 0xa5c <_Z11handleFSMRFv+0x102>
     c9a:	db ce       	rjmp	.-586    	; 0xa52 <_Z11handleFSMRFv+0xf8>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     c9c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     ca0:	83 ff       	sbrs	r24, 3
     ca2:	2f cf       	rjmp	.-418    	; 0xb02 <_Z11handleFSMRFv+0x1a8>
     ca4:	71 cf       	rjmp	.-286    	; 0xb88 <_Z11handleFSMRFv+0x22e>
		ch_2_counting = false;
	}
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
	{	last_ch_3 = true; ch_3_counting = true;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ11handleFSMRFvE9last_ch_3>
     cac:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZZ11handleFSMRFvE13ch_3_counting>
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
     cb0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     cb4:	81 11       	cpse	r24, r1
     cb6:	14 cf       	rjmp	.-472    	; 0xae0 <_Z11handleFSMRFv+0x186>
     cb8:	17 cf       	rjmp	.-466    	; 0xae8 <_Z11handleFSMRFv+0x18e>
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
	{	last_ch_3 = false;
     cba:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <_ZZ11handleFSMRFvE9last_ch_3>
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising)) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     cbe:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     cc2:	81 11       	cpse	r24, r1
     cc4:	28 cf       	rjmp	.-432    	; 0xb16 <_Z11handleFSMRFv+0x1bc>
     cc6:	22 cf       	rjmp	.-444    	; 0xb0c <_Z11handleFSMRFv+0x1b2>
		ch_3_counting = false;
	}
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
	{	last_ch_4 = true; ch_4_counting = true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <_ZZ11handleFSMRFvE9last_ch_4>
     cce:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZZ11handleFSMRFvE13ch_4_counting>
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
     cd2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     cd6:	81 11       	cpse	r24, r1
     cd8:	60 cf       	rjmp	.-320    	; 0xb9a <_Z11handleFSMRFv+0x240>
     cda:	63 cf       	rjmp	.-314    	; 0xba2 <_Z11handleFSMRFv+0x248>
		else ch_4_ovf_rising = false;
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     cdc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     ce0:	82 ff       	sbrs	r24, 2
     ce2:	6c cf       	rjmp	.-296    	; 0xbbc <_Z11handleFSMRFv+0x262>
     ce4:	08 95       	ret
	{	last_ch_4 = false;
     ce6:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZZ11handleFSMRFvE9last_ch_4>
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising)) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     cea:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZZ11handleFSMRFvE11timer_3_ovf>
     cee:	81 11       	cpse	r24, r1
     cf0:	6f cf       	rjmp	.-290    	; 0xbd0 <_Z11handleFSMRFv+0x276>
     cf2:	69 cf       	rjmp	.-302    	; 0xbc6 <_Z11handleFSMRFv+0x26c>
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     cf4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     cf8:	85 ff       	sbrs	r24, 5
     cfa:	b3 cf       	rjmp	.-154    	; 0xc62 <_Z11handleFSMRFv+0x308>
     cfc:	8b ce       	rjmp	.-746    	; 0xa14 <_Z11handleFSMRFv+0xba>
	{	last_ch_2 = true; ch_2_counting = true;
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_2_ovf_rising = false;
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     cfe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d02:	84 ff       	sbrs	r24, 4
     d04:	c4 cf       	rjmp	.-120    	; 0xc8e <_Z11handleFSMRFv+0x334>
     d06:	e3 ce       	rjmp	.-570    	; 0xace <_Z11handleFSMRFv+0x174>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     d08:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d0c:	83 ff       	sbrs	r24, 3
     d0e:	d5 cf       	rjmp	.-86     	; 0xcba <_Z11handleFSMRFv+0x360>
     d10:	3b cf       	rjmp	.-394    	; 0xb88 <_Z11handleFSMRFv+0x22e>
	{	last_ch_4 = true; ch_4_counting = true;
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_4_ovf_rising = false;
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     d12:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d16:	82 ff       	sbrs	r24, 2
     d18:	e6 cf       	rjmp	.-52     	; 0xce6 <_Z11handleFSMRFv+0x38c>
     d1a:	08 95       	ret

00000d1c <_ZN6WS2812C1Ejh>:
	* @brief Class destructor, restores the memory associated with the pixel array
	* @param none
	* @retval none
	*/
WS2812::~WS2812() {
	free(pixels);
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
     d22:	79 83       	std	Y+1, r23	; 0x01
     d24:	68 83       	st	Y, r22
     d26:	4c 87       	std	Y+12, r20	; 0x0c
     d28:	cb 01       	movw	r24, r22
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	86 0f       	add	r24, r22
     d30:	97 1f       	adc	r25, r23
     d32:	fd d0       	rcall	.+506    	; 0xf2e <malloc>
     d34:	9b 83       	std	Y+3, r25	; 0x03
     d36:	8a 83       	std	Y+2, r24	; 0x02
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8c 83       	std	Y+4, r24	; 0x04
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <_Z10initWS2812v>:
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <WS2812Initialized>
     d4e:	08 95       	ret

00000d50 <_ZN6WS281211set_crgb_atEj4cRGB>:
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
     d56:	88 81       	ld	r24, Y
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	68 17       	cp	r22, r24
     d5c:	79 07       	cpc	r23, r25
     d5e:	f8 f4       	brcc	.+62     	; 0xd9e <_ZN6WS281211set_crgb_atEj4cRGB+0x4e>
     d60:	fb 01       	movw	r30, r22
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	6e 0f       	add	r22, r30
     d68:	7f 1f       	adc	r23, r31
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	aa 81       	ldd	r26, Y+2	; 0x02
     d6e:	bb 81       	ldd	r27, Y+3	; 0x03
     d70:	a6 0f       	add	r26, r22
     d72:	b7 1f       	adc	r27, r23
     d74:	a8 0f       	add	r26, r24
     d76:	b1 1d       	adc	r27, r1
     d78:	3c 93       	st	X, r19
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	aa 81       	ldd	r26, Y+2	; 0x02
     d7e:	bb 81       	ldd	r27, Y+3	; 0x03
     d80:	a6 0f       	add	r26, r22
     d82:	b7 1f       	adc	r27, r23
     d84:	a8 0f       	add	r26, r24
     d86:	b1 1d       	adc	r27, r1
     d88:	2c 93       	st	X, r18
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	ea 81       	ldd	r30, Y+2	; 0x02
     d8e:	fb 81       	ldd	r31, Y+3	; 0x03
     d90:	e6 0f       	add	r30, r22
     d92:	f7 1f       	adc	r31, r23
     d94:	e8 0f       	add	r30, r24
     d96:	f1 1d       	adc	r31, r1
     d98:	40 83       	st	Z, r20
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <_ZN6WS281211set_crgb_atEj4cRGB+0x50>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_ZN6WS281211setAsOutputEv>:
	* This is the place to change the IO pins if we change the pins that control the LED strips
	* @param none
	* @retval none
	*/
void WS2812::setAsOutput()
{
     da6:	dc 01       	movw	r26, r24
	//seem to have problems with port F, except for F3..., can't do shit
	switch (stripPosition)
     da8:	1c 96       	adiw	r26, 0x0c	; 12
     daa:	4c 91       	ld	r20, X
     dac:	1c 97       	sbiw	r26, 0x0c	; 12
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	48 30       	cpi	r20, 0x08	; 8
     db2:	51 05       	cpc	r21, r1
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <_ZN6WS281211setAsOutputEv+0x12>
     db6:	8d c0       	rjmp	.+282    	; 0xed2 <_ZN6WS281211setAsOutputEv+0x12c>
     db8:	fa 01       	movw	r30, r20
     dba:	88 27       	eor	r24, r24
     dbc:	ee 58       	subi	r30, 0x8E	; 142
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	8f 4f       	sbci	r24, 0xFF	; 255
     dc2:	ad c0       	rjmp	.+346    	; 0xf1e <__tablejump2__>
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     dc4:	80 e4       	ldi	r24, 0x40	; 64
     dc6:	1b 96       	adiw	r26, 0x0b	; 11
     dc8:	8c 93       	st	X, r24
     dca:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     dcc:	85 e2       	ldi	r24, 0x25	; 37
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	18 96       	adiw	r26, 0x08	; 8
     dd2:	9c 93       	st	X, r25
     dd4:	8e 93       	st	-X, r24
     dd6:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     dd8:	84 e2       	ldi	r24, 0x24	; 36
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	1a 96       	adiw	r26, 0x0a	; 10
     dde:	9c 93       	st	X, r25
     de0:	8e 93       	st	-X, r24
     de2:	19 97       	sbiw	r26, 0x09	; 9
     de4:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	1b 96       	adiw	r26, 0x0b	; 11
     dea:	8c 93       	st	X, r24
     dec:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     dee:	85 e2       	ldi	r24, 0x25	; 37
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	18 96       	adiw	r26, 0x08	; 8
     df4:	9c 93       	st	X, r25
     df6:	8e 93       	st	-X, r24
     df8:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     dfa:	84 e2       	ldi	r24, 0x24	; 36
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	1a 96       	adiw	r26, 0x0a	; 10
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	19 97       	sbiw	r26, 0x09	; 9
     e06:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e08:	80 e8       	ldi	r24, 0x80	; 128
     e0a:	1b 96       	adiw	r26, 0x0b	; 11
     e0c:	8c 93       	st	X, r24
     e0e:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	18 96       	adiw	r26, 0x08	; 8
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	1a 96       	adiw	r26, 0x0a	; 10
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	19 97       	sbiw	r26, 0x09	; 9
     e28:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	1b 96       	adiw	r26, 0x0b	; 11
     e2e:	8c 93       	st	X, r24
     e30:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e32:	85 e0       	ldi	r24, 0x05	; 5
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	18 96       	adiw	r26, 0x08	; 8
     e38:	9c 93       	st	X, r25
     e3a:	8e 93       	st	-X, r24
     e3c:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	1a 96       	adiw	r26, 0x0a	; 10
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
     e48:	19 97       	sbiw	r26, 0x09	; 9
     e4a:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e4c:	80 e8       	ldi	r24, 0x80	; 128
     e4e:	1b 96       	adiw	r26, 0x0b	; 11
     e50:	8c 93       	st	X, r24
     e52:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e54:	81 e3       	ldi	r24, 0x31	; 49
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	18 96       	adiw	r26, 0x08	; 8
     e5a:	9c 93       	st	X, r25
     e5c:	8e 93       	st	-X, r24
     e5e:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	1a 96       	adiw	r26, 0x0a	; 10
     e66:	9c 93       	st	X, r25
     e68:	8e 93       	st	-X, r24
     e6a:	19 97       	sbiw	r26, 0x09	; 9
     e6c:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	1b 96       	adiw	r26, 0x0b	; 11
     e72:	8c 93       	st	X, r24
     e74:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e76:	81 e3       	ldi	r24, 0x31	; 49
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	18 96       	adiw	r26, 0x08	; 8
     e7c:	9c 93       	st	X, r25
     e7e:	8e 93       	st	-X, r24
     e80:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	1a 96       	adiw	r26, 0x0a	; 10
     e88:	9c 93       	st	X, r25
     e8a:	8e 93       	st	-X, r24
     e8c:	19 97       	sbiw	r26, 0x09	; 9
     e8e:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	1b 96       	adiw	r26, 0x0b	; 11
     e94:	8c 93       	st	X, r24
     e96:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e98:	88 e0       	ldi	r24, 0x08	; 8
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	18 96       	adiw	r26, 0x08	; 8
     e9e:	9c 93       	st	X, r25
     ea0:	8e 93       	st	-X, r24
     ea2:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     ea4:	87 e0       	ldi	r24, 0x07	; 7
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	1a 96       	adiw	r26, 0x0a	; 10
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24
     eae:	19 97       	sbiw	r26, 0x09	; 9
     eb0:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	1b 96       	adiw	r26, 0x0b	; 11
     eb6:	8c 93       	st	X, r24
     eb8:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     eba:	88 e0       	ldi	r24, 0x08	; 8
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	18 96       	adiw	r26, 0x08	; 8
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
     ec4:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	1a 96       	adiw	r26, 0x0a	; 10
     ecc:	9c 93       	st	X, r25
     ece:	8e 93       	st	-X, r24
     ed0:	19 97       	sbiw	r26, 0x09	; 9
     ed2:	08 95       	ret

00000ed4 <_ZN6WS28124syncEv>:
	* @brief This method sets the right output port associated with the WS2812 object and sends the pixel data to the 
	* LED strip
	* @param none
	* @retval none
	*/
void WS2812::sync() {
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
	setAsOutput();
     ee2:	61 df       	rcall	.-318    	; 0xda6 <_ZN6WS281211setAsOutputEv>
	*ws2812_port_reg |= pinMask; // Enable DDR 
     ee4:	e9 85       	ldd	r30, Y+9	; 0x09
     ee6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ee8:	90 81       	ld	r25, Z
     eea:	8b 85       	ldd	r24, Y+11	; 0x0b
     eec:	89 2b       	or	r24, r25
     eee:	80 83       	st	Z, r24
	ws2812_sendarray_mask(pixels,3*count_led,pinMask,(uint8_t*) ws2812_port,(uint8_t*) ws2812_port_reg );	
     ef0:	e9 84       	ldd	r14, Y+9	; 0x09
     ef2:	fa 84       	ldd	r15, Y+10	; 0x0a
     ef4:	0f 81       	ldd	r16, Y+7	; 0x07
     ef6:	18 85       	ldd	r17, Y+8	; 0x08
     ef8:	48 81       	ld	r20, Y
     efa:	59 81       	ldd	r21, Y+1	; 0x01
     efc:	ca 01       	movw	r24, r20
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	48 0f       	add	r20, r24
     f04:	59 1f       	adc	r21, r25
     f06:	6a 81       	ldd	r22, Y+2	; 0x02
     f08:	7b 81       	ldd	r23, Y+3	; 0x03
     f0a:	2b 85       	ldd	r18, Y+11	; 0x0b
     f0c:	ce 01       	movw	r24, r28
     f0e:	02 dc       	rcall	.-2044   	; 0x714 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <__tablejump2__>:
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	88 1f       	adc	r24, r24
     f24:	8b bf       	out	0x3b, r24	; 59
     f26:	07 90       	elpm	r0, Z+
     f28:	f6 91       	elpm	r31, Z
     f2a:	e0 2d       	mov	r30, r0
     f2c:	19 94       	eijmp

00000f2e <malloc>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	91 05       	cpc	r25, r1
     f36:	10 f4       	brcc	.+4      	; 0xf3c <malloc+0xe>
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <__flp>
     f40:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <__flp+0x1>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	c0 e0       	ldi	r28, 0x00	; 0
     f4a:	d0 e0       	ldi	r29, 0x00	; 0
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	11 f1       	breq	.+68     	; 0xf94 <malloc+0x66>
     f50:	40 81       	ld	r20, Z
     f52:	51 81       	ldd	r21, Z+1	; 0x01
     f54:	48 17       	cp	r20, r24
     f56:	59 07       	cpc	r21, r25
     f58:	c0 f0       	brcs	.+48     	; 0xf8a <malloc+0x5c>
     f5a:	48 17       	cp	r20, r24
     f5c:	59 07       	cpc	r21, r25
     f5e:	61 f4       	brne	.+24     	; 0xf78 <malloc+0x4a>
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	19 f0       	breq	.+6      	; 0xf6e <malloc+0x40>
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	2b c0       	rjmp	.+86     	; 0xfc4 <malloc+0x96>
     f6e:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <__flp+0x1>
     f72:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <__flp>
     f76:	26 c0       	rjmp	.+76     	; 0xfc4 <malloc+0x96>
     f78:	21 15       	cp	r18, r1
     f7a:	31 05       	cpc	r19, r1
     f7c:	19 f0       	breq	.+6      	; 0xf84 <malloc+0x56>
     f7e:	42 17       	cp	r20, r18
     f80:	53 07       	cpc	r21, r19
     f82:	18 f4       	brcc	.+6      	; 0xf8a <malloc+0x5c>
     f84:	9a 01       	movw	r18, r20
     f86:	be 01       	movw	r22, r28
     f88:	df 01       	movw	r26, r30
     f8a:	ef 01       	movw	r28, r30
     f8c:	02 80       	ldd	r0, Z+2	; 0x02
     f8e:	f3 81       	ldd	r31, Z+3	; 0x03
     f90:	e0 2d       	mov	r30, r0
     f92:	dc cf       	rjmp	.-72     	; 0xf4c <malloc+0x1e>
     f94:	21 15       	cp	r18, r1
     f96:	31 05       	cpc	r19, r1
     f98:	09 f1       	breq	.+66     	; 0xfdc <malloc+0xae>
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	24 30       	cpi	r18, 0x04	; 4
     fa0:	31 05       	cpc	r19, r1
     fa2:	90 f4       	brcc	.+36     	; 0xfc8 <malloc+0x9a>
     fa4:	12 96       	adiw	r26, 0x02	; 2
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	13 97       	sbiw	r26, 0x03	; 3
     fac:	61 15       	cp	r22, r1
     fae:	71 05       	cpc	r23, r1
     fb0:	21 f0       	breq	.+8      	; 0xfba <malloc+0x8c>
     fb2:	fb 01       	movw	r30, r22
     fb4:	93 83       	std	Z+3, r25	; 0x03
     fb6:	82 83       	std	Z+2, r24	; 0x02
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <malloc+0x94>
     fba:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <__flp+0x1>
     fbe:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <__flp>
     fc2:	fd 01       	movw	r30, r26
     fc4:	32 96       	adiw	r30, 0x02	; 2
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <malloc+0x122>
     fc8:	fd 01       	movw	r30, r26
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	81 93       	st	Z+, r24
     fd0:	91 93       	st	Z+, r25
     fd2:	22 50       	subi	r18, 0x02	; 2
     fd4:	31 09       	sbc	r19, r1
     fd6:	2d 93       	st	X+, r18
     fd8:	3c 93       	st	X, r19
     fda:	3a c0       	rjmp	.+116    	; 0x1050 <malloc+0x122>
     fdc:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
     fe0:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
     fe4:	23 2b       	or	r18, r19
     fe6:	41 f4       	brne	.+16     	; 0xff8 <malloc+0xca>
     fe8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     fec:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     ff0:	30 93 88 02 	sts	0x0288, r19	; 0x800288 <__brkval+0x1>
     ff4:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <__brkval>
     ff8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     ffc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1000:	21 15       	cp	r18, r1
    1002:	31 05       	cpc	r19, r1
    1004:	41 f4       	brne	.+16     	; 0x1016 <malloc+0xe8>
    1006:	2d b7       	in	r18, 0x3d	; 61
    1008:	3e b7       	in	r19, 0x3e	; 62
    100a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    100e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1012:	24 1b       	sub	r18, r20
    1014:	35 0b       	sbc	r19, r21
    1016:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <__brkval>
    101a:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <__brkval+0x1>
    101e:	e2 17       	cp	r30, r18
    1020:	f3 07       	cpc	r31, r19
    1022:	a0 f4       	brcc	.+40     	; 0x104c <malloc+0x11e>
    1024:	2e 1b       	sub	r18, r30
    1026:	3f 0b       	sbc	r19, r31
    1028:	28 17       	cp	r18, r24
    102a:	39 07       	cpc	r19, r25
    102c:	78 f0       	brcs	.+30     	; 0x104c <malloc+0x11e>
    102e:	ac 01       	movw	r20, r24
    1030:	4e 5f       	subi	r20, 0xFE	; 254
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	24 17       	cp	r18, r20
    1036:	35 07       	cpc	r19, r21
    1038:	48 f0       	brcs	.+18     	; 0x104c <malloc+0x11e>
    103a:	4e 0f       	add	r20, r30
    103c:	5f 1f       	adc	r21, r31
    103e:	50 93 88 02 	sts	0x0288, r21	; 0x800288 <__brkval+0x1>
    1042:	40 93 87 02 	sts	0x0287, r20	; 0x800287 <__brkval>
    1046:	81 93       	st	Z+, r24
    1048:	91 93       	st	Z+, r25
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <malloc+0x122>
    104c:	e0 e0       	ldi	r30, 0x00	; 0
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	cf 01       	movw	r24, r30
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <free>:
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <free+0xe>
    1064:	8c c0       	rjmp	.+280    	; 0x117e <free+0x126>
    1066:	fc 01       	movw	r30, r24
    1068:	32 97       	sbiw	r30, 0x02	; 2
    106a:	13 82       	std	Z+3, r1	; 0x03
    106c:	12 82       	std	Z+2, r1	; 0x02
    106e:	00 91 89 02 	lds	r16, 0x0289	; 0x800289 <__flp>
    1072:	10 91 8a 02 	lds	r17, 0x028A	; 0x80028a <__flp+0x1>
    1076:	01 15       	cp	r16, r1
    1078:	11 05       	cpc	r17, r1
    107a:	81 f4       	brne	.+32     	; 0x109c <free+0x44>
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
    1088:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	79 f5       	brne	.+94     	; 0x10f0 <free+0x98>
    1092:	f0 93 88 02 	sts	0x0288, r31	; 0x800288 <__brkval+0x1>
    1096:	e0 93 87 02 	sts	0x0287, r30	; 0x800287 <__brkval>
    109a:	71 c0       	rjmp	.+226    	; 0x117e <free+0x126>
    109c:	d8 01       	movw	r26, r16
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	ae 17       	cp	r26, r30
    10a4:	bf 07       	cpc	r27, r31
    10a6:	50 f4       	brcc	.+20     	; 0x10bc <free+0x64>
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	2d 91       	ld	r18, X+
    10ac:	3c 91       	ld	r19, X
    10ae:	13 97       	sbiw	r26, 0x03	; 3
    10b0:	ad 01       	movw	r20, r26
    10b2:	21 15       	cp	r18, r1
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f1       	breq	.+66     	; 0x10fa <free+0xa2>
    10b8:	d9 01       	movw	r26, r18
    10ba:	f3 cf       	rjmp	.-26     	; 0x10a2 <free+0x4a>
    10bc:	9d 01       	movw	r18, r26
    10be:	da 01       	movw	r26, r20
    10c0:	33 83       	std	Z+3, r19	; 0x03
    10c2:	22 83       	std	Z+2, r18	; 0x02
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	86 0f       	add	r24, r22
    10ca:	97 1f       	adc	r25, r23
    10cc:	82 17       	cp	r24, r18
    10ce:	93 07       	cpc	r25, r19
    10d0:	69 f4       	brne	.+26     	; 0x10ec <free+0x94>
    10d2:	ec 01       	movw	r28, r24
    10d4:	28 81       	ld	r18, Y
    10d6:	39 81       	ldd	r19, Y+1	; 0x01
    10d8:	26 0f       	add	r18, r22
    10da:	37 1f       	adc	r19, r23
    10dc:	2e 5f       	subi	r18, 0xFE	; 254
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	93 83       	std	Z+3, r25	; 0x03
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	45 2b       	or	r20, r21
    10ee:	29 f4       	brne	.+10     	; 0x10fa <free+0xa2>
    10f0:	f0 93 8a 02 	sts	0x028A, r31	; 0x80028a <__flp+0x1>
    10f4:	e0 93 89 02 	sts	0x0289, r30	; 0x800289 <__flp>
    10f8:	42 c0       	rjmp	.+132    	; 0x117e <free+0x126>
    10fa:	13 96       	adiw	r26, 0x03	; 3
    10fc:	fc 93       	st	X, r31
    10fe:	ee 93       	st	-X, r30
    1100:	12 97       	sbiw	r26, 0x02	; 2
    1102:	ed 01       	movw	r28, r26
    1104:	49 91       	ld	r20, Y+
    1106:	59 91       	ld	r21, Y+
    1108:	9e 01       	movw	r18, r28
    110a:	24 0f       	add	r18, r20
    110c:	35 1f       	adc	r19, r21
    110e:	e2 17       	cp	r30, r18
    1110:	f3 07       	cpc	r31, r19
    1112:	71 f4       	brne	.+28     	; 0x1130 <free+0xd8>
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	84 0f       	add	r24, r20
    111a:	95 1f       	adc	r25, r21
    111c:	02 96       	adiw	r24, 0x02	; 2
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	13 96       	adiw	r26, 0x03	; 3
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	12 97       	sbiw	r26, 0x02	; 2
    1130:	e0 e0       	ldi	r30, 0x00	; 0
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	d8 01       	movw	r26, r16
    1136:	12 96       	adiw	r26, 0x02	; 2
    1138:	8d 91       	ld	r24, X+
    113a:	9c 91       	ld	r25, X
    113c:	13 97       	sbiw	r26, 0x03	; 3
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	19 f0       	breq	.+6      	; 0x1148 <free+0xf0>
    1142:	f8 01       	movw	r30, r16
    1144:	8c 01       	movw	r16, r24
    1146:	f6 cf       	rjmp	.-20     	; 0x1134 <free+0xdc>
    1148:	8d 91       	ld	r24, X+
    114a:	9c 91       	ld	r25, X
    114c:	98 01       	movw	r18, r16
    114e:	2e 5f       	subi	r18, 0xFE	; 254
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	82 0f       	add	r24, r18
    1154:	93 1f       	adc	r25, r19
    1156:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
    115a:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	69 f4       	brne	.+26     	; 0x117e <free+0x126>
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	29 f4       	brne	.+10     	; 0x1172 <free+0x11a>
    1168:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__flp+0x1>
    116c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp>
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <free+0x11e>
    1172:	13 82       	std	Z+3, r1	; 0x03
    1174:	12 82       	std	Z+2, r1	; 0x02
    1176:	10 93 88 02 	sts	0x0288, r17	; 0x800288 <__brkval+0x1>
    117a:	00 93 87 02 	sts	0x0287, r16	; 0x800287 <__brkval>
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <sprintf>:
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2e 97       	sbiw	r28, 0x0e	; 14
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	0e 89       	ldd	r16, Y+22	; 0x16
    11a2:	1f 89       	ldd	r17, Y+23	; 0x17
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	1a 83       	std	Y+2, r17	; 0x02
    11aa:	09 83       	std	Y+1, r16	; 0x01
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f e7       	ldi	r25, 0x7F	; 127
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	ae 01       	movw	r20, r28
    11b6:	46 5e       	subi	r20, 0xE6	; 230
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	68 8d       	ldd	r22, Y+24	; 0x18
    11bc:	79 8d       	ldd	r23, Y+25	; 0x19
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	11 d0       	rcall	.+34     	; 0x11e6 <vfprintf>
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	38 85       	ldd	r19, Y+8	; 0x08
    11c8:	f8 01       	movw	r30, r16
    11ca:	e2 0f       	add	r30, r18
    11cc:	f3 1f       	adc	r31, r19
    11ce:	10 82       	st	Z, r1
    11d0:	2e 96       	adiw	r28, 0x0e	; 14
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <vfprintf>:
    11e6:	2f 92       	push	r2
    11e8:	3f 92       	push	r3
    11ea:	4f 92       	push	r4
    11ec:	5f 92       	push	r5
    11ee:	6f 92       	push	r6
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	2c 97       	sbiw	r28, 0x0c	; 12
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	7c 01       	movw	r14, r24
    121c:	6b 01       	movw	r12, r22
    121e:	8a 01       	movw	r16, r20
    1220:	fc 01       	movw	r30, r24
    1222:	17 82       	std	Z+7, r1	; 0x07
    1224:	16 82       	std	Z+6, r1	; 0x06
    1226:	83 81       	ldd	r24, Z+3	; 0x03
    1228:	81 ff       	sbrs	r24, 1
    122a:	b0 c1       	rjmp	.+864    	; 0x158c <vfprintf+0x3a6>
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	4c 01       	movw	r8, r24
    1232:	f7 01       	movw	r30, r14
    1234:	93 81       	ldd	r25, Z+3	; 0x03
    1236:	f6 01       	movw	r30, r12
    1238:	93 fd       	sbrc	r25, 3
    123a:	85 91       	lpm	r24, Z+
    123c:	93 ff       	sbrs	r25, 3
    123e:	81 91       	ld	r24, Z+
    1240:	6f 01       	movw	r12, r30
    1242:	88 23       	and	r24, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <vfprintf+0x62>
    1246:	9e c1       	rjmp	.+828    	; 0x1584 <vfprintf+0x39e>
    1248:	85 32       	cpi	r24, 0x25	; 37
    124a:	39 f4       	brne	.+14     	; 0x125a <vfprintf+0x74>
    124c:	93 fd       	sbrc	r25, 3
    124e:	85 91       	lpm	r24, Z+
    1250:	93 ff       	sbrs	r25, 3
    1252:	81 91       	ld	r24, Z+
    1254:	6f 01       	movw	r12, r30
    1256:	85 32       	cpi	r24, 0x25	; 37
    1258:	21 f4       	brne	.+8      	; 0x1262 <vfprintf+0x7c>
    125a:	b7 01       	movw	r22, r14
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	c7 d1       	rcall	.+910    	; 0x15ee <fputc>
    1260:	e8 cf       	rjmp	.-48     	; 0x1232 <vfprintf+0x4c>
    1262:	51 2c       	mov	r5, r1
    1264:	31 2c       	mov	r3, r1
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	20 32       	cpi	r18, 0x20	; 32
    126a:	a0 f4       	brcc	.+40     	; 0x1294 <vfprintf+0xae>
    126c:	8b 32       	cpi	r24, 0x2B	; 43
    126e:	69 f0       	breq	.+26     	; 0x128a <vfprintf+0xa4>
    1270:	30 f4       	brcc	.+12     	; 0x127e <vfprintf+0x98>
    1272:	80 32       	cpi	r24, 0x20	; 32
    1274:	59 f0       	breq	.+22     	; 0x128c <vfprintf+0xa6>
    1276:	83 32       	cpi	r24, 0x23	; 35
    1278:	69 f4       	brne	.+26     	; 0x1294 <vfprintf+0xae>
    127a:	20 61       	ori	r18, 0x10	; 16
    127c:	2c c0       	rjmp	.+88     	; 0x12d6 <vfprintf+0xf0>
    127e:	8d 32       	cpi	r24, 0x2D	; 45
    1280:	39 f0       	breq	.+14     	; 0x1290 <vfprintf+0xaa>
    1282:	80 33       	cpi	r24, 0x30	; 48
    1284:	39 f4       	brne	.+14     	; 0x1294 <vfprintf+0xae>
    1286:	21 60       	ori	r18, 0x01	; 1
    1288:	26 c0       	rjmp	.+76     	; 0x12d6 <vfprintf+0xf0>
    128a:	22 60       	ori	r18, 0x02	; 2
    128c:	24 60       	ori	r18, 0x04	; 4
    128e:	23 c0       	rjmp	.+70     	; 0x12d6 <vfprintf+0xf0>
    1290:	28 60       	ori	r18, 0x08	; 8
    1292:	21 c0       	rjmp	.+66     	; 0x12d6 <vfprintf+0xf0>
    1294:	27 fd       	sbrc	r18, 7
    1296:	27 c0       	rjmp	.+78     	; 0x12e6 <vfprintf+0x100>
    1298:	30 ed       	ldi	r19, 0xD0	; 208
    129a:	38 0f       	add	r19, r24
    129c:	3a 30       	cpi	r19, 0x0A	; 10
    129e:	78 f4       	brcc	.+30     	; 0x12be <vfprintf+0xd8>
    12a0:	26 ff       	sbrs	r18, 6
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <vfprintf+0xca>
    12a4:	fa e0       	ldi	r31, 0x0A	; 10
    12a6:	5f 9e       	mul	r5, r31
    12a8:	30 0d       	add	r19, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	53 2e       	mov	r5, r19
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <vfprintf+0xf0>
    12b0:	8a e0       	ldi	r24, 0x0A	; 10
    12b2:	38 9e       	mul	r3, r24
    12b4:	30 0d       	add	r19, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	33 2e       	mov	r3, r19
    12ba:	20 62       	ori	r18, 0x20	; 32
    12bc:	0c c0       	rjmp	.+24     	; 0x12d6 <vfprintf+0xf0>
    12be:	8e 32       	cpi	r24, 0x2E	; 46
    12c0:	21 f4       	brne	.+8      	; 0x12ca <vfprintf+0xe4>
    12c2:	26 fd       	sbrc	r18, 6
    12c4:	5f c1       	rjmp	.+702    	; 0x1584 <vfprintf+0x39e>
    12c6:	20 64       	ori	r18, 0x40	; 64
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <vfprintf+0xf0>
    12ca:	8c 36       	cpi	r24, 0x6C	; 108
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <vfprintf+0xec>
    12ce:	20 68       	ori	r18, 0x80	; 128
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0xf0>
    12d2:	88 36       	cpi	r24, 0x68	; 104
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <vfprintf+0x100>
    12d6:	f6 01       	movw	r30, r12
    12d8:	93 fd       	sbrc	r25, 3
    12da:	85 91       	lpm	r24, Z+
    12dc:	93 ff       	sbrs	r25, 3
    12de:	81 91       	ld	r24, Z+
    12e0:	6f 01       	movw	r12, r30
    12e2:	81 11       	cpse	r24, r1
    12e4:	c1 cf       	rjmp	.-126    	; 0x1268 <vfprintf+0x82>
    12e6:	98 2f       	mov	r25, r24
    12e8:	9f 7d       	andi	r25, 0xDF	; 223
    12ea:	95 54       	subi	r25, 0x45	; 69
    12ec:	93 30       	cpi	r25, 0x03	; 3
    12ee:	28 f4       	brcc	.+10     	; 0x12fa <vfprintf+0x114>
    12f0:	0c 5f       	subi	r16, 0xFC	; 252
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	ff e3       	ldi	r31, 0x3F	; 63
    12f6:	f9 83       	std	Y+1, r31	; 0x01
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <vfprintf+0x12e>
    12fa:	83 36       	cpi	r24, 0x63	; 99
    12fc:	31 f0       	breq	.+12     	; 0x130a <vfprintf+0x124>
    12fe:	83 37       	cpi	r24, 0x73	; 115
    1300:	71 f0       	breq	.+28     	; 0x131e <vfprintf+0x138>
    1302:	83 35       	cpi	r24, 0x53	; 83
    1304:	09 f0       	breq	.+2      	; 0x1308 <vfprintf+0x122>
    1306:	57 c0       	rjmp	.+174    	; 0x13b6 <vfprintf+0x1d0>
    1308:	21 c0       	rjmp	.+66     	; 0x134c <vfprintf+0x166>
    130a:	f8 01       	movw	r30, r16
    130c:	80 81       	ld	r24, Z
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	0e 5f       	subi	r16, 0xFE	; 254
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	44 24       	eor	r4, r4
    1316:	43 94       	inc	r4
    1318:	51 2c       	mov	r5, r1
    131a:	54 01       	movw	r10, r8
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <vfprintf+0x160>
    131e:	38 01       	movw	r6, r16
    1320:	f2 e0       	ldi	r31, 0x02	; 2
    1322:	6f 0e       	add	r6, r31
    1324:	71 1c       	adc	r7, r1
    1326:	f8 01       	movw	r30, r16
    1328:	a0 80       	ld	r10, Z
    132a:	b1 80       	ldd	r11, Z+1	; 0x01
    132c:	26 ff       	sbrs	r18, 6
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vfprintf+0x150>
    1330:	65 2d       	mov	r22, r5
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x154>
    1336:	6f ef       	ldi	r22, 0xFF	; 255
    1338:	7f ef       	ldi	r23, 0xFF	; 255
    133a:	c5 01       	movw	r24, r10
    133c:	2c 87       	std	Y+12, r18	; 0x0c
    133e:	4c d1       	rcall	.+664    	; 0x15d8 <strnlen>
    1340:	2c 01       	movw	r4, r24
    1342:	83 01       	movw	r16, r6
    1344:	2c 85       	ldd	r18, Y+12	; 0x0c
    1346:	2f 77       	andi	r18, 0x7F	; 127
    1348:	22 2e       	mov	r2, r18
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <vfprintf+0x192>
    134c:	38 01       	movw	r6, r16
    134e:	f2 e0       	ldi	r31, 0x02	; 2
    1350:	6f 0e       	add	r6, r31
    1352:	71 1c       	adc	r7, r1
    1354:	f8 01       	movw	r30, r16
    1356:	a0 80       	ld	r10, Z
    1358:	b1 80       	ldd	r11, Z+1	; 0x01
    135a:	26 ff       	sbrs	r18, 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x17e>
    135e:	65 2d       	mov	r22, r5
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x182>
    1364:	6f ef       	ldi	r22, 0xFF	; 255
    1366:	7f ef       	ldi	r23, 0xFF	; 255
    1368:	c5 01       	movw	r24, r10
    136a:	2c 87       	std	Y+12, r18	; 0x0c
    136c:	2a d1       	rcall	.+596    	; 0x15c2 <strnlen_P>
    136e:	2c 01       	movw	r4, r24
    1370:	2c 85       	ldd	r18, Y+12	; 0x0c
    1372:	20 68       	ori	r18, 0x80	; 128
    1374:	22 2e       	mov	r2, r18
    1376:	83 01       	movw	r16, r6
    1378:	23 fc       	sbrc	r2, 3
    137a:	19 c0       	rjmp	.+50     	; 0x13ae <vfprintf+0x1c8>
    137c:	83 2d       	mov	r24, r3
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	48 16       	cp	r4, r24
    1382:	59 06       	cpc	r5, r25
    1384:	a0 f4       	brcc	.+40     	; 0x13ae <vfprintf+0x1c8>
    1386:	b7 01       	movw	r22, r14
    1388:	80 e2       	ldi	r24, 0x20	; 32
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	30 d1       	rcall	.+608    	; 0x15ee <fputc>
    138e:	3a 94       	dec	r3
    1390:	f5 cf       	rjmp	.-22     	; 0x137c <vfprintf+0x196>
    1392:	f5 01       	movw	r30, r10
    1394:	27 fc       	sbrc	r2, 7
    1396:	85 91       	lpm	r24, Z+
    1398:	27 fe       	sbrs	r2, 7
    139a:	81 91       	ld	r24, Z+
    139c:	5f 01       	movw	r10, r30
    139e:	b7 01       	movw	r22, r14
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	25 d1       	rcall	.+586    	; 0x15ee <fputc>
    13a4:	31 10       	cpse	r3, r1
    13a6:	3a 94       	dec	r3
    13a8:	f1 e0       	ldi	r31, 0x01	; 1
    13aa:	4f 1a       	sub	r4, r31
    13ac:	51 08       	sbc	r5, r1
    13ae:	41 14       	cp	r4, r1
    13b0:	51 04       	cpc	r5, r1
    13b2:	79 f7       	brne	.-34     	; 0x1392 <vfprintf+0x1ac>
    13b4:	de c0       	rjmp	.+444    	; 0x1572 <vfprintf+0x38c>
    13b6:	84 36       	cpi	r24, 0x64	; 100
    13b8:	11 f0       	breq	.+4      	; 0x13be <vfprintf+0x1d8>
    13ba:	89 36       	cpi	r24, 0x69	; 105
    13bc:	31 f5       	brne	.+76     	; 0x140a <vfprintf+0x224>
    13be:	f8 01       	movw	r30, r16
    13c0:	27 ff       	sbrs	r18, 7
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <vfprintf+0x1ec>
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	0c 5f       	subi	r16, 0xFC	; 252
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <vfprintf+0x1fc>
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	07 2e       	mov	r0, r23
    13d8:	00 0c       	add	r0, r0
    13da:	88 0b       	sbc	r24, r24
    13dc:	99 0b       	sbc	r25, r25
    13de:	0e 5f       	subi	r16, 0xFE	; 254
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	2f 76       	andi	r18, 0x6F	; 111
    13e4:	72 2e       	mov	r7, r18
    13e6:	97 ff       	sbrs	r25, 7
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <vfprintf+0x216>
    13ea:	90 95       	com	r25
    13ec:	80 95       	com	r24
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	20 68       	ori	r18, 0x80	; 128
    13fa:	72 2e       	mov	r7, r18
    13fc:	2a e0       	ldi	r18, 0x0A	; 10
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	a4 01       	movw	r20, r8
    1402:	2d d1       	rcall	.+602    	; 0x165e <__ultoa_invert>
    1404:	a8 2e       	mov	r10, r24
    1406:	a8 18       	sub	r10, r8
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <vfprintf+0x2aa>
    140a:	85 37       	cpi	r24, 0x75	; 117
    140c:	29 f4       	brne	.+10     	; 0x1418 <vfprintf+0x232>
    140e:	2f 7e       	andi	r18, 0xEF	; 239
    1410:	b2 2e       	mov	r11, r18
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	25 c0       	rjmp	.+74     	; 0x1462 <vfprintf+0x27c>
    1418:	f2 2f       	mov	r31, r18
    141a:	f9 7f       	andi	r31, 0xF9	; 249
    141c:	bf 2e       	mov	r11, r31
    141e:	8f 36       	cpi	r24, 0x6F	; 111
    1420:	c1 f0       	breq	.+48     	; 0x1452 <vfprintf+0x26c>
    1422:	18 f4       	brcc	.+6      	; 0x142a <vfprintf+0x244>
    1424:	88 35       	cpi	r24, 0x58	; 88
    1426:	79 f0       	breq	.+30     	; 0x1446 <vfprintf+0x260>
    1428:	ad c0       	rjmp	.+346    	; 0x1584 <vfprintf+0x39e>
    142a:	80 37       	cpi	r24, 0x70	; 112
    142c:	19 f0       	breq	.+6      	; 0x1434 <vfprintf+0x24e>
    142e:	88 37       	cpi	r24, 0x78	; 120
    1430:	21 f0       	breq	.+8      	; 0x143a <vfprintf+0x254>
    1432:	a8 c0       	rjmp	.+336    	; 0x1584 <vfprintf+0x39e>
    1434:	2f 2f       	mov	r18, r31
    1436:	20 61       	ori	r18, 0x10	; 16
    1438:	b2 2e       	mov	r11, r18
    143a:	b4 fe       	sbrs	r11, 4
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <vfprintf+0x272>
    143e:	8b 2d       	mov	r24, r11
    1440:	84 60       	ori	r24, 0x04	; 4
    1442:	b8 2e       	mov	r11, r24
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <vfprintf+0x272>
    1446:	24 ff       	sbrs	r18, 4
    1448:	0a c0       	rjmp	.+20     	; 0x145e <vfprintf+0x278>
    144a:	9f 2f       	mov	r25, r31
    144c:	96 60       	ori	r25, 0x06	; 6
    144e:	b9 2e       	mov	r11, r25
    1450:	06 c0       	rjmp	.+12     	; 0x145e <vfprintf+0x278>
    1452:	28 e0       	ldi	r18, 0x08	; 8
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <vfprintf+0x27c>
    1458:	20 e1       	ldi	r18, 0x10	; 16
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <vfprintf+0x27c>
    145e:	20 e1       	ldi	r18, 0x10	; 16
    1460:	32 e0       	ldi	r19, 0x02	; 2
    1462:	f8 01       	movw	r30, r16
    1464:	b7 fe       	sbrs	r11, 7
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <vfprintf+0x290>
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	0c 5f       	subi	r16, 0xFC	; 252
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <vfprintf+0x29c>
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	a4 01       	movw	r20, r8
    1484:	ec d0       	rcall	.+472    	; 0x165e <__ultoa_invert>
    1486:	a8 2e       	mov	r10, r24
    1488:	a8 18       	sub	r10, r8
    148a:	fb 2d       	mov	r31, r11
    148c:	ff 77       	andi	r31, 0x7F	; 127
    148e:	7f 2e       	mov	r7, r31
    1490:	76 fe       	sbrs	r7, 6
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <vfprintf+0x2c4>
    1494:	37 2d       	mov	r19, r7
    1496:	3e 7f       	andi	r19, 0xFE	; 254
    1498:	a5 14       	cp	r10, r5
    149a:	50 f4       	brcc	.+20     	; 0x14b0 <vfprintf+0x2ca>
    149c:	74 fe       	sbrs	r7, 4
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <vfprintf+0x2ce>
    14a0:	72 fc       	sbrc	r7, 2
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <vfprintf+0x2ce>
    14a4:	37 2d       	mov	r19, r7
    14a6:	3e 7e       	andi	r19, 0xEE	; 238
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <vfprintf+0x2ce>
    14aa:	ba 2c       	mov	r11, r10
    14ac:	37 2d       	mov	r19, r7
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x2d0>
    14b0:	ba 2c       	mov	r11, r10
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <vfprintf+0x2d0>
    14b4:	b5 2c       	mov	r11, r5
    14b6:	34 ff       	sbrs	r19, 4
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x2ee>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ea 0d       	add	r30, r10
    14be:	f1 1d       	adc	r31, r1
    14c0:	80 81       	ld	r24, Z
    14c2:	80 33       	cpi	r24, 0x30	; 48
    14c4:	11 f4       	brne	.+4      	; 0x14ca <vfprintf+0x2e4>
    14c6:	39 7e       	andi	r19, 0xE9	; 233
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <vfprintf+0x2f6>
    14ca:	32 ff       	sbrs	r19, 2
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <vfprintf+0x2f4>
    14ce:	b3 94       	inc	r11
    14d0:	b3 94       	inc	r11
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <vfprintf+0x2f6>
    14d4:	83 2f       	mov	r24, r19
    14d6:	86 78       	andi	r24, 0x86	; 134
    14d8:	09 f0       	breq	.+2      	; 0x14dc <vfprintf+0x2f6>
    14da:	b3 94       	inc	r11
    14dc:	33 fd       	sbrc	r19, 3
    14de:	12 c0       	rjmp	.+36     	; 0x1504 <vfprintf+0x31e>
    14e0:	30 ff       	sbrs	r19, 0
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <vfprintf+0x30a>
    14e4:	5a 2c       	mov	r5, r10
    14e6:	b3 14       	cp	r11, r3
    14e8:	18 f4       	brcc	.+6      	; 0x14f0 <vfprintf+0x30a>
    14ea:	53 0c       	add	r5, r3
    14ec:	5b 18       	sub	r5, r11
    14ee:	b3 2c       	mov	r11, r3
    14f0:	b3 14       	cp	r11, r3
    14f2:	60 f4       	brcc	.+24     	; 0x150c <vfprintf+0x326>
    14f4:	b7 01       	movw	r22, r14
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	3c 87       	std	Y+12, r19	; 0x0c
    14fc:	78 d0       	rcall	.+240    	; 0x15ee <fputc>
    14fe:	b3 94       	inc	r11
    1500:	3c 85       	ldd	r19, Y+12	; 0x0c
    1502:	f6 cf       	rjmp	.-20     	; 0x14f0 <vfprintf+0x30a>
    1504:	b3 14       	cp	r11, r3
    1506:	10 f4       	brcc	.+4      	; 0x150c <vfprintf+0x326>
    1508:	3b 18       	sub	r3, r11
    150a:	01 c0       	rjmp	.+2      	; 0x150e <vfprintf+0x328>
    150c:	31 2c       	mov	r3, r1
    150e:	34 ff       	sbrs	r19, 4
    1510:	11 c0       	rjmp	.+34     	; 0x1534 <vfprintf+0x34e>
    1512:	b7 01       	movw	r22, r14
    1514:	80 e3       	ldi	r24, 0x30	; 48
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	3c 87       	std	Y+12, r19	; 0x0c
    151a:	69 d0       	rcall	.+210    	; 0x15ee <fputc>
    151c:	3c 85       	ldd	r19, Y+12	; 0x0c
    151e:	32 ff       	sbrs	r19, 2
    1520:	16 c0       	rjmp	.+44     	; 0x154e <vfprintf+0x368>
    1522:	31 fd       	sbrc	r19, 1
    1524:	03 c0       	rjmp	.+6      	; 0x152c <vfprintf+0x346>
    1526:	88 e7       	ldi	r24, 0x78	; 120
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x34a>
    152c:	88 e5       	ldi	r24, 0x58	; 88
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	b7 01       	movw	r22, r14
    1532:	0c c0       	rjmp	.+24     	; 0x154c <vfprintf+0x366>
    1534:	83 2f       	mov	r24, r19
    1536:	86 78       	andi	r24, 0x86	; 134
    1538:	51 f0       	breq	.+20     	; 0x154e <vfprintf+0x368>
    153a:	31 ff       	sbrs	r19, 1
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x35c>
    153e:	8b e2       	ldi	r24, 0x2B	; 43
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <vfprintf+0x35e>
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	37 fd       	sbrc	r19, 7
    1546:	8d e2       	ldi	r24, 0x2D	; 45
    1548:	b7 01       	movw	r22, r14
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	50 d0       	rcall	.+160    	; 0x15ee <fputc>
    154e:	a5 14       	cp	r10, r5
    1550:	30 f4       	brcc	.+12     	; 0x155e <vfprintf+0x378>
    1552:	b7 01       	movw	r22, r14
    1554:	80 e3       	ldi	r24, 0x30	; 48
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	4a d0       	rcall	.+148    	; 0x15ee <fputc>
    155a:	5a 94       	dec	r5
    155c:	f8 cf       	rjmp	.-16     	; 0x154e <vfprintf+0x368>
    155e:	aa 94       	dec	r10
    1560:	f4 01       	movw	r30, r8
    1562:	ea 0d       	add	r30, r10
    1564:	f1 1d       	adc	r31, r1
    1566:	80 81       	ld	r24, Z
    1568:	b7 01       	movw	r22, r14
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	40 d0       	rcall	.+128    	; 0x15ee <fputc>
    156e:	a1 10       	cpse	r10, r1
    1570:	f6 cf       	rjmp	.-20     	; 0x155e <vfprintf+0x378>
    1572:	33 20       	and	r3, r3
    1574:	09 f4       	brne	.+2      	; 0x1578 <vfprintf+0x392>
    1576:	5d ce       	rjmp	.-838    	; 0x1232 <vfprintf+0x4c>
    1578:	b7 01       	movw	r22, r14
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	37 d0       	rcall	.+110    	; 0x15ee <fputc>
    1580:	3a 94       	dec	r3
    1582:	f7 cf       	rjmp	.-18     	; 0x1572 <vfprintf+0x38c>
    1584:	f7 01       	movw	r30, r14
    1586:	86 81       	ldd	r24, Z+6	; 0x06
    1588:	97 81       	ldd	r25, Z+7	; 0x07
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x3aa>
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	2c 96       	adiw	r28, 0x0c	; 12
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	7f 90       	pop	r7
    15b6:	6f 90       	pop	r6
    15b8:	5f 90       	pop	r5
    15ba:	4f 90       	pop	r4
    15bc:	3f 90       	pop	r3
    15be:	2f 90       	pop	r2
    15c0:	08 95       	ret

000015c2 <strnlen_P>:
    15c2:	fc 01       	movw	r30, r24
    15c4:	05 90       	lpm	r0, Z+
    15c6:	61 50       	subi	r22, 0x01	; 1
    15c8:	70 40       	sbci	r23, 0x00	; 0
    15ca:	01 10       	cpse	r0, r1
    15cc:	d8 f7       	brcc	.-10     	; 0x15c4 <strnlen_P+0x2>
    15ce:	80 95       	com	r24
    15d0:	90 95       	com	r25
    15d2:	8e 0f       	add	r24, r30
    15d4:	9f 1f       	adc	r25, r31
    15d6:	08 95       	ret

000015d8 <strnlen>:
    15d8:	fc 01       	movw	r30, r24
    15da:	61 50       	subi	r22, 0x01	; 1
    15dc:	70 40       	sbci	r23, 0x00	; 0
    15de:	01 90       	ld	r0, Z+
    15e0:	01 10       	cpse	r0, r1
    15e2:	d8 f7       	brcc	.-10     	; 0x15da <strnlen+0x2>
    15e4:	80 95       	com	r24
    15e6:	90 95       	com	r25
    15e8:	8e 0f       	add	r24, r30
    15ea:	9f 1f       	adc	r25, r31
    15ec:	08 95       	ret

000015ee <fputc>:
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	fb 01       	movw	r30, r22
    15f8:	23 81       	ldd	r18, Z+3	; 0x03
    15fa:	21 fd       	sbrc	r18, 1
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <fputc+0x16>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	28 c0       	rjmp	.+80     	; 0x1654 <fputc+0x66>
    1604:	22 ff       	sbrs	r18, 2
    1606:	16 c0       	rjmp	.+44     	; 0x1634 <fputc+0x46>
    1608:	46 81       	ldd	r20, Z+6	; 0x06
    160a:	57 81       	ldd	r21, Z+7	; 0x07
    160c:	24 81       	ldd	r18, Z+4	; 0x04
    160e:	35 81       	ldd	r19, Z+5	; 0x05
    1610:	42 17       	cp	r20, r18
    1612:	53 07       	cpc	r21, r19
    1614:	44 f4       	brge	.+16     	; 0x1626 <fputc+0x38>
    1616:	a0 81       	ld	r26, Z
    1618:	b1 81       	ldd	r27, Z+1	; 0x01
    161a:	9d 01       	movw	r18, r26
    161c:	2f 5f       	subi	r18, 0xFF	; 255
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	31 83       	std	Z+1, r19	; 0x01
    1622:	20 83       	st	Z, r18
    1624:	8c 93       	st	X, r24
    1626:	26 81       	ldd	r18, Z+6	; 0x06
    1628:	37 81       	ldd	r19, Z+7	; 0x07
    162a:	2f 5f       	subi	r18, 0xFF	; 255
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	37 83       	std	Z+7, r19	; 0x07
    1630:	26 83       	std	Z+6, r18	; 0x06
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <fputc+0x66>
    1634:	eb 01       	movw	r28, r22
    1636:	09 2f       	mov	r16, r25
    1638:	18 2f       	mov	r17, r24
    163a:	00 84       	ldd	r0, Z+8	; 0x08
    163c:	f1 85       	ldd	r31, Z+9	; 0x09
    163e:	e0 2d       	mov	r30, r0
    1640:	19 95       	eicall
    1642:	89 2b       	or	r24, r25
    1644:	e1 f6       	brne	.-72     	; 0x15fe <fputc+0x10>
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	8e 83       	std	Y+6, r24	; 0x06
    1650:	81 2f       	mov	r24, r17
    1652:	90 2f       	mov	r25, r16
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <__ultoa_invert>:
    165e:	fa 01       	movw	r30, r20
    1660:	aa 27       	eor	r26, r26
    1662:	28 30       	cpi	r18, 0x08	; 8
    1664:	51 f1       	breq	.+84     	; 0x16ba <__ultoa_invert+0x5c>
    1666:	20 31       	cpi	r18, 0x10	; 16
    1668:	81 f1       	breq	.+96     	; 0x16ca <__ultoa_invert+0x6c>
    166a:	e8 94       	clt
    166c:	6f 93       	push	r22
    166e:	6e 7f       	andi	r22, 0xFE	; 254
    1670:	6e 5f       	subi	r22, 0xFE	; 254
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	af 4f       	sbci	r26, 0xFF	; 255
    167a:	b1 e0       	ldi	r27, 0x01	; 1
    167c:	3e d0       	rcall	.+124    	; 0x16fa <__ultoa_invert+0x9c>
    167e:	b4 e0       	ldi	r27, 0x04	; 4
    1680:	3c d0       	rcall	.+120    	; 0x16fa <__ultoa_invert+0x9c>
    1682:	67 0f       	add	r22, r23
    1684:	78 1f       	adc	r23, r24
    1686:	89 1f       	adc	r24, r25
    1688:	9a 1f       	adc	r25, r26
    168a:	a1 1d       	adc	r26, r1
    168c:	68 0f       	add	r22, r24
    168e:	79 1f       	adc	r23, r25
    1690:	8a 1f       	adc	r24, r26
    1692:	91 1d       	adc	r25, r1
    1694:	a1 1d       	adc	r26, r1
    1696:	6a 0f       	add	r22, r26
    1698:	71 1d       	adc	r23, r1
    169a:	81 1d       	adc	r24, r1
    169c:	91 1d       	adc	r25, r1
    169e:	a1 1d       	adc	r26, r1
    16a0:	20 d0       	rcall	.+64     	; 0x16e2 <__ultoa_invert+0x84>
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <__ultoa_invert+0x48>
    16a4:	68 94       	set
    16a6:	3f 91       	pop	r19
    16a8:	2a e0       	ldi	r18, 0x0A	; 10
    16aa:	26 9f       	mul	r18, r22
    16ac:	11 24       	eor	r1, r1
    16ae:	30 19       	sub	r19, r0
    16b0:	30 5d       	subi	r19, 0xD0	; 208
    16b2:	31 93       	st	Z+, r19
    16b4:	de f6       	brtc	.-74     	; 0x166c <__ultoa_invert+0xe>
    16b6:	cf 01       	movw	r24, r30
    16b8:	08 95       	ret
    16ba:	46 2f       	mov	r20, r22
    16bc:	47 70       	andi	r20, 0x07	; 7
    16be:	40 5d       	subi	r20, 0xD0	; 208
    16c0:	41 93       	st	Z+, r20
    16c2:	b3 e0       	ldi	r27, 0x03	; 3
    16c4:	0f d0       	rcall	.+30     	; 0x16e4 <__ultoa_invert+0x86>
    16c6:	c9 f7       	brne	.-14     	; 0x16ba <__ultoa_invert+0x5c>
    16c8:	f6 cf       	rjmp	.-20     	; 0x16b6 <__ultoa_invert+0x58>
    16ca:	46 2f       	mov	r20, r22
    16cc:	4f 70       	andi	r20, 0x0F	; 15
    16ce:	40 5d       	subi	r20, 0xD0	; 208
    16d0:	4a 33       	cpi	r20, 0x3A	; 58
    16d2:	18 f0       	brcs	.+6      	; 0x16da <__ultoa_invert+0x7c>
    16d4:	49 5d       	subi	r20, 0xD9	; 217
    16d6:	31 fd       	sbrc	r19, 1
    16d8:	40 52       	subi	r20, 0x20	; 32
    16da:	41 93       	st	Z+, r20
    16dc:	02 d0       	rcall	.+4      	; 0x16e2 <__ultoa_invert+0x84>
    16de:	a9 f7       	brne	.-22     	; 0x16ca <__ultoa_invert+0x6c>
    16e0:	ea cf       	rjmp	.-44     	; 0x16b6 <__ultoa_invert+0x58>
    16e2:	b4 e0       	ldi	r27, 0x04	; 4
    16e4:	a6 95       	lsr	r26
    16e6:	97 95       	ror	r25
    16e8:	87 95       	ror	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	ba 95       	dec	r27
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__ultoa_invert+0x86>
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	61 05       	cpc	r22, r1
    16f6:	71 05       	cpc	r23, r1
    16f8:	08 95       	ret
    16fa:	9b 01       	movw	r18, r22
    16fc:	ac 01       	movw	r20, r24
    16fe:	0a 2e       	mov	r0, r26
    1700:	06 94       	lsr	r0
    1702:	57 95       	ror	r21
    1704:	47 95       	ror	r20
    1706:	37 95       	ror	r19
    1708:	27 95       	ror	r18
    170a:	ba 95       	dec	r27
    170c:	c9 f7       	brne	.-14     	; 0x1700 <__ultoa_invert+0xa2>
    170e:	62 0f       	add	r22, r18
    1710:	73 1f       	adc	r23, r19
    1712:	84 1f       	adc	r24, r20
    1714:	95 1f       	adc	r25, r21
    1716:	a0 1d       	adc	r26, r0
    1718:	08 95       	ret

0000171a <_exit>:
    171a:	f8 94       	cli

0000171c <__stop_program>:
    171c:	ff cf       	rjmp	.-2      	; 0x171c <__stop_program>
