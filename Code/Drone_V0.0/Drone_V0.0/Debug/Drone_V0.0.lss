
Drone_V0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00001672  00001706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800224  00800224  0000172a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5e  00000000  00000000  0000399d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102b  00000000  00000000  000043fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00005428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000891  00000000  00000000  0000579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7d  00000000  00000000  0000602d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c1       	rjmp	.+668    	; 0x2c2 <__vector_9>
      26:	00 00       	nop
      28:	6e c1       	rjmp	.+732    	; 0x306 <__vector_10>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2e c3       	rjmp	.+1628   	; 0x6ea <__vector_35>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8c 06       	cpc	r8, r28
      e6:	9d 06       	cpc	r9, r29
      e8:	ae 06       	cpc	r10, r30
      ea:	bf 06       	cpc	r11, r31
      ec:	d0 06       	cpc	r13, r16
      ee:	e1 06       	cpc	r14, r17
      f0:	f2 06       	cpc	r15, r18
      f2:	03 07       	cpc	r16, r19

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	e2 e7       	ldi	r30, 0x72	; 114
     10c:	f6 e1       	ldi	r31, 0x16	; 22
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a4 32       	cpi	r26, 0x24	; 36
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	22 e0       	ldi	r18, 0x02	; 2
     120:	a4 e2       	ldi	r26, 0x24	; 36
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a7 34       	cpi	r26, 0x47	; 71
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	db d4       	rcall	.+2486   	; 0xae6 <main>
     130:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <_ZN3EscC1Ei>:

//constructor

Esc::Esc(int escPosition)
{
	escNumber = escPosition;
     136:	fc 01       	movw	r30, r24
     138:	71 83       	std	Z+1, r23	; 0x01
     13a:	60 83       	st	Z, r22
     13c:	08 95       	ret

0000013e <_Z13initializeESCv>:
}

void initializeESC()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
     13e:	e0 ea       	ldi	r30, 0xA0	; 160
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	82 6a       	ori	r24, 0xA2	; 162
     146:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
     148:	e0 e2       	ldi	r30, 0x20	; 32
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	80 81       	ld	r24, Z
     14e:	82 6a       	ori	r24, 0xA2	; 162
     150:	80 83       	st	Z, r24

  //wave generator mode Ã  phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
     152:	e1 ea       	ldi	r30, 0xA1	; 161
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	81 61       	ori	r24, 0x11	; 17
     15a:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
     15c:	e1 e2       	ldi	r30, 0x21	; 33
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	80 81       	ld	r24, Z
     162:	81 61       	ori	r24, 0x11	; 17
     164:	80 83       	st	Z, r24
  
  //rÃ©gler TOP Ã  65535
  ICR4 = 65535;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	9f ef       	ldi	r25, 0xFF	; 255
     16a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     16e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  ICR5 = 65535;
     172:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     176:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
  OCR4A = 0;
     17a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     17e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR4B = 0;
     182:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     186:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  OCR5A = 0;
     18a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     18e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
  OCR5B = 0;
     192:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     196:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
     19a:	ea e0       	ldi	r30, 0x0A	; 10
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	80 81       	ld	r24, Z
     1a0:	88 61       	ori	r24, 0x18	; 24
     1a2:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	80 81       	ld	r24, Z
     1aa:	88 61       	ori	r24, 0x18	; 24
     1ac:	80 83       	st	Z, r24
  
  //delay to make sure the ESC are armed before playing with the PWM
  _delay_ms(DELAY_ESC);
  
  //Timer 4/5 set to 0
  TCNT4 = 0;
     1ae:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     1b2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5 = 0;
     1b6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     1ba:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     1be:	08 95       	ret

000001c0 <_ZN3Esc3setEj>:
}

void Esc::set(uint16_t pwm)
{
	switch (escNumber) {
     1c0:	fc 01       	movw	r30, r24
     1c2:	80 81       	ld	r24, Z
     1c4:	91 81       	ldd	r25, Z+1	; 0x01
     1c6:	82 30       	cpi	r24, 0x02	; 2
     1c8:	91 05       	cpc	r25, r1
     1ca:	99 f0       	breq	.+38     	; 0x1f2 <_ZN3Esc3setEj+0x32>
     1cc:	1c f4       	brge	.+6      	; 0x1d4 <_ZN3Esc3setEj+0x14>
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	39 f0       	breq	.+14     	; 0x1e0 <_ZN3Esc3setEj+0x20>
     1d2:	2a c0       	rjmp	.+84     	; 0x228 <_ZN3Esc3setEj+0x68>
     1d4:	83 30       	cpi	r24, 0x03	; 3
     1d6:	91 05       	cpc	r25, r1
     1d8:	a9 f0       	breq	.+42     	; 0x204 <_ZN3Esc3setEj+0x44>
     1da:	04 97       	sbiw	r24, 0x04	; 4
     1dc:	e1 f0       	breq	.+56     	; 0x216 <_ZN3Esc3setEj+0x56>
     1de:	24 c0       	rjmp	.+72     	; 0x228 <_ZN3Esc3setEj+0x68>
		//multiply by 4 here to get from the PWM of the RF controller to the ESC
		//ESC requires 1-2ms pulse width so from 8000 to 16000 pwm
		//since the number we get from the RF is between 2000 and 4000, multiply by 4
		case 1: 
			OCR4A = pwm*4;
     1e0:	66 0f       	add	r22, r22
     1e2:	77 1f       	adc	r23, r23
     1e4:	66 0f       	add	r22, r22
     1e6:	77 1f       	adc	r23, r23
     1e8:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1ec:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
     1f0:	08 95       	ret
		case 2: 
			OCR4B = pwm*4;
     1f2:	66 0f       	add	r22, r22
     1f4:	77 1f       	adc	r23, r23
     1f6:	66 0f       	add	r22, r22
     1f8:	77 1f       	adc	r23, r23
     1fa:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1fe:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
     202:	08 95       	ret
		case 3: 
			OCR5A = pwm*4;
     204:	66 0f       	add	r22, r22
     206:	77 1f       	adc	r23, r23
     208:	66 0f       	add	r22, r22
     20a:	77 1f       	adc	r23, r23
     20c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     210:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     214:	08 95       	ret
		case 4: 
			OCR5B = pwm*4;
     216:	66 0f       	add	r22, r22
     218:	77 1f       	adc	r23, r23
     21a:	66 0f       	add	r22, r22
     21c:	77 1f       	adc	r23, r23
     21e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     222:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     226:	08 95       	ret
		default: 
			OCR4A = 0;
     228:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     22c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			OCR4B = 0;
     230:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     234:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			OCR5A = 0;
     238:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     23c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			OCR5B = 0;
     240:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     244:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     248:	08 95       	ret

0000024a <_Z19initializeInterruptv>:
static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;

void initializeInterrupt()
{
	PCICR |= (1<<PCIE0) | (1<<PCIE1); /* enable pin change interrupt 0 and 1 */
     24a:	e8 e6       	ldi	r30, 0x68	; 104
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	83 60       	ori	r24, 0x03	; 3
     252:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4); /* enable pin B0 to trigger PCINT0 */
     254:	eb e6       	ldi	r30, 0x6B	; 107
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	80 61       	ori	r24, 0x10	; 16
     25c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT11) | (1<<PCINT12) | (1<<PCINT13) | (1<<PCINT14); /* enable pin J3-J6 to trigger PCINT1 */
     25e:	ec e6       	ldi	r30, 0x6C	; 108
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	88 67       	ori	r24, 0x78	; 120
     266:	80 83       	st	Z, r24
	sei();	/* Turn interrupts on */
     268:	78 94       	sei
     26a:	08 95       	ret

0000026c <_Z24initializecounterPWMreadv>:
}

void initializecounterPWMread()
{
	last_ch_1 = false, last_ch_2 = false, last_ch_3 = false, last_ch_4 = false;
     26c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <_ZL9last_ch_1>
     270:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <_ZL9last_ch_2>
     274:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZL9last_ch_3>
     278:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZL9last_ch_4>
	ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
     27c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <_ZL13ch_1_counting>
     280:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <_ZL13ch_2_counting>
     284:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZL13ch_3_counting>
     288:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZL13ch_4_counting>
	ch_1_pw = 0, ch_2_pw = 0, ch_3_pw = 0, ch_4_pw = 0;
     28c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <ch_1_pw+0x1>
     290:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <ch_1_pw>
     294:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <ch_2_pw+0x1>
     298:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <ch_2_pw>
     29c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <ch_3_pw+0x1>
     2a0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ch_3_pw>
     2a4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <ch_4_pw+0x1>
     2a8:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <ch_4_pw>
	//counter for measuring pulse width of incoming radio signal
	TCCR3B |= (1 << CS31); //set-up counter in normal mode with prescaler = 8
     2ac:	e1 e9       	ldi	r30, 0x91	; 145
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3); // enable interrupt on overflow
     2b6:	e1 e7       	ldi	r30, 0x71	; 113
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	81 60       	ori	r24, 0x01	; 1
     2be:	80 83       	st	Z, r24
     2c0:	08 95       	ret

000002c2 <__vector_9>:
}

//for button press
ISR(PCINT0_vect) {
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
	//read pin PB4 and if 1 this must be a rising edge change
	if (PINB & 0b00010000) button_rising = true;
     2d2:	1c 9b       	sbis	0x03, 4	; 3
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <__vector_9+0x1c>
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <button_rising>
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <__vector_9+0x22>
	else button_falling = true;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <button_falling>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e4:	2f ef       	ldi	r18, 0xFF	; 255
     2e6:	89 ef       	ldi	r24, 0xF9	; 249
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	80 40       	sbci	r24, 0x00	; 0
     2ee:	90 40       	sbci	r25, 0x00	; 0
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <__vector_9+0x28>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <__vector_9+0x32>
     2f4:	00 00       	nop
	_delay_ms(20); //debounce
}
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	2f 91       	pop	r18
     2fc:	0f 90       	pop	r0
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	0f 90       	pop	r0
     302:	1f 90       	pop	r1
     304:	18 95       	reti

00000306 <__vector_10>:
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	6f 93       	push	r22
     318:	7f 93       	push	r23
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
     31e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     322:	85 ff       	sbrs	r24, 5
     324:	6b c1       	rjmp	.+726    	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
     326:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZL9last_ch_1>
     32a:	81 11       	cpse	r24, r1
     32c:	bf c1       	rjmp	.+894    	; 0x6ac <__FUSE_REGION_LENGTH__+0x2ac>
     32e:	6b c1       	rjmp	.+726    	; 0x606 <__FUSE_REGION_LENGTH__+0x206>
	{	last_ch_1 = true;
		ch_1_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
			ch_1_ovf_rising = true;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <_ZL15ch_1_ovf_rising>
     336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_10+0x36>
		else 
			ch_1_ovf_rising = false;
     338:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <_ZL15ch_1_ovf_rising>
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
     33c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     340:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	92 2b       	or	r25, r18
     348:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <_ZL10count_ch_1+0x1>
     34c:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <_ZL10count_ch_1>
     350:	3f c0       	rjmp	.+126    	; 0x3d0 <__vector_10+0xca>
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     352:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZL9last_ch_1>
     356:	81 11       	cpse	r24, r1
     358:	60 c1       	rjmp	.+704    	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
     35a:	3a c0       	rjmp	.+116    	; 0x3d0 <__vector_10+0xca>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
     35c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <_ZL15ch_1_ovf_rising>
     360:	81 11       	cpse	r24, r1
     362:	16 c0       	rjmp	.+44     	; 0x390 <__vector_10+0x8a>
     364:	04 c0       	rjmp	.+8      	; 0x36e <__vector_10+0x68>
     366:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <_ZL15ch_1_ovf_rising>
     36a:	88 23       	and	r24, r24
     36c:	89 f0       	breq	.+34     	; 0x390 <__vector_10+0x8a>
			ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
     36e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     372:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	92 2b       	or	r25, r18
     37a:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <_ZL10count_ch_1>
     37e:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <_ZL10count_ch_1+0x1>
     382:	82 1b       	sub	r24, r18
     384:	93 0b       	sbc	r25, r19
     386:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <ch_1_pw+0x1>
     38a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <ch_1_pw>
     38e:	10 c0       	rjmp	.+32     	; 0x3b0 <__vector_10+0xaa>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else 
			ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1;				
     390:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     394:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	92 2b       	or	r25, r18
     39c:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <_ZL10count_ch_1>
     3a0:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <_ZL10count_ch_1+0x1>
     3a4:	82 1b       	sub	r24, r18
     3a6:	93 0b       	sbc	r25, r19
     3a8:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <ch_1_pw+0x1>
     3ac:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <ch_1_pw>
		ch_1_counting = false;
     3b0:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <_ZL13ch_1_counting>
		//remove the overflow flag only when no channel is counting to avoid problems 
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     3b4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <_ZL13ch_2_counting>
     3b8:	81 11       	cpse	r24, r1
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <__vector_10+0xca>
     3bc:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZL13ch_3_counting>
     3c0:	81 11       	cpse	r24, r1
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__vector_10+0xca>
     3c4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <_ZL13ch_4_counting>
     3c8:	81 11       	cpse	r24, r1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_10+0xca>
     3cc:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZL11timer_3_ovf>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
     3d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     3d4:	84 ff       	sbrs	r24, 4
     3d6:	32 c1       	rjmp	.+612    	; 0x63c <__FUSE_REGION_LENGTH__+0x23c>
     3d8:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZL9last_ch_2>
     3dc:	81 11       	cpse	r24, r1
     3de:	6b c1       	rjmp	.+726    	; 0x6b6 <__FUSE_REGION_LENGTH__+0x2b6>
     3e0:	23 c1       	rjmp	.+582    	; 0x628 <__FUSE_REGION_LENGTH__+0x228>
	{	last_ch_2 = true;
		ch_2_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <_ZL15ch_2_ovf_rising>
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__vector_10+0xe8>
		else ch_2_ovf_rising = false;
     3ea:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <_ZL15ch_2_ovf_rising>
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
     3ee:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     3f2:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	92 2b       	or	r25, r18
     3fa:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <_ZL10count_ch_2+0x1>
     3fe:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <_ZL10count_ch_2>
     402:	3f c0       	rjmp	.+126    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     404:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZL9last_ch_2>
     408:	81 11       	cpse	r24, r1
     40a:	1d c1       	rjmp	.+570    	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
     40c:	3a c0       	rjmp	.+116    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
	{	last_ch_2 = false;
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     40e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZL15ch_2_ovf_rising>
     412:	81 11       	cpse	r24, r1
     414:	16 c0       	rjmp	.+44     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     416:	04 c0       	rjmp	.+8      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     418:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <_ZL15ch_2_ovf_rising>
     41c:	88 23       	and	r24, r24
     41e:	89 f0       	breq	.+34     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     420:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     424:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	92 2b       	or	r25, r18
     42c:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <_ZL10count_ch_2>
     430:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <_ZL10count_ch_2+0x1>
     434:	82 1b       	sub	r24, r18
     436:	93 0b       	sbc	r25, r19
     438:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <ch_2_pw+0x1>
     43c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ch_2_pw>
     440:	10 c0       	rjmp	.+32     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_1_pw = 65535 - count_ch_2 + (TCNT3L | TCNT3H << 8) + 1;
     442:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     446:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	92 2b       	or	r25, r18
     44e:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <_ZL10count_ch_2>
     452:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <_ZL10count_ch_2+0x1>
     456:	82 1b       	sub	r24, r18
     458:	93 0b       	sbc	r25, r19
     45a:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <ch_1_pw+0x1>
     45e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <ch_1_pw>
		ch_2_counting = false;
     462:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <_ZL13ch_2_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     466:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZL13ch_1_counting>
     46a:	81 11       	cpse	r24, r1
     46c:	0a c0       	rjmp	.+20     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
     46e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZL13ch_3_counting>
     472:	81 11       	cpse	r24, r1
     474:	06 c0       	rjmp	.+12     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
     476:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <_ZL13ch_4_counting>
     47a:	81 11       	cpse	r24, r1
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
     47e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZL11timer_3_ovf>
	}
	
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
     482:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     486:	83 ff       	sbrs	r24, 3
     488:	ef c0       	rjmp	.+478    	; 0x668 <__FUSE_REGION_LENGTH__+0x268>
     48a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZL9last_ch_3>
     48e:	81 11       	cpse	r24, r1
     490:	17 c1       	rjmp	.+558    	; 0x6c0 <__FUSE_REGION_LENGTH__+0x2c0>
     492:	e0 c0       	rjmp	.+448    	; 0x654 <__FUSE_REGION_LENGTH__+0x254>
	{	last_ch_3 = true;
		ch_3_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_ZL15ch_3_ovf_rising>
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
		else ch_3_ovf_rising = false;
     49c:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <_ZL15ch_3_ovf_rising>
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
     4a0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     4a4:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	92 2b       	or	r25, r18
     4ac:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <_ZL10count_ch_3+0x1>
     4b0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <_ZL10count_ch_3>
     4b4:	44 c0       	rjmp	.+136    	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     4b6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZL9last_ch_3>
     4ba:	81 11       	cpse	r24, r1
     4bc:	da c0       	rjmp	.+436    	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
     4be:	3f c0       	rjmp	.+126    	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
	{	last_ch_3 = false;
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     4c0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <_ZL15ch_3_ovf_rising>
     4c4:	81 11       	cpse	r24, r1
     4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
     4ca:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <_ZL15ch_3_ovf_rising>
     4ce:	88 23       	and	r24, r24
     4d0:	89 f0       	breq	.+34     	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
     4d2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     4d6:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	92 2b       	or	r25, r18
     4de:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <_ZL10count_ch_3>
     4e2:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <_ZL10count_ch_3+0x1>
     4e6:	82 1b       	sub	r24, r18
     4e8:	93 0b       	sbc	r25, r19
     4ea:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ch_3_pw+0x1>
     4ee:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ch_3_pw>
     4f2:	15 c0       	rjmp	.+42     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_3_pw = 65535 - count_ch_3 + (TCNT3L | TCNT3H << 8) + 3;
     4f4:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     4f8:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     4fc:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <_ZL10count_ch_3>
     500:	70 91 2c 02 	lds	r23, 0x022C	; 0x80022c <_ZL10count_ch_3+0x1>
     504:	22 e0       	ldi	r18, 0x02	; 2
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	26 1b       	sub	r18, r22
     50a:	37 0b       	sbc	r19, r23
     50c:	89 2f       	mov	r24, r25
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	94 2b       	or	r25, r20
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ch_3_pw+0x1>
     51a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ch_3_pw>
		ch_3_counting = false;
     51e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZL13ch_3_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     522:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZL13ch_1_counting>
     526:	81 11       	cpse	r24, r1
     528:	0a c0       	rjmp	.+20     	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     52a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <_ZL13ch_2_counting>
     52e:	81 11       	cpse	r24, r1
     530:	06 c0       	rjmp	.+12     	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     532:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <_ZL13ch_4_counting>
     536:	81 11       	cpse	r24, r1
     538:	02 c0       	rjmp	.+4      	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     53a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZL11timer_3_ovf>
	}
	
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
     53e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     542:	82 ff       	sbrs	r24, 2
     544:	a7 c0       	rjmp	.+334    	; 0x694 <__FUSE_REGION_LENGTH__+0x294>
     546:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZL9last_ch_4>
     54a:	81 11       	cpse	r24, r1
     54c:	be c0       	rjmp	.+380    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     54e:	98 c0       	rjmp	.+304    	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
	{	last_ch_4 = true;
		ch_4_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
     556:	02 c0       	rjmp	.+4      	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
		else ch_4_ovf_rising = false;
     558:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
     55c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     560:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	92 2b       	or	r25, r18
     568:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <_ZL10count_ch_4+0x1>
     56c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <_ZL10count_ch_4>
     570:	b0 c0       	rjmp	.+352    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     572:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZL9last_ch_4>
     576:	81 11       	cpse	r24, r1
     578:	92 c0       	rjmp	.+292    	; 0x69e <__FUSE_REGION_LENGTH__+0x29e>
     57a:	ab c0       	rjmp	.+342    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
	{	last_ch_4 = false;
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     57c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     580:	81 11       	cpse	r24, r1
     582:	16 c0       	rjmp	.+44     	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
     586:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     58a:	88 23       	and	r24, r24
     58c:	89 f0       	breq	.+34     	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
     58e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     592:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	92 2b       	or	r25, r18
     59a:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <_ZL10count_ch_4>
     59e:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <_ZL10count_ch_4+0x1>
     5a2:	82 1b       	sub	r24, r18
     5a4:	93 0b       	sbc	r25, r19
     5a6:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ch_4_pw+0x1>
     5aa:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ch_4_pw>
     5ae:	15 c0       	rjmp	.+42     	; 0x5da <__FUSE_REGION_LENGTH__+0x1da>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_4_pw = 65535 - count_ch_4 + (TCNT3L | TCNT3H << 8) + 4;
     5b0:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     5b4:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     5b8:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <_ZL10count_ch_4>
     5bc:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <_ZL10count_ch_4+0x1>
     5c0:	23 e0       	ldi	r18, 0x03	; 3
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	26 1b       	sub	r18, r22
     5c6:	37 0b       	sbc	r19, r23
     5c8:	89 2f       	mov	r24, r25
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	94 2b       	or	r25, r20
     5ce:	82 0f       	add	r24, r18
     5d0:	93 1f       	adc	r25, r19
     5d2:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ch_4_pw+0x1>
     5d6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ch_4_pw>
		ch_4_counting = false;
     5da:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <_ZL13ch_4_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     5de:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZL13ch_1_counting>
     5e2:	81 11       	cpse	r24, r1
     5e4:	76 c0       	rjmp	.+236    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
     5e6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <_ZL13ch_2_counting>
     5ea:	81 11       	cpse	r24, r1
     5ec:	72 c0       	rjmp	.+228    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
     5ee:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZL13ch_3_counting>
     5f2:	81 11       	cpse	r24, r1
     5f4:	6e c0       	rjmp	.+220    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
     5f6:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZL11timer_3_ovf>
     5fa:	6b c0       	rjmp	.+214    	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     5fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     600:	85 ff       	sbrs	r24, 5
     602:	a7 ce       	rjmp	.-690    	; 0x352 <__vector_10+0x4c>
     604:	e5 ce       	rjmp	.-566    	; 0x3d0 <__vector_10+0xca>
}
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL9last_ch_1>
		ch_1_counting = true;
     60c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZL13ch_1_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
     610:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     614:	81 11       	cpse	r24, r1
     616:	8c ce       	rjmp	.-744    	; 0x330 <__vector_10+0x2a>
     618:	8f ce       	rjmp	.-738    	; 0x338 <__vector_10+0x32>
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
     61a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <_ZL9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
     61e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     622:	81 11       	cpse	r24, r1
     624:	a0 ce       	rjmp	.-704    	; 0x366 <__vector_10+0x60>
     626:	9a ce       	rjmp	.-716    	; 0x35c <__vector_10+0x56>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
	{	last_ch_2 = true;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <_ZL9last_ch_2>
		ch_2_counting = true;
     62e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <_ZL13ch_2_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
     632:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     636:	81 11       	cpse	r24, r1
     638:	d4 ce       	rjmp	.-600    	; 0x3e2 <__vector_10+0xdc>
     63a:	d7 ce       	rjmp	.-594    	; 0x3ea <__vector_10+0xe4>
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     63c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     640:	84 ff       	sbrs	r24, 4
     642:	e0 ce       	rjmp	.-576    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     644:	1e cf       	rjmp	.-452    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
	{	last_ch_2 = false;
     646:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <_ZL9last_ch_2>
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     64a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     64e:	81 11       	cpse	r24, r1
     650:	e3 ce       	rjmp	.-570    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     652:	dd ce       	rjmp	.-582    	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
	}
	
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
	{	last_ch_3 = true;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <_ZL9last_ch_3>
		ch_3_counting = true;
     65a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <_ZL13ch_3_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
     65e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     662:	81 11       	cpse	r24, r1
     664:	17 cf       	rjmp	.-466    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     666:	1a cf       	rjmp	.-460    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     668:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     66c:	83 ff       	sbrs	r24, 3
     66e:	23 cf       	rjmp	.-442    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     670:	66 cf       	rjmp	.-308    	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
	{	last_ch_3 = false;
     672:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZL9last_ch_3>
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     676:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     67a:	81 11       	cpse	r24, r1
     67c:	26 cf       	rjmp	.-436    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
     67e:	20 cf       	rjmp	.-448    	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
	}
	
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
	{	last_ch_4 = true;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <_ZL9last_ch_4>
		ch_4_counting = true;
     686:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <_ZL13ch_4_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
     68a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     68e:	81 11       	cpse	r24, r1
     690:	5f cf       	rjmp	.-322    	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
     692:	62 cf       	rjmp	.-316    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     694:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     698:	82 ff       	sbrs	r24, 2
     69a:	6b cf       	rjmp	.-298    	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
     69c:	1a c0       	rjmp	.+52     	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
	{	last_ch_4 = false;
     69e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZL9last_ch_4>
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     6a2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11timer_3_ovf>
     6a6:	81 11       	cpse	r24, r1
     6a8:	6e cf       	rjmp	.-292    	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
     6aa:	68 cf       	rjmp	.-304    	; 0x57c <__FUSE_REGION_LENGTH__+0x17c>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     6ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     6b0:	85 ff       	sbrs	r24, 5
     6b2:	b3 cf       	rjmp	.-154    	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
     6b4:	8d ce       	rjmp	.-742    	; 0x3d0 <__vector_10+0xca>
		if(timer_3_ovf) ch_2_ovf_rising = true;
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     6b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     6ba:	84 ff       	sbrs	r24, 4
     6bc:	c4 cf       	rjmp	.-120    	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
     6be:	e1 ce       	rjmp	.-574    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
		if(timer_3_ovf) ch_3_ovf_rising = true;
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
     6c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     6c4:	83 ff       	sbrs	r24, 3
     6c6:	d5 cf       	rjmp	.-86     	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
     6c8:	3a cf       	rjmp	.-396    	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
		if(timer_3_ovf) ch_4_ovf_rising = true;
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
     6ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     6ce:	82 ff       	sbrs	r24, 2
     6d0:	e6 cf       	rjmp	.-52     	; 0x69e <__FUSE_REGION_LENGTH__+0x29e>
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
	}
	
	//do the same for every channel when cleaned up
	
}
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <__vector_35>:

ISR(TIMER3_OVF_vect) {
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	8f 93       	push	r24
	timer_3_ovf=true;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <_ZL11timer_3_ovf>
	TIFR3 &= ~(1 << TOV3);
     6fc:	c0 98       	cbi	0x18, 0	; 24
     6fe:	8f 91       	pop	r24
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <_Z6enablev>:
	* @brief Toggle the enable pin to "send" command to display
	* @param None
	* @retval None
	*/
void enable(void){
	PORTL |= (1 << E);
     70a:	eb e0       	ldi	r30, 0x0B	; 11
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	80 81       	ld	r24, Z
     710:	80 68       	ori	r24, 0x80	; 128
     712:	80 83       	st	Z, r24
	TCNT1L = 0, TCNT1H = 0;
     714:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     718:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < ENABLE_TIME){/* delay for synchronization */}	
     71c:	a4 e8       	ldi	r26, 0x84	; 132
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e5 e8       	ldi	r30, 0x85	; 133
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	8c 91       	ld	r24, X
     726:	20 81       	ld	r18, Z
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	92 2b       	or	r25, r18
     72c:	84 36       	cpi	r24, 0x64	; 100
     72e:	91 05       	cpc	r25, r1
     730:	cc f3       	brlt	.-14     	; 0x724 <_Z6enablev+0x1a>
	TCNT1L = 0, TCNT1H = 0;
     732:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     736:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	PORTL &= ~(1 << E);
     73a:	eb e0       	ldi	r30, 0x0B	; 11
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	80 81       	ld	r24, Z
     740:	8f 77       	andi	r24, 0x7F	; 127
     742:	80 83       	st	Z, r24
     744:	08 95       	ret

00000746 <_Z13LCD_WriteCharc>:
/**
	* @brief set the data pin to a particular character
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	e6 e0       	ldi	r30, 0x06	; 6
     750:	f2 e0       	ldi	r31, 0x02	; 2
	int i;
	for (i = 0; i < 8; i++) {
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
     756:	c1 e0       	ldi	r28, 0x01	; 1
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	08 2f       	mov	r16, r24
     75c:	10 e0       	ldi	r17, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
     75e:	a8 e0       	ldi	r26, 0x08	; 8
     760:	b1 e0       	ldi	r27, 0x01	; 1
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
     762:	9e 01       	movw	r18, r28
     764:	04 2e       	mov	r0, r20
     766:	02 c0       	rjmp	.+4      	; 0x76c <_Z13LCD_WriteCharc+0x26>
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	0a 94       	dec	r0
     76e:	e2 f7       	brpl	.-8      	; 0x768 <_Z13LCD_WriteCharc+0x22>
     770:	20 23       	and	r18, r16
     772:	31 23       	and	r19, r17
     774:	04 2e       	mov	r0, r20
     776:	02 c0       	rjmp	.+4      	; 0x77c <_Z13LCD_WriteCharc+0x36>
     778:	35 95       	asr	r19
     77a:	27 95       	ror	r18
     77c:	0a 94       	dec	r0
     77e:	e2 f7       	brpl	.-8      	; 0x778 <_Z13LCD_WriteCharc+0x32>
     780:	21 30       	cpi	r18, 0x01	; 1
     782:	31 05       	cpc	r19, r1
     784:	59 f4       	brne	.+22     	; 0x79c <_Z13LCD_WriteCharc+0x56>
			PORTK |= (1 << dataPin[i]);
     786:	2c 91       	ld	r18, X
     788:	ce 01       	movw	r24, r28
     78a:	00 80       	ld	r0, Z
     78c:	02 c0       	rjmp	.+4      	; 0x792 <_Z13LCD_WriteCharc+0x4c>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0a 94       	dec	r0
     794:	e2 f7       	brpl	.-8      	; 0x78e <_Z13LCD_WriteCharc+0x48>
     796:	82 2b       	or	r24, r18
     798:	8c 93       	st	X, r24
     79a:	0c c0       	rjmp	.+24     	; 0x7b4 <_Z13LCD_WriteCharc+0x6e>
		} else {
			PORTK &= ~(1 << dataPin[i]);
     79c:	2c 91       	ld	r18, X
     79e:	be 01       	movw	r22, r28
     7a0:	00 80       	ld	r0, Z
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_Z13LCD_WriteCharc+0x62>
     7a4:	66 0f       	add	r22, r22
     7a6:	77 1f       	adc	r23, r23
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_Z13LCD_WriteCharc+0x5e>
     7ac:	96 2f       	mov	r25, r22
     7ae:	90 95       	com	r25
     7b0:	92 23       	and	r25, r18
     7b2:	9c 93       	st	X, r25
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	32 96       	adiw	r30, 0x02	; 2
     7ba:	48 30       	cpi	r20, 0x08	; 8
     7bc:	51 05       	cpc	r21, r1
     7be:	89 f6       	brne	.-94     	; 0x762 <_Z13LCD_WriteCharc+0x1c>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
     7c0:	a4 df       	rcall	.-184    	; 0x70a <_Z6enablev>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <_Z12clearDisplayv>:
	* @brief Clear every character on the display and returns to the first address of display
	* @param None
	* @retval None
	*/
void clearDisplay(void){
	PORTL &= ~(1 << RS);
     7cc:	eb e0       	ldi	r30, 0x0B	; 11
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 7d       	andi	r24, 0xDF	; 223
     7d4:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     7d6:	80 81       	ld	r24, Z
     7d8:	8f 7b       	andi	r24, 0xBF	; 191
     7da:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     7dc:	e8 e0       	ldi	r30, 0x08	; 8
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	80 81       	ld	r24, Z
     7e2:	8f 77       	andi	r24, 0x7F	; 127
     7e4:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     7e6:	80 81       	ld	r24, Z
     7e8:	8f 7b       	andi	r24, 0xBF	; 191
     7ea:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 7d       	andi	r24, 0xDF	; 223
     7f0:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     7f2:	80 81       	ld	r24, Z
     7f4:	8f 7e       	andi	r24, 0xEF	; 239
     7f6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
     7f8:	80 81       	ld	r24, Z
     7fa:	87 7f       	andi	r24, 0xF7	; 247
     7fc:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
     7fe:	80 81       	ld	r24, Z
     800:	8b 7f       	andi	r24, 0xFB	; 251
     802:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
     804:	80 81       	ld	r24, Z
     806:	8d 7f       	andi	r24, 0xFD	; 253
     808:	80 83       	st	Z, r24
	PORTK |= (1 << DB0);
     80a:	80 81       	ld	r24, Z
     80c:	81 60       	ori	r24, 0x01	; 1
     80e:	80 83       	st	Z, r24
	enable();
     810:	7c df       	rcall	.-264    	; 0x70a <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
     812:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     816:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}	
     81a:	a4 e8       	ldi	r26, 0x84	; 132
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e5 e8       	ldi	r30, 0x85	; 133
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	8c 91       	ld	r24, X
     824:	20 81       	ld	r18, Z
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	92 2b       	or	r25, r18
     82a:	88 3b       	cpi	r24, 0xB8	; 184
     82c:	9b 40       	sbci	r25, 0x0B	; 11
     82e:	cc f3       	brlt	.-14     	; 0x822 <_Z12clearDisplayv+0x56>
	TCNT1L = 0, TCNT1H = 0;
     830:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     834:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     838:	08 95       	ret

0000083a <_Z9SetAdressi>:
	* @retval None
	*	@note When 1-line display mode (N=LOW), DDRAM address is form 0x00 to 0x4F
	* 			In 2-line display mode (N=HIGH), DDRAM address is form 0x00 to 0x27 for first line
	*				and 0x40 to 0x67 for second line
	*/
void SetAdress(int address){
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	8c 01       	movw	r16, r24
  int i;
	PORTL &= ~(1 << RS);
     844:	eb e0       	ldi	r30, 0x0B	; 11
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	80 81       	ld	r24, Z
     84a:	8f 7d       	andi	r24, 0xDF	; 223
     84c:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     84e:	80 81       	ld	r24, Z
     850:	8f 7b       	andi	r24, 0xBF	; 191
     852:	80 83       	st	Z, r24
	PORTK |= (1 << DB7);
     854:	e8 e0       	ldi	r30, 0x08	; 8
     856:	f1 e0       	ldi	r31, 0x01	; 1
     858:	80 81       	ld	r24, Z
     85a:	80 68       	ori	r24, 0x80	; 128
     85c:	80 83       	st	Z, r24
     85e:	e6 e0       	ldi	r30, 0x06	; 6
     860:	f2 e0       	ldi	r31, 0x02	; 2
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
		if ((address & (1 << i)) >> i == 1) {
     866:	c1 e0       	ldi	r28, 0x01	; 1
     868:	d0 e0       	ldi	r29, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
     86a:	a8 e0       	ldi	r26, 0x08	; 8
     86c:	b1 e0       	ldi	r27, 0x01	; 1
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
		if ((address & (1 << i)) >> i == 1) {
     86e:	9e 01       	movw	r18, r28
     870:	04 2e       	mov	r0, r20
     872:	02 c0       	rjmp	.+4      	; 0x878 <_Z9SetAdressi+0x3e>
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	0a 94       	dec	r0
     87a:	e2 f7       	brpl	.-8      	; 0x874 <_Z9SetAdressi+0x3a>
     87c:	20 23       	and	r18, r16
     87e:	31 23       	and	r19, r17
     880:	04 2e       	mov	r0, r20
     882:	02 c0       	rjmp	.+4      	; 0x888 <_Z9SetAdressi+0x4e>
     884:	35 95       	asr	r19
     886:	27 95       	ror	r18
     888:	0a 94       	dec	r0
     88a:	e2 f7       	brpl	.-8      	; 0x884 <_Z9SetAdressi+0x4a>
     88c:	21 30       	cpi	r18, 0x01	; 1
     88e:	31 05       	cpc	r19, r1
     890:	59 f4       	brne	.+22     	; 0x8a8 <_Z9SetAdressi+0x6e>
			PORTK |= (1 << dataPin[i]);
     892:	2c 91       	ld	r18, X
     894:	ce 01       	movw	r24, r28
     896:	00 80       	ld	r0, Z
     898:	02 c0       	rjmp	.+4      	; 0x89e <_Z9SetAdressi+0x64>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <_Z9SetAdressi+0x60>
     8a2:	82 2b       	or	r24, r18
     8a4:	8c 93       	st	X, r24
     8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <_Z9SetAdressi+0x86>
		} else {
			PORTK &= ~(1 << dataPin[i]);
     8a8:	2c 91       	ld	r18, X
     8aa:	be 01       	movw	r22, r28
     8ac:	00 80       	ld	r0, Z
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_Z9SetAdressi+0x7a>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	0a 94       	dec	r0
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <_Z9SetAdressi+0x76>
     8b8:	96 2f       	mov	r25, r22
     8ba:	90 95       	com	r25
     8bc:	92 23       	and	r25, r18
     8be:	9c 93       	st	X, r25
  int i;
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	32 96       	adiw	r30, 0x02	; 2
     8c6:	47 30       	cpi	r20, 0x07	; 7
     8c8:	51 05       	cpc	r21, r1
     8ca:	89 f6       	brne	.-94     	; 0x86e <_Z9SetAdressi+0x34>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
     8cc:	1e df       	rcall	.-452    	; 0x70a <_Z6enablev>
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <_Z10returnHomev>:
	* @brief change the address of the LCD pointer to the first one
	* @param None
	* @retval None
	*/
void returnHome(void){
	PORTL &= ~(1 << RS);
     8d8:	eb e0       	ldi	r30, 0x0B	; 11
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	80 81       	ld	r24, Z
     8de:	8f 7d       	andi	r24, 0xDF	; 223
     8e0:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 7b       	andi	r24, 0xBF	; 191
     8e6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     8e8:	e8 e0       	ldi	r30, 0x08	; 8
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	80 81       	ld	r24, Z
     8ee:	8f 77       	andi	r24, 0x7F	; 127
     8f0:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     8f2:	80 81       	ld	r24, Z
     8f4:	8f 7b       	andi	r24, 0xBF	; 191
     8f6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     8f8:	80 81       	ld	r24, Z
     8fa:	8f 7d       	andi	r24, 0xDF	; 223
     8fc:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     8fe:	80 81       	ld	r24, Z
     900:	8f 7e       	andi	r24, 0xEF	; 239
     902:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
     904:	80 81       	ld	r24, Z
     906:	87 7f       	andi	r24, 0xF7	; 247
     908:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
     90a:	80 81       	ld	r24, Z
     90c:	8b 7f       	andi	r24, 0xFB	; 251
     90e:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
     910:	80 81       	ld	r24, Z
     912:	82 60       	ori	r24, 0x02	; 2
     914:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
     916:	80 81       	ld	r24, Z
     918:	8e 7f       	andi	r24, 0xFE	; 254
     91a:	80 83       	st	Z, r24
	enable();
     91c:	f6 de       	rcall	.-532    	; 0x70a <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
     91e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     922:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}
     926:	a4 e8       	ldi	r26, 0x84	; 132
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e5 e8       	ldi	r30, 0x85	; 133
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	8c 91       	ld	r24, X
     930:	20 81       	ld	r18, Z
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	92 2b       	or	r25, r18
     936:	88 3b       	cpi	r24, 0xB8	; 184
     938:	9b 40       	sbci	r25, 0x0B	; 11
     93a:	cc f3       	brlt	.-14     	; 0x92e <_Z10returnHomev+0x56>
	TCNT1L = 0, TCNT1H = 0;
     93c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     940:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     944:	08 95       	ret

00000946 <_Z9inputModev>:
	* @brief set up pins to input mode
	* @param None
	* @retval None
	*/
void inputMode(void){
	PORTL |= (1 << RS);
     946:	eb e0       	ldi	r30, 0x0B	; 11
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 81       	ld	r24, Z
     94c:	80 62       	ori	r24, 0x20	; 32
     94e:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     950:	80 81       	ld	r24, Z
     952:	8f 7b       	andi	r24, 0xBF	; 191
     954:	80 83       	st	Z, r24
     956:	08 95       	ret

00000958 <_Z15LCD_WriteStringPc>:
/**
	* @brief send one by one all the character of the string to LCD_WriteChar()
  * @param string: String to be printed on the LCD
	* @retval None
	*/
void LCD_WriteString(char * string){
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	8c 01       	movw	r16, r24
	int i;
	inputMode(); /************ NOT sure we need this */
     962:	f1 df       	rcall	.-30     	; 0x946 <_Z9inputModev>
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
     964:	f8 01       	movw	r30, r16
     966:	80 81       	ld	r24, Z
     968:	81 11       	cpse	r24, r1
     96a:	09 c0       	rjmp	.+18     	; 0x97e <_Z15LCD_WriteStringPc+0x26>
     96c:	0e c0       	rjmp	.+28     	; 0x98a <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
     96e:	eb de       	rcall	.-554    	; 0x746 <_Z13LCD_WriteCharc>
void LCD_WriteString(char * string){
	int i;
	inputMode(); /************ NOT sure we need this */
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
     970:	c0 17       	cp	r28, r16
     972:	d1 07       	cpc	r29, r17
     974:	51 f0       	breq	.+20     	; 0x98a <_Z15LCD_WriteStringPc+0x32>
     976:	89 91       	ld	r24, Y+
     978:	81 11       	cpse	r24, r1
     97a:	f9 cf       	rjmp	.-14     	; 0x96e <_Z15LCD_WriteStringPc+0x16>
     97c:	06 c0       	rjmp	.+12     	; 0x98a <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
     97e:	e3 de       	rcall	.-570    	; 0x746 <_Z13LCD_WriteCharc>
     980:	e8 01       	movw	r28, r16
     982:	21 96       	adiw	r28, 0x01	; 1
     984:	00 5f       	subi	r16, 0xF0	; 240
     986:	1f 4f       	sbci	r17, 0xFF	; 255
     988:	f6 cf       	rjmp	.-20     	; 0x976 <_Z15LCD_WriteStringPc+0x1e>
	}
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <_Z6turnOnv>:
	* @brief Turn on the display
	* @param None
	* @retval None
	*/
void turnOn(void){
	PORTL &= ~(1 << RS);
     994:	eb e0       	ldi	r30, 0x0B	; 11
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 81       	ld	r24, Z
     99a:	8f 7d       	andi	r24, 0xDF	; 223
     99c:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     99e:	80 81       	ld	r24, Z
     9a0:	8f 7b       	andi	r24, 0xBF	; 191
     9a2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     9a4:	e8 e0       	ldi	r30, 0x08	; 8
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 77       	andi	r24, 0x7F	; 127
     9ac:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     9ae:	80 81       	ld	r24, Z
     9b0:	8f 7b       	andi	r24, 0xBF	; 191
     9b2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     9b4:	80 81       	ld	r24, Z
     9b6:	8f 7d       	andi	r24, 0xDF	; 223
     9b8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     9ba:	80 81       	ld	r24, Z
     9bc:	8f 7e       	andi	r24, 0xEF	; 239
     9be:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
     9c0:	80 81       	ld	r24, Z
     9c2:	88 60       	ori	r24, 0x08	; 8
     9c4:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
     9c6:	80 81       	ld	r24, Z
     9c8:	84 60       	ori	r24, 0x04	; 4
     9ca:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
     9cc:	80 81       	ld	r24, Z
     9ce:	8d 7f       	andi	r24, 0xFD	; 253
     9d0:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
     9d2:	80 81       	ld	r24, Z
     9d4:	8e 7f       	andi	r24, 0xFE	; 254
     9d6:	80 83       	st	Z, r24
	enable();
     9d8:	98 ce       	rjmp	.-720    	; 0x70a <_Z6enablev>
     9da:	08 95       	ret

000009dc <_Z11functionSetv>:
	* @brief Set up length of data bus, and size of display
	* @param None
	* @retval None
	*/
void functionSet(void){
	PORTL &= ~(1 << RS);
     9dc:	eb e0       	ldi	r30, 0x0B	; 11
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	80 81       	ld	r24, Z
     9e2:	8f 7d       	andi	r24, 0xDF	; 223
     9e4:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     9e6:	80 81       	ld	r24, Z
     9e8:	8f 7b       	andi	r24, 0xBF	; 191
     9ea:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     9ec:	e8 e0       	ldi	r30, 0x08	; 8
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	80 81       	ld	r24, Z
     9f2:	8f 77       	andi	r24, 0x7F	; 127
     9f4:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     9f6:	80 81       	ld	r24, Z
     9f8:	8f 7b       	andi	r24, 0xBF	; 191
     9fa:	80 83       	st	Z, r24
	PORTK |= (1 << DB5);
     9fc:	80 81       	ld	r24, Z
     9fe:	80 62       	ori	r24, 0x20	; 32
     a00:	80 83       	st	Z, r24
	PORTK |= (1 << DB4);
     a02:	80 81       	ld	r24, Z
     a04:	80 61       	ori	r24, 0x10	; 16
     a06:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
     a08:	80 81       	ld	r24, Z
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
     a0e:	80 81       	ld	r24, Z
     a10:	8b 7f       	andi	r24, 0xFB	; 251
     a12:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
     a14:	80 81       	ld	r24, Z
     a16:	8d 7f       	andi	r24, 0xFD	; 253
     a18:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
     a1a:	80 81       	ld	r24, Z
     a1c:	8e 7f       	andi	r24, 0xFE	; 254
     a1e:	80 83       	st	Z, r24
	enable();
     a20:	74 ce       	rjmp	.-792    	; 0x70a <_Z6enablev>
     a22:	08 95       	ret

00000a24 <_Z9entryModev>:
	* @brief set up the entry mode of the display
	* @param None
	* @retval None
	*/
void entryMode(void){
	PORTL &= ~(1 << RS);
     a24:	eb e0       	ldi	r30, 0x0B	; 11
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	80 81       	ld	r24, Z
     a2a:	8f 7d       	andi	r24, 0xDF	; 223
     a2c:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     a2e:	80 81       	ld	r24, Z
     a30:	8f 7b       	andi	r24, 0xBF	; 191
     a32:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     a34:	e8 e0       	ldi	r30, 0x08	; 8
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	80 81       	ld	r24, Z
     a3a:	8f 77       	andi	r24, 0x7F	; 127
     a3c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     a3e:	80 81       	ld	r24, Z
     a40:	8f 7b       	andi	r24, 0xBF	; 191
     a42:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     a44:	80 81       	ld	r24, Z
     a46:	8f 7d       	andi	r24, 0xDF	; 223
     a48:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 7e       	andi	r24, 0xEF	; 239
     a4e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
     a50:	80 81       	ld	r24, Z
     a52:	87 7f       	andi	r24, 0xF7	; 247
     a54:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
     a56:	80 81       	ld	r24, Z
     a58:	84 60       	ori	r24, 0x04	; 4
     a5a:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
     a5c:	80 81       	ld	r24, Z
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
     a62:	80 81       	ld	r24, Z
     a64:	8e 7f       	andi	r24, 0xFE	; 254
     a66:	80 83       	st	Z, r24
	enable();
     a68:	50 ce       	rjmp	.-864    	; 0x70a <_Z6enablev>
     a6a:	08 95       	ret

00000a6c <_Z7initLCDv>:
	* @param None
	* @retval None
	*/
void initLCD(void){
	//init timer for LCD control. Counts up every 0.5 us (1/ (16M/8))
	TCCR1B |= (1 << CS11); /*prescaler 8*/
     a6c:	e1 e8       	ldi	r30, 0x81	; 129
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 83       	st	Z, r24
	//set pins as outputs
	DDRK |= (1 << DDK7) | (1 << DDK6) | (1 << DDK5) | (1 << DDK4) | (1 << DDK3) | (1 << DDK2) | (1 << DDK1) | (1 << DDK0);
     a76:	e7 e0       	ldi	r30, 0x07	; 7
     a78:	f1 e0       	ldi	r31, 0x01	; 1
     a7a:	80 81       	ld	r24, Z
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	80 83       	st	Z, r24
	DDRL |= (1 << DDL7) | (1 << DDL6) | (1 << DDL5);
     a80:	ea e0       	ldi	r30, 0x0A	; 10
     a82:	f1 e0       	ldi	r31, 0x01	; 1
     a84:	80 81       	ld	r24, Z
     a86:	80 6e       	ori	r24, 0xE0	; 224
     a88:	80 83       	st	Z, r24
	clearDisplay();
     a8a:	a0 de       	rcall	.-704    	; 0x7cc <_Z12clearDisplayv>
	turnOn();
     a8c:	83 df       	rcall	.-250    	; 0x994 <_Z6turnOnv>
	functionSet();
     a8e:	a6 df       	rcall	.-180    	; 0x9dc <_Z11functionSetv>
	entryMode();
     a90:	c9 df       	rcall	.-110    	; 0xa24 <_Z9entryModev>
	returnHome();
     a92:	22 cf       	rjmp	.-444    	; 0x8d8 <_Z10returnHomev>
     a94:	08 95       	ret

00000a96 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void  WS2812::ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi,uint8_t *port, uint8_t *portreg)
{
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	d8 01       	movw	r26, r16
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo = ~maskhi & *port;
     a9e:	8c 91       	ld	r24, X
     aa0:	92 2f       	mov	r25, r18
     aa2:	90 95       	com	r25
     aa4:	98 23       	and	r25, r24
  maskhi |= *port;
     aa6:	28 2b       	or	r18, r24
  sreg_prev=SREG;
     aa8:	cf b7       	in	r28, 0x3f	; 63
  cli();  
     aaa:	f8 94       	cli

  while (datlen--) {
     aac:	41 15       	cp	r20, r1
     aae:	51 05       	cpc	r21, r1
     ab0:	a9 f0       	breq	.+42     	; 0xadc <skipone55+0xc>
     ab2:	fb 01       	movw	r30, r22
     ab4:	64 0f       	add	r22, r20
     ab6:	75 1f       	adc	r23, r21
    curbyte=*data++;
     ab8:	81 91       	ld	r24, Z+
    "       dec   %0    \n\t"    //  '1' [+4] '0' [+3]
    "       brne  loop%=\n\t"    //  '1' [+5] '0' [+4]
    :	"=&d" (ctr)
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
     aba:	38 e0       	ldi	r19, 0x08	; 8

00000abc <loop55>:
     abc:	2c 93       	st	X, r18
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <loop55+0x4>
     ac0:	87 ff       	sbrs	r24, 7
     ac2:	9c 93       	st	X, r25
     ac4:	88 0f       	add	r24, r24
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <loop55+0xc>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <loop55+0xe>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <loop55+0x10>
     acc:	08 f4       	brcc	.+2      	; 0xad0 <skipone55>
     ace:	9c 93       	st	X, r25

00000ad0 <skipone55>:
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <skipone55+0x2>
     ad2:	3a 95       	dec	r19
     ad4:	99 f7       	brne	.-26     	; 0xabc <loop55>
  masklo = ~maskhi & *port;
  maskhi |= *port;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     ad6:	e6 17       	cp	r30, r22
     ad8:	f7 07       	cpc	r31, r23
     ada:	71 f7       	brne	.-36     	; 0xab8 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_+0x22>
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     adc:	cf bf       	out	0x3f, r28	; 63
}
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <main>:
#include "I2C.h"
#include "IMU.h"
#include "WS2812.h"

int main()
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	e6 97       	sbiw	r28, 0x36	; 54
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
	
	
	
	//initialize LCD
	initLCD(); 		// configure LCD
     afa:	b8 df       	rcall	.-144    	; 0xa6c <_Z7initLCDv>
	//char* buffers for printing stuff on the LCD
	char buffer[20];
	//create ESC object
	Esc escFL(FL), escBL(BL),escBR(BR), escFR(FR);
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	ce 01       	movw	r24, r28
     b02:	c5 96       	adiw	r24, 0x35	; 53
     b04:	18 db       	rcall	.-2512   	; 0x136 <_ZN3EscC1Ei>
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	ce 01       	movw	r24, r28
     b0c:	c3 96       	adiw	r24, 0x33	; 51
     b0e:	13 db       	rcall	.-2522   	; 0x136 <_ZN3EscC1Ei>
     b10:	64 e0       	ldi	r22, 0x04	; 4
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	ce 01       	movw	r24, r28
     b16:	c1 96       	adiw	r24, 0x31	; 49
     b18:	0e db       	rcall	.-2532   	; 0x136 <_ZN3EscC1Ei>
     b1a:	63 e0       	ldi	r22, 0x03	; 3
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	ce 01       	movw	r24, r28
     b20:	8f 96       	adiw	r24, 0x2f	; 47
     b22:	09 db       	rcall	.-2542   	; 0x136 <_ZN3EscC1Ei>
	// initialize ESC
	initializeESC();
     b24:	0c db       	rcall	.-2536   	; 0x13e <_Z13initializeESCv>
	////clearDisplay();
	////LCD_WriteString("IMU");
	////_delay_ms(1000);
	
	//LED_Strip
	WS2812 LEDFRT(1, FRT); // 1 LED
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	ce 01       	movw	r24, r28
     b2e:	82 96       	adiw	r24, 0x22	; 34
     b30:	a3 d0       	rcall	.+326    	; 0xc78 <_ZN6WS2812C1Ejh>
	WS2812 LEDFRB(1, FRB); // 1 LED
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	ce 01       	movw	r24, r28
     b3a:	45 96       	adiw	r24, 0x15	; 21
     b3c:	9d d0       	rcall	.+314    	; 0xc78 <_ZN6WS2812C1Ejh>
	cRGB valueFRT;
	cRGB valueFRB;
	//initialize INT
	initializeInterrupt();
     b3e:	85 db       	rcall	.-2294   	; 0x24a <_Z19initializeInterruptv>
	//initialize Radio Controller counter
	initializecounterPWMread();
     b40:	95 db       	rcall	.-2262   	; 0x26c <_Z24initializecounterPWMreadv>
	
	int i = 0;
     b42:	c1 2c       	mov	r12, r1
     b44:	d1 2c       	mov	r13, r1
			escBL.set(ch_3_pw);
			escBR.set(ch_3_pw);
			escFR.set(ch_3_pw);

			clearDisplay();
			sprintf(buffer, "%u    %u     ", ch_1_pw, ch_2_pw);
     b46:	0f 2e       	mov	r0, r31
     b48:	f6 e1       	ldi	r31, 0x16	; 22
     b4a:	ef 2e       	mov	r14, r31
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	ff 2e       	mov	r15, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5f       	subi	r16, 0xFF	; 255
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
		//{
			//button_rising = false;
		//}
		//else
		//{
			escFL.set(ch_3_pw);
     b58:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <ch_3_pw>
     b5c:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <ch_3_pw+0x1>
     b60:	ce 01       	movw	r24, r28
     b62:	c5 96       	adiw	r24, 0x35	; 53
     b64:	2d db       	rcall	.-2470   	; 0x1c0 <_ZN3Esc3setEj>
			escBL.set(ch_3_pw);
     b66:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <ch_3_pw>
     b6a:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <ch_3_pw+0x1>
     b6e:	ce 01       	movw	r24, r28
     b70:	c3 96       	adiw	r24, 0x33	; 51
     b72:	26 db       	rcall	.-2484   	; 0x1c0 <_ZN3Esc3setEj>
			escBR.set(ch_3_pw);
     b74:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <ch_3_pw>
     b78:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <ch_3_pw+0x1>
     b7c:	ce 01       	movw	r24, r28
     b7e:	c1 96       	adiw	r24, 0x31	; 49
     b80:	1f db       	rcall	.-2498   	; 0x1c0 <_ZN3Esc3setEj>
			escFR.set(ch_3_pw);
     b82:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <ch_3_pw>
     b86:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <ch_3_pw+0x1>
     b8a:	ce 01       	movw	r24, r28
     b8c:	8f 96       	adiw	r24, 0x2f	; 47
     b8e:	18 db       	rcall	.-2512   	; 0x1c0 <_ZN3Esc3setEj>

			clearDisplay();
     b90:	1d de       	rcall	.-966    	; 0x7cc <_Z12clearDisplayv>
			sprintf(buffer, "%u    %u     ", ch_1_pw, ch_2_pw);
     b92:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <ch_2_pw+0x1>
     b96:	8f 93       	push	r24
     b98:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <ch_2_pw>
     b9c:	8f 93       	push	r24
     b9e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <ch_1_pw+0x1>
     ba2:	8f 93       	push	r24
     ba4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <ch_1_pw>
     ba8:	8f 93       	push	r24
     baa:	ff 92       	push	r15
     bac:	ef 92       	push	r14
     bae:	1f 93       	push	r17
     bb0:	0f 93       	push	r16
     bb2:	94 d2       	rcall	.+1320   	; 0x10dc <sprintf>
			LCD_WriteString(buffer);
     bb4:	c8 01       	movw	r24, r16
     bb6:	d0 de       	rcall	.-608    	; 0x958 <_Z15LCD_WriteStringPc>
			SetAdress(64);
     bb8:	80 e4       	ldi	r24, 0x40	; 64
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	3e de       	rcall	.-900    	; 0x83a <_Z9SetAdressi>
			sprintf(buffer, "%u    %u     ", ch_3_pw, ch_4_pw);
     bbe:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <ch_4_pw+0x1>
     bc2:	8f 93       	push	r24
     bc4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ch_4_pw>
     bc8:	8f 93       	push	r24
     bca:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <ch_3_pw+0x1>
     bce:	8f 93       	push	r24
     bd0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ch_3_pw>
     bd4:	8f 93       	push	r24
     bd6:	ff 92       	push	r15
     bd8:	ef 92       	push	r14
     bda:	1f 93       	push	r17
     bdc:	0f 93       	push	r16
     bde:	7e d2       	rcall	.+1276   	; 0x10dc <sprintf>
			LCD_WriteString(buffer);
     be0:	c8 01       	movw	r24, r16
     be2:	ba de       	rcall	.-652    	; 0x958 <_Z15LCD_WriteStringPc>
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	81 ee       	ldi	r24, 0xE1	; 225
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	80 40       	sbci	r24, 0x00	; 0
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <main+0x104>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0x10e>
     bf4:	00 00       	nop
			_delay_ms(100);
			
			i++;
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	c2 1a       	sub	r12, r18
     bfa:	d2 0a       	sbc	r13, r18
			if(i == 5)
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	c9 16       	cp	r12, r25
     c0a:	d1 04       	cpc	r13, r1
     c0c:	b9 f4       	brne	.+46     	; 0xc3c <main+0x156>
			{
				valueFRT.b = 255; valueFRT.g = 0; valueFRT.r = 0; // RGB Value -> Blue
				valueFRB.b = 0; valueFRB.g = 255; valueFRB.r = 0; // RGB Value -> Blue
				LEDFRT.set_crgb_at(0, valueFRT); // Set value at LED found at index 0
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4f ef       	ldi	r20, 0xFF	; 255
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	ce 01       	movw	r24, r28
     c1a:	82 96       	adiw	r24, 0x22	; 34
     c1c:	43 d0       	rcall	.+134    	; 0xca4 <_ZN6WS281211set_crgb_atEj4cRGB>
				LEDFRB.set_crgb_at(0, valueFRB); // Set value at LED found at index 0
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	ce 01       	movw	r24, r28
     c2a:	45 96       	adiw	r24, 0x15	; 21
     c2c:	3b d0       	rcall	.+118    	; 0xca4 <_ZN6WS281211set_crgb_atEj4cRGB>
				LEDFRT.sync(); // Sends the value to the LED
     c2e:	ce 01       	movw	r24, r28
     c30:	82 96       	adiw	r24, 0x22	; 34
     c32:	fa d0       	rcall	.+500    	; 0xe28 <_ZN6WS28124syncEv>
				LEDFRB.sync(); // Sends the value to the LED				
     c34:	ce 01       	movw	r24, r28
     c36:	45 96       	adiw	r24, 0x15	; 21
     c38:	f7 d0       	rcall	.+494    	; 0xe28 <_ZN6WS28124syncEv>
     c3a:	8e cf       	rjmp	.-228    	; 0xb58 <main+0x72>
			}

			else if(i == 10)
     c3c:	2a e0       	ldi	r18, 0x0A	; 10
     c3e:	c2 16       	cp	r12, r18
     c40:	d1 04       	cpc	r13, r1
     c42:	09 f0       	breq	.+2      	; 0xc46 <main+0x160>
     c44:	89 cf       	rjmp	.-238    	; 0xb58 <main+0x72>
			{
				valueFRT.b = 0; valueFRT.g = 0; valueFRT.r = 0; // RGB Value -> Blue
				valueFRB.b = 0; valueFRB.g = 0; valueFRB.r = 0; // RGB Value -> Blue
				LEDFRT.set_crgb_at(0, valueFRT); // Set value at LED found at index 0
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	ce 01       	movw	r24, r28
     c52:	82 96       	adiw	r24, 0x22	; 34
     c54:	27 d0       	rcall	.+78     	; 0xca4 <_ZN6WS281211set_crgb_atEj4cRGB>
				LEDFRB.set_crgb_at(0, valueFRB); // Set value at LED found at index 0
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	ce 01       	movw	r24, r28
     c62:	45 96       	adiw	r24, 0x15	; 21
     c64:	1f d0       	rcall	.+62     	; 0xca4 <_ZN6WS281211set_crgb_atEj4cRGB>
				LEDFRT.sync(); // Sends the value to the LED
     c66:	ce 01       	movw	r24, r28
     c68:	82 96       	adiw	r24, 0x22	; 34
     c6a:	de d0       	rcall	.+444    	; 0xe28 <_ZN6WS28124syncEv>
				LEDFRB.sync(); // Sends the value to the LED
     c6c:	ce 01       	movw	r24, r28
     c6e:	45 96       	adiw	r24, 0x15	; 21
     c70:	db d0       	rcall	.+438    	; 0xe28 <_ZN6WS28124syncEv>
				i = 0;
     c72:	c1 2c       	mov	r12, r1
     c74:	d1 2c       	mov	r13, r1
     c76:	70 cf       	rjmp	.-288    	; 0xb58 <main+0x72>

00000c78 <_ZN6WS2812C1Ejh>:
	offsetGreen = 2;
}
#endif

WS2812::~WS2812() {
	free(pixels);
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
     c7e:	79 83       	std	Y+1, r23	; 0x01
     c80:	68 83       	st	Y, r22
     c82:	4c 87       	std	Y+12, r20	; 0x0c
     c84:	cb 01       	movw	r24, r22
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	86 0f       	add	r24, r22
     c8c:	97 1f       	adc	r25, r23
     c8e:	f9 d0       	rcall	.+498    	; 0xe82 <malloc>
     c90:	9b 83       	std	Y+3, r25	; 0x03
     c92:	8a 83       	std	Y+2, r24	; 0x02
     c94:	1d 82       	std	Y+5, r1	; 0x05
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	8c 83       	std	Y+4, r24	; 0x04
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	8e 83       	std	Y+6, r24	; 0x06
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <_ZN6WS281211set_crgb_atEj4cRGB>:
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
     caa:	88 81       	ld	r24, Y
     cac:	99 81       	ldd	r25, Y+1	; 0x01
     cae:	68 17       	cp	r22, r24
     cb0:	79 07       	cpc	r23, r25
     cb2:	f8 f4       	brcc	.+62     	; 0xcf2 <_ZN6WS281211set_crgb_atEj4cRGB+0x4e>
     cb4:	fb 01       	movw	r30, r22
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	6e 0f       	add	r22, r30
     cbc:	7f 1f       	adc	r23, r31
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	aa 81       	ldd	r26, Y+2	; 0x02
     cc2:	bb 81       	ldd	r27, Y+3	; 0x03
     cc4:	a6 0f       	add	r26, r22
     cc6:	b7 1f       	adc	r27, r23
     cc8:	a8 0f       	add	r26, r24
     cca:	b1 1d       	adc	r27, r1
     ccc:	3c 93       	st	X, r19
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	aa 81       	ldd	r26, Y+2	; 0x02
     cd2:	bb 81       	ldd	r27, Y+3	; 0x03
     cd4:	a6 0f       	add	r26, r22
     cd6:	b7 1f       	adc	r27, r23
     cd8:	a8 0f       	add	r26, r24
     cda:	b1 1d       	adc	r27, r1
     cdc:	2c 93       	st	X, r18
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	e6 0f       	add	r30, r22
     ce6:	f7 1f       	adc	r31, r23
     ce8:	e8 0f       	add	r30, r24
     cea:	f1 1d       	adc	r31, r1
     cec:	40 83       	st	Z, r20
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <_ZN6WS281211set_crgb_atEj4cRGB+0x50>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <_ZN6WS281211setAsOutputEv>:
	
}


void WS2812::setAsOutput()
{
     cfa:	dc 01       	movw	r26, r24
	//seem to have problems with port F, except for F3..., can't do shit
	switch (stripPosition1)
     cfc:	1c 96       	adiw	r26, 0x0c	; 12
     cfe:	4c 91       	ld	r20, X
     d00:	1c 97       	sbiw	r26, 0x0c	; 12
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	48 30       	cpi	r20, 0x08	; 8
     d06:	51 05       	cpc	r21, r1
     d08:	08 f0       	brcs	.+2      	; 0xd0c <_ZN6WS281211setAsOutputEv+0x12>
     d0a:	8d c0       	rjmp	.+282    	; 0xe26 <_ZN6WS281211setAsOutputEv+0x12c>
     d0c:	fa 01       	movw	r30, r20
     d0e:	88 27       	eor	r24, r24
     d10:	ee 58       	subi	r30, 0x8E	; 142
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	8f 4f       	sbci	r24, 0xFF	; 255
     d16:	ad c0       	rjmp	.+346    	; 0xe72 <__tablejump2__>
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     d18:	80 e4       	ldi	r24, 0x40	; 64
     d1a:	1b 96       	adiw	r26, 0x0b	; 11
     d1c:	8c 93       	st	X, r24
     d1e:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     d20:	85 e2       	ldi	r24, 0x25	; 37
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	18 96       	adiw	r26, 0x08	; 8
     d26:	9c 93       	st	X, r25
     d28:	8e 93       	st	-X, r24
     d2a:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     d2c:	84 e2       	ldi	r24, 0x24	; 36
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	1a 96       	adiw	r26, 0x0a	; 10
     d32:	9c 93       	st	X, r25
     d34:	8e 93       	st	-X, r24
     d36:	19 97       	sbiw	r26, 0x09	; 9
     d38:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     d3a:	80 e8       	ldi	r24, 0x80	; 128
     d3c:	1b 96       	adiw	r26, 0x0b	; 11
     d3e:	8c 93       	st	X, r24
     d40:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     d42:	85 e2       	ldi	r24, 0x25	; 37
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	18 96       	adiw	r26, 0x08	; 8
     d48:	9c 93       	st	X, r25
     d4a:	8e 93       	st	-X, r24
     d4c:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     d4e:	84 e2       	ldi	r24, 0x24	; 36
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	1a 96       	adiw	r26, 0x0a	; 10
     d54:	9c 93       	st	X, r25
     d56:	8e 93       	st	-X, r24
     d58:	19 97       	sbiw	r26, 0x09	; 9
     d5a:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	1b 96       	adiw	r26, 0x0b	; 11
     d60:	8c 93       	st	X, r24
     d62:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	18 96       	adiw	r26, 0x08	; 8
     d6a:	9c 93       	st	X, r25
     d6c:	8e 93       	st	-X, r24
     d6e:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	1a 96       	adiw	r26, 0x0a	; 10
     d76:	9c 93       	st	X, r25
     d78:	8e 93       	st	-X, r24
     d7a:	19 97       	sbiw	r26, 0x09	; 9
     d7c:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     d7e:	80 e4       	ldi	r24, 0x40	; 64
     d80:	1b 96       	adiw	r26, 0x0b	; 11
     d82:	8c 93       	st	X, r24
     d84:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     d86:	85 e0       	ldi	r24, 0x05	; 5
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	18 96       	adiw	r26, 0x08	; 8
     d8c:	9c 93       	st	X, r25
     d8e:	8e 93       	st	-X, r24
     d90:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	1a 96       	adiw	r26, 0x0a	; 10
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	19 97       	sbiw	r26, 0x09	; 9
     d9e:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	1b 96       	adiw	r26, 0x0b	; 11
     da4:	8c 93       	st	X, r24
     da6:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     da8:	81 e3       	ldi	r24, 0x31	; 49
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	18 96       	adiw	r26, 0x08	; 8
     dae:	9c 93       	st	X, r25
     db0:	8e 93       	st	-X, r24
     db2:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     db4:	80 e3       	ldi	r24, 0x30	; 48
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	1a 96       	adiw	r26, 0x0a	; 10
     dba:	9c 93       	st	X, r25
     dbc:	8e 93       	st	-X, r24
     dbe:	19 97       	sbiw	r26, 0x09	; 9
     dc0:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	1b 96       	adiw	r26, 0x0b	; 11
     dc6:	8c 93       	st	X, r24
     dc8:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     dca:	81 e3       	ldi	r24, 0x31	; 49
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	18 96       	adiw	r26, 0x08	; 8
     dd0:	9c 93       	st	X, r25
     dd2:	8e 93       	st	-X, r24
     dd4:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     dd6:	80 e3       	ldi	r24, 0x30	; 48
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	1a 96       	adiw	r26, 0x0a	; 10
     ddc:	9c 93       	st	X, r25
     dde:	8e 93       	st	-X, r24
     de0:	19 97       	sbiw	r26, 0x09	; 9
     de2:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	1b 96       	adiw	r26, 0x0b	; 11
     de8:	8c 93       	st	X, r24
     dea:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	18 96       	adiw	r26, 0x08	; 8
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
     df6:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	1a 96       	adiw	r26, 0x0a	; 10
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
     e02:	19 97       	sbiw	r26, 0x09	; 9
     e04:	08 95       	ret
}

void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	1b 96       	adiw	r26, 0x0b	; 11
     e0a:	8c 93       	st	X, r24
     e0c:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	18 96       	adiw	r26, 0x08	; 8
     e14:	9c 93       	st	X, r25
     e16:	8e 93       	st	-X, r24
     e18:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	1a 96       	adiw	r26, 0x0a	; 10
     e20:	9c 93       	st	X, r25
     e22:	8e 93       	st	-X, r24
     e24:	19 97       	sbiw	r26, 0x09	; 9
     e26:	08 95       	ret

00000e28 <_ZN6WS28124syncEv>:
		return 0;
	}
	return 1;
}

void WS2812::sync() {
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
	setAsOutput();
     e36:	61 df       	rcall	.-318    	; 0xcfa <_ZN6WS281211setAsOutputEv>
	*ws2812_port_reg |= pinMask; // Enable DDR
     e38:	e9 85       	ldd	r30, Y+9	; 0x09
     e3a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e3c:	90 81       	ld	r25, Z
     e3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e40:	89 2b       	or	r24, r25
     e42:	80 83       	st	Z, r24
	ws2812_sendarray_mask(pixels,3*count_led,pinMask,(uint8_t*) ws2812_port,(uint8_t*) ws2812_port_reg );	
     e44:	e9 84       	ldd	r14, Y+9	; 0x09
     e46:	fa 84       	ldd	r15, Y+10	; 0x0a
     e48:	0f 81       	ldd	r16, Y+7	; 0x07
     e4a:	18 85       	ldd	r17, Y+8	; 0x08
     e4c:	48 81       	ld	r20, Y
     e4e:	59 81       	ldd	r21, Y+1	; 0x01
     e50:	ca 01       	movw	r24, r20
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	48 0f       	add	r20, r24
     e58:	59 1f       	adc	r21, r25
     e5a:	6a 81       	ldd	r22, Y+2	; 0x02
     e5c:	7b 81       	ldd	r23, Y+3	; 0x03
     e5e:	2b 85       	ldd	r18, Y+11	; 0x0b
     e60:	ce 01       	movw	r24, r28
     e62:	19 de       	rcall	.-974    	; 0xa96 <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <__tablejump2__>:
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	88 1f       	adc	r24, r24
     e78:	8b bf       	out	0x3b, r24	; 59
     e7a:	07 90       	elpm	r0, Z+
     e7c:	f6 91       	elpm	r31, Z
     e7e:	e0 2d       	mov	r30, r0
     e80:	19 94       	eijmp

00000e82 <malloc>:
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	91 05       	cpc	r25, r1
     e8a:	10 f4       	brcc	.+4      	; 0xe90 <malloc+0xe>
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <__flp>
     e94:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <__flp+0x1>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	30 97       	sbiw	r30, 0x00	; 0
     ea2:	11 f1       	breq	.+68     	; 0xee8 <malloc+0x66>
     ea4:	40 81       	ld	r20, Z
     ea6:	51 81       	ldd	r21, Z+1	; 0x01
     ea8:	48 17       	cp	r20, r24
     eaa:	59 07       	cpc	r21, r25
     eac:	c0 f0       	brcs	.+48     	; 0xede <malloc+0x5c>
     eae:	48 17       	cp	r20, r24
     eb0:	59 07       	cpc	r21, r25
     eb2:	61 f4       	brne	.+24     	; 0xecc <malloc+0x4a>
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	20 97       	sbiw	r28, 0x00	; 0
     eba:	19 f0       	breq	.+6      	; 0xec2 <malloc+0x40>
     ebc:	9b 83       	std	Y+3, r25	; 0x03
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	2b c0       	rjmp	.+86     	; 0xf18 <malloc+0x96>
     ec2:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <__flp+0x1>
     ec6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <__flp>
     eca:	26 c0       	rjmp	.+76     	; 0xf18 <malloc+0x96>
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	19 f0       	breq	.+6      	; 0xed8 <malloc+0x56>
     ed2:	42 17       	cp	r20, r18
     ed4:	53 07       	cpc	r21, r19
     ed6:	18 f4       	brcc	.+6      	; 0xede <malloc+0x5c>
     ed8:	9a 01       	movw	r18, r20
     eda:	be 01       	movw	r22, r28
     edc:	df 01       	movw	r26, r30
     ede:	ef 01       	movw	r28, r30
     ee0:	02 80       	ldd	r0, Z+2	; 0x02
     ee2:	f3 81       	ldd	r31, Z+3	; 0x03
     ee4:	e0 2d       	mov	r30, r0
     ee6:	dc cf       	rjmp	.-72     	; 0xea0 <malloc+0x1e>
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	09 f1       	breq	.+66     	; 0xf30 <malloc+0xae>
     eee:	28 1b       	sub	r18, r24
     ef0:	39 0b       	sbc	r19, r25
     ef2:	24 30       	cpi	r18, 0x04	; 4
     ef4:	31 05       	cpc	r19, r1
     ef6:	90 f4       	brcc	.+36     	; 0xf1c <malloc+0x9a>
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	8d 91       	ld	r24, X+
     efc:	9c 91       	ld	r25, X
     efe:	13 97       	sbiw	r26, 0x03	; 3
     f00:	61 15       	cp	r22, r1
     f02:	71 05       	cpc	r23, r1
     f04:	21 f0       	breq	.+8      	; 0xf0e <malloc+0x8c>
     f06:	fb 01       	movw	r30, r22
     f08:	93 83       	std	Z+3, r25	; 0x03
     f0a:	82 83       	std	Z+2, r24	; 0x02
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <malloc+0x94>
     f0e:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <__flp+0x1>
     f12:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <__flp>
     f16:	fd 01       	movw	r30, r26
     f18:	32 96       	adiw	r30, 0x02	; 2
     f1a:	44 c0       	rjmp	.+136    	; 0xfa4 <malloc+0x122>
     f1c:	fd 01       	movw	r30, r26
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	81 93       	st	Z+, r24
     f24:	91 93       	st	Z+, r25
     f26:	22 50       	subi	r18, 0x02	; 2
     f28:	31 09       	sbc	r19, r1
     f2a:	2d 93       	st	X+, r18
     f2c:	3c 93       	st	X, r19
     f2e:	3a c0       	rjmp	.+116    	; 0xfa4 <malloc+0x122>
     f30:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
     f34:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
     f38:	23 2b       	or	r18, r19
     f3a:	41 f4       	brne	.+16     	; 0xf4c <malloc+0xca>
     f3c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     f40:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     f44:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <__brkval+0x1>
     f48:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <__brkval>
     f4c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     f50:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	41 f4       	brne	.+16     	; 0xf6a <malloc+0xe8>
     f5a:	2d b7       	in	r18, 0x3d	; 61
     f5c:	3e b7       	in	r19, 0x3e	; 62
     f5e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     f62:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     f66:	24 1b       	sub	r18, r20
     f68:	35 0b       	sbc	r19, r21
     f6a:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <__brkval>
     f6e:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <__brkval+0x1>
     f72:	e2 17       	cp	r30, r18
     f74:	f3 07       	cpc	r31, r19
     f76:	a0 f4       	brcc	.+40     	; 0xfa0 <malloc+0x11e>
     f78:	2e 1b       	sub	r18, r30
     f7a:	3f 0b       	sbc	r19, r31
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	78 f0       	brcs	.+30     	; 0xfa0 <malloc+0x11e>
     f82:	ac 01       	movw	r20, r24
     f84:	4e 5f       	subi	r20, 0xFE	; 254
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	24 17       	cp	r18, r20
     f8a:	35 07       	cpc	r19, r21
     f8c:	48 f0       	brcs	.+18     	; 0xfa0 <malloc+0x11e>
     f8e:	4e 0f       	add	r20, r30
     f90:	5f 1f       	adc	r21, r31
     f92:	50 93 44 02 	sts	0x0244, r21	; 0x800244 <__brkval+0x1>
     f96:	40 93 43 02 	sts	0x0243, r20	; 0x800243 <__brkval>
     f9a:	81 93       	st	Z+, r24
     f9c:	91 93       	st	Z+, r25
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <malloc+0x122>
     fa0:	e0 e0       	ldi	r30, 0x00	; 0
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	cf 01       	movw	r24, r30
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <free>:
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	09 f4       	brne	.+2      	; 0xfba <free+0xe>
     fb8:	8c c0       	rjmp	.+280    	; 0x10d2 <free+0x126>
     fba:	fc 01       	movw	r30, r24
     fbc:	32 97       	sbiw	r30, 0x02	; 2
     fbe:	13 82       	std	Z+3, r1	; 0x03
     fc0:	12 82       	std	Z+2, r1	; 0x02
     fc2:	00 91 45 02 	lds	r16, 0x0245	; 0x800245 <__flp>
     fc6:	10 91 46 02 	lds	r17, 0x0246	; 0x800246 <__flp+0x1>
     fca:	01 15       	cp	r16, r1
     fcc:	11 05       	cpc	r17, r1
     fce:	81 f4       	brne	.+32     	; 0xff0 <free+0x44>
     fd0:	20 81       	ld	r18, Z
     fd2:	31 81       	ldd	r19, Z+1	; 0x01
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
     fdc:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
     fe0:	28 17       	cp	r18, r24
     fe2:	39 07       	cpc	r19, r25
     fe4:	79 f5       	brne	.+94     	; 0x1044 <free+0x98>
     fe6:	f0 93 44 02 	sts	0x0244, r31	; 0x800244 <__brkval+0x1>
     fea:	e0 93 43 02 	sts	0x0243, r30	; 0x800243 <__brkval>
     fee:	71 c0       	rjmp	.+226    	; 0x10d2 <free+0x126>
     ff0:	d8 01       	movw	r26, r16
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	ae 17       	cp	r26, r30
     ff8:	bf 07       	cpc	r27, r31
     ffa:	50 f4       	brcc	.+20     	; 0x1010 <free+0x64>
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	2d 91       	ld	r18, X+
    1000:	3c 91       	ld	r19, X
    1002:	13 97       	sbiw	r26, 0x03	; 3
    1004:	ad 01       	movw	r20, r26
    1006:	21 15       	cp	r18, r1
    1008:	31 05       	cpc	r19, r1
    100a:	09 f1       	breq	.+66     	; 0x104e <free+0xa2>
    100c:	d9 01       	movw	r26, r18
    100e:	f3 cf       	rjmp	.-26     	; 0xff6 <free+0x4a>
    1010:	9d 01       	movw	r18, r26
    1012:	da 01       	movw	r26, r20
    1014:	33 83       	std	Z+3, r19	; 0x03
    1016:	22 83       	std	Z+2, r18	; 0x02
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	86 0f       	add	r24, r22
    101e:	97 1f       	adc	r25, r23
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	69 f4       	brne	.+26     	; 0x1040 <free+0x94>
    1026:	ec 01       	movw	r28, r24
    1028:	28 81       	ld	r18, Y
    102a:	39 81       	ldd	r19, Y+1	; 0x01
    102c:	26 0f       	add	r18, r22
    102e:	37 1f       	adc	r19, r23
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	31 83       	std	Z+1, r19	; 0x01
    1036:	20 83       	st	Z, r18
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	93 83       	std	Z+3, r25	; 0x03
    103e:	82 83       	std	Z+2, r24	; 0x02
    1040:	45 2b       	or	r20, r21
    1042:	29 f4       	brne	.+10     	; 0x104e <free+0xa2>
    1044:	f0 93 46 02 	sts	0x0246, r31	; 0x800246 <__flp+0x1>
    1048:	e0 93 45 02 	sts	0x0245, r30	; 0x800245 <__flp>
    104c:	42 c0       	rjmp	.+132    	; 0x10d2 <free+0x126>
    104e:	13 96       	adiw	r26, 0x03	; 3
    1050:	fc 93       	st	X, r31
    1052:	ee 93       	st	-X, r30
    1054:	12 97       	sbiw	r26, 0x02	; 2
    1056:	ed 01       	movw	r28, r26
    1058:	49 91       	ld	r20, Y+
    105a:	59 91       	ld	r21, Y+
    105c:	9e 01       	movw	r18, r28
    105e:	24 0f       	add	r18, r20
    1060:	35 1f       	adc	r19, r21
    1062:	e2 17       	cp	r30, r18
    1064:	f3 07       	cpc	r31, r19
    1066:	71 f4       	brne	.+28     	; 0x1084 <free+0xd8>
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	84 0f       	add	r24, r20
    106e:	95 1f       	adc	r25, r21
    1070:	02 96       	adiw	r24, 0x02	; 2
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	9c 93       	st	X, r25
    1076:	8e 93       	st	-X, r24
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	13 96       	adiw	r26, 0x03	; 3
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
    1082:	12 97       	sbiw	r26, 0x02	; 2
    1084:	e0 e0       	ldi	r30, 0x00	; 0
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	d8 01       	movw	r26, r16
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	19 f0       	breq	.+6      	; 0x109c <free+0xf0>
    1096:	f8 01       	movw	r30, r16
    1098:	8c 01       	movw	r16, r24
    109a:	f6 cf       	rjmp	.-20     	; 0x1088 <free+0xdc>
    109c:	8d 91       	ld	r24, X+
    109e:	9c 91       	ld	r25, X
    10a0:	98 01       	movw	r18, r16
    10a2:	2e 5f       	subi	r18, 0xFE	; 254
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	82 0f       	add	r24, r18
    10a8:	93 1f       	adc	r25, r19
    10aa:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
    10ae:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	69 f4       	brne	.+26     	; 0x10d2 <free+0x126>
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <free+0x11a>
    10bc:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__flp+0x1>
    10c0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <__flp>
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <free+0x11e>
    10c6:	13 82       	std	Z+3, r1	; 0x03
    10c8:	12 82       	std	Z+2, r1	; 0x02
    10ca:	10 93 44 02 	sts	0x0244, r17	; 0x800244 <__brkval+0x1>
    10ce:	00 93 43 02 	sts	0x0243, r16	; 0x800243 <__brkval>
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	08 95       	ret

000010dc <sprintf>:
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	0e 89       	ldd	r16, Y+22	; 0x16
    10f6:	1f 89       	ldd	r17, Y+23	; 0x17
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	8c 83       	std	Y+4, r24	; 0x04
    10fc:	1a 83       	std	Y+2, r17	; 0x02
    10fe:	09 83       	std	Y+1, r16	; 0x01
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f e7       	ldi	r25, 0x7F	; 127
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	ae 01       	movw	r20, r28
    110a:	46 5e       	subi	r20, 0xE6	; 230
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	68 8d       	ldd	r22, Y+24	; 0x18
    1110:	79 8d       	ldd	r23, Y+25	; 0x19
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	11 d0       	rcall	.+34     	; 0x113a <vfprintf>
    1118:	2f 81       	ldd	r18, Y+7	; 0x07
    111a:	38 85       	ldd	r19, Y+8	; 0x08
    111c:	f8 01       	movw	r30, r16
    111e:	e2 0f       	add	r30, r18
    1120:	f3 1f       	adc	r31, r19
    1122:	10 82       	st	Z, r1
    1124:	2e 96       	adiw	r28, 0x0e	; 14
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <vfprintf>:
    113a:	2f 92       	push	r2
    113c:	3f 92       	push	r3
    113e:	4f 92       	push	r4
    1140:	5f 92       	push	r5
    1142:	6f 92       	push	r6
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	2c 97       	sbiw	r28, 0x0c	; 12
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	7c 01       	movw	r14, r24
    1170:	6b 01       	movw	r12, r22
    1172:	8a 01       	movw	r16, r20
    1174:	fc 01       	movw	r30, r24
    1176:	17 82       	std	Z+7, r1	; 0x07
    1178:	16 82       	std	Z+6, r1	; 0x06
    117a:	83 81       	ldd	r24, Z+3	; 0x03
    117c:	81 ff       	sbrs	r24, 1
    117e:	b0 c1       	rjmp	.+864    	; 0x14e0 <vfprintf+0x3a6>
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	4c 01       	movw	r8, r24
    1186:	f7 01       	movw	r30, r14
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	f6 01       	movw	r30, r12
    118c:	93 fd       	sbrc	r25, 3
    118e:	85 91       	lpm	r24, Z+
    1190:	93 ff       	sbrs	r25, 3
    1192:	81 91       	ld	r24, Z+
    1194:	6f 01       	movw	r12, r30
    1196:	88 23       	and	r24, r24
    1198:	09 f4       	brne	.+2      	; 0x119c <vfprintf+0x62>
    119a:	9e c1       	rjmp	.+828    	; 0x14d8 <vfprintf+0x39e>
    119c:	85 32       	cpi	r24, 0x25	; 37
    119e:	39 f4       	brne	.+14     	; 0x11ae <vfprintf+0x74>
    11a0:	93 fd       	sbrc	r25, 3
    11a2:	85 91       	lpm	r24, Z+
    11a4:	93 ff       	sbrs	r25, 3
    11a6:	81 91       	ld	r24, Z+
    11a8:	6f 01       	movw	r12, r30
    11aa:	85 32       	cpi	r24, 0x25	; 37
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <vfprintf+0x7c>
    11ae:	b7 01       	movw	r22, r14
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	c7 d1       	rcall	.+910    	; 0x1542 <fputc>
    11b4:	e8 cf       	rjmp	.-48     	; 0x1186 <vfprintf+0x4c>
    11b6:	51 2c       	mov	r5, r1
    11b8:	31 2c       	mov	r3, r1
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	20 32       	cpi	r18, 0x20	; 32
    11be:	a0 f4       	brcc	.+40     	; 0x11e8 <vfprintf+0xae>
    11c0:	8b 32       	cpi	r24, 0x2B	; 43
    11c2:	69 f0       	breq	.+26     	; 0x11de <vfprintf+0xa4>
    11c4:	30 f4       	brcc	.+12     	; 0x11d2 <vfprintf+0x98>
    11c6:	80 32       	cpi	r24, 0x20	; 32
    11c8:	59 f0       	breq	.+22     	; 0x11e0 <vfprintf+0xa6>
    11ca:	83 32       	cpi	r24, 0x23	; 35
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <vfprintf+0xae>
    11ce:	20 61       	ori	r18, 0x10	; 16
    11d0:	2c c0       	rjmp	.+88     	; 0x122a <vfprintf+0xf0>
    11d2:	8d 32       	cpi	r24, 0x2D	; 45
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <vfprintf+0xaa>
    11d6:	80 33       	cpi	r24, 0x30	; 48
    11d8:	39 f4       	brne	.+14     	; 0x11e8 <vfprintf+0xae>
    11da:	21 60       	ori	r18, 0x01	; 1
    11dc:	26 c0       	rjmp	.+76     	; 0x122a <vfprintf+0xf0>
    11de:	22 60       	ori	r18, 0x02	; 2
    11e0:	24 60       	ori	r18, 0x04	; 4
    11e2:	23 c0       	rjmp	.+70     	; 0x122a <vfprintf+0xf0>
    11e4:	28 60       	ori	r18, 0x08	; 8
    11e6:	21 c0       	rjmp	.+66     	; 0x122a <vfprintf+0xf0>
    11e8:	27 fd       	sbrc	r18, 7
    11ea:	27 c0       	rjmp	.+78     	; 0x123a <vfprintf+0x100>
    11ec:	30 ed       	ldi	r19, 0xD0	; 208
    11ee:	38 0f       	add	r19, r24
    11f0:	3a 30       	cpi	r19, 0x0A	; 10
    11f2:	78 f4       	brcc	.+30     	; 0x1212 <vfprintf+0xd8>
    11f4:	26 ff       	sbrs	r18, 6
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <vfprintf+0xca>
    11f8:	fa e0       	ldi	r31, 0x0A	; 10
    11fa:	5f 9e       	mul	r5, r31
    11fc:	30 0d       	add	r19, r0
    11fe:	11 24       	eor	r1, r1
    1200:	53 2e       	mov	r5, r19
    1202:	13 c0       	rjmp	.+38     	; 0x122a <vfprintf+0xf0>
    1204:	8a e0       	ldi	r24, 0x0A	; 10
    1206:	38 9e       	mul	r3, r24
    1208:	30 0d       	add	r19, r0
    120a:	11 24       	eor	r1, r1
    120c:	33 2e       	mov	r3, r19
    120e:	20 62       	ori	r18, 0x20	; 32
    1210:	0c c0       	rjmp	.+24     	; 0x122a <vfprintf+0xf0>
    1212:	8e 32       	cpi	r24, 0x2E	; 46
    1214:	21 f4       	brne	.+8      	; 0x121e <vfprintf+0xe4>
    1216:	26 fd       	sbrc	r18, 6
    1218:	5f c1       	rjmp	.+702    	; 0x14d8 <vfprintf+0x39e>
    121a:	20 64       	ori	r18, 0x40	; 64
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfprintf+0xf0>
    121e:	8c 36       	cpi	r24, 0x6C	; 108
    1220:	11 f4       	brne	.+4      	; 0x1226 <vfprintf+0xec>
    1222:	20 68       	ori	r18, 0x80	; 128
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0xf0>
    1226:	88 36       	cpi	r24, 0x68	; 104
    1228:	41 f4       	brne	.+16     	; 0x123a <vfprintf+0x100>
    122a:	f6 01       	movw	r30, r12
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	6f 01       	movw	r12, r30
    1236:	81 11       	cpse	r24, r1
    1238:	c1 cf       	rjmp	.-126    	; 0x11bc <vfprintf+0x82>
    123a:	98 2f       	mov	r25, r24
    123c:	9f 7d       	andi	r25, 0xDF	; 223
    123e:	95 54       	subi	r25, 0x45	; 69
    1240:	93 30       	cpi	r25, 0x03	; 3
    1242:	28 f4       	brcc	.+10     	; 0x124e <vfprintf+0x114>
    1244:	0c 5f       	subi	r16, 0xFC	; 252
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	ff e3       	ldi	r31, 0x3F	; 63
    124a:	f9 83       	std	Y+1, r31	; 0x01
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <vfprintf+0x12e>
    124e:	83 36       	cpi	r24, 0x63	; 99
    1250:	31 f0       	breq	.+12     	; 0x125e <vfprintf+0x124>
    1252:	83 37       	cpi	r24, 0x73	; 115
    1254:	71 f0       	breq	.+28     	; 0x1272 <vfprintf+0x138>
    1256:	83 35       	cpi	r24, 0x53	; 83
    1258:	09 f0       	breq	.+2      	; 0x125c <vfprintf+0x122>
    125a:	57 c0       	rjmp	.+174    	; 0x130a <vfprintf+0x1d0>
    125c:	21 c0       	rjmp	.+66     	; 0x12a0 <vfprintf+0x166>
    125e:	f8 01       	movw	r30, r16
    1260:	80 81       	ld	r24, Z
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	0e 5f       	subi	r16, 0xFE	; 254
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	44 24       	eor	r4, r4
    126a:	43 94       	inc	r4
    126c:	51 2c       	mov	r5, r1
    126e:	54 01       	movw	r10, r8
    1270:	14 c0       	rjmp	.+40     	; 0x129a <vfprintf+0x160>
    1272:	38 01       	movw	r6, r16
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	6f 0e       	add	r6, r31
    1278:	71 1c       	adc	r7, r1
    127a:	f8 01       	movw	r30, r16
    127c:	a0 80       	ld	r10, Z
    127e:	b1 80       	ldd	r11, Z+1	; 0x01
    1280:	26 ff       	sbrs	r18, 6
    1282:	03 c0       	rjmp	.+6      	; 0x128a <vfprintf+0x150>
    1284:	65 2d       	mov	r22, r5
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x154>
    128a:	6f ef       	ldi	r22, 0xFF	; 255
    128c:	7f ef       	ldi	r23, 0xFF	; 255
    128e:	c5 01       	movw	r24, r10
    1290:	2c 87       	std	Y+12, r18	; 0x0c
    1292:	4c d1       	rcall	.+664    	; 0x152c <strnlen>
    1294:	2c 01       	movw	r4, r24
    1296:	83 01       	movw	r16, r6
    1298:	2c 85       	ldd	r18, Y+12	; 0x0c
    129a:	2f 77       	andi	r18, 0x7F	; 127
    129c:	22 2e       	mov	r2, r18
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <vfprintf+0x192>
    12a0:	38 01       	movw	r6, r16
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	6f 0e       	add	r6, r31
    12a6:	71 1c       	adc	r7, r1
    12a8:	f8 01       	movw	r30, r16
    12aa:	a0 80       	ld	r10, Z
    12ac:	b1 80       	ldd	r11, Z+1	; 0x01
    12ae:	26 ff       	sbrs	r18, 6
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <vfprintf+0x17e>
    12b2:	65 2d       	mov	r22, r5
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x182>
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	7f ef       	ldi	r23, 0xFF	; 255
    12bc:	c5 01       	movw	r24, r10
    12be:	2c 87       	std	Y+12, r18	; 0x0c
    12c0:	2a d1       	rcall	.+596    	; 0x1516 <strnlen_P>
    12c2:	2c 01       	movw	r4, r24
    12c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c6:	20 68       	ori	r18, 0x80	; 128
    12c8:	22 2e       	mov	r2, r18
    12ca:	83 01       	movw	r16, r6
    12cc:	23 fc       	sbrc	r2, 3
    12ce:	19 c0       	rjmp	.+50     	; 0x1302 <vfprintf+0x1c8>
    12d0:	83 2d       	mov	r24, r3
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	48 16       	cp	r4, r24
    12d6:	59 06       	cpc	r5, r25
    12d8:	a0 f4       	brcc	.+40     	; 0x1302 <vfprintf+0x1c8>
    12da:	b7 01       	movw	r22, r14
    12dc:	80 e2       	ldi	r24, 0x20	; 32
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	30 d1       	rcall	.+608    	; 0x1542 <fputc>
    12e2:	3a 94       	dec	r3
    12e4:	f5 cf       	rjmp	.-22     	; 0x12d0 <vfprintf+0x196>
    12e6:	f5 01       	movw	r30, r10
    12e8:	27 fc       	sbrc	r2, 7
    12ea:	85 91       	lpm	r24, Z+
    12ec:	27 fe       	sbrs	r2, 7
    12ee:	81 91       	ld	r24, Z+
    12f0:	5f 01       	movw	r10, r30
    12f2:	b7 01       	movw	r22, r14
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	25 d1       	rcall	.+586    	; 0x1542 <fputc>
    12f8:	31 10       	cpse	r3, r1
    12fa:	3a 94       	dec	r3
    12fc:	f1 e0       	ldi	r31, 0x01	; 1
    12fe:	4f 1a       	sub	r4, r31
    1300:	51 08       	sbc	r5, r1
    1302:	41 14       	cp	r4, r1
    1304:	51 04       	cpc	r5, r1
    1306:	79 f7       	brne	.-34     	; 0x12e6 <vfprintf+0x1ac>
    1308:	de c0       	rjmp	.+444    	; 0x14c6 <vfprintf+0x38c>
    130a:	84 36       	cpi	r24, 0x64	; 100
    130c:	11 f0       	breq	.+4      	; 0x1312 <vfprintf+0x1d8>
    130e:	89 36       	cpi	r24, 0x69	; 105
    1310:	31 f5       	brne	.+76     	; 0x135e <vfprintf+0x224>
    1312:	f8 01       	movw	r30, r16
    1314:	27 ff       	sbrs	r18, 7
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <vfprintf+0x1ec>
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	0c 5f       	subi	r16, 0xFC	; 252
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <vfprintf+0x1fc>
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	07 2e       	mov	r0, r23
    132c:	00 0c       	add	r0, r0
    132e:	88 0b       	sbc	r24, r24
    1330:	99 0b       	sbc	r25, r25
    1332:	0e 5f       	subi	r16, 0xFE	; 254
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	2f 76       	andi	r18, 0x6F	; 111
    1338:	72 2e       	mov	r7, r18
    133a:	97 ff       	sbrs	r25, 7
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <vfprintf+0x216>
    133e:	90 95       	com	r25
    1340:	80 95       	com	r24
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	20 68       	ori	r18, 0x80	; 128
    134e:	72 2e       	mov	r7, r18
    1350:	2a e0       	ldi	r18, 0x0A	; 10
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a4 01       	movw	r20, r8
    1356:	2d d1       	rcall	.+602    	; 0x15b2 <__ultoa_invert>
    1358:	a8 2e       	mov	r10, r24
    135a:	a8 18       	sub	r10, r8
    135c:	43 c0       	rjmp	.+134    	; 0x13e4 <vfprintf+0x2aa>
    135e:	85 37       	cpi	r24, 0x75	; 117
    1360:	29 f4       	brne	.+10     	; 0x136c <vfprintf+0x232>
    1362:	2f 7e       	andi	r18, 0xEF	; 239
    1364:	b2 2e       	mov	r11, r18
    1366:	2a e0       	ldi	r18, 0x0A	; 10
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	25 c0       	rjmp	.+74     	; 0x13b6 <vfprintf+0x27c>
    136c:	f2 2f       	mov	r31, r18
    136e:	f9 7f       	andi	r31, 0xF9	; 249
    1370:	bf 2e       	mov	r11, r31
    1372:	8f 36       	cpi	r24, 0x6F	; 111
    1374:	c1 f0       	breq	.+48     	; 0x13a6 <vfprintf+0x26c>
    1376:	18 f4       	brcc	.+6      	; 0x137e <vfprintf+0x244>
    1378:	88 35       	cpi	r24, 0x58	; 88
    137a:	79 f0       	breq	.+30     	; 0x139a <vfprintf+0x260>
    137c:	ad c0       	rjmp	.+346    	; 0x14d8 <vfprintf+0x39e>
    137e:	80 37       	cpi	r24, 0x70	; 112
    1380:	19 f0       	breq	.+6      	; 0x1388 <vfprintf+0x24e>
    1382:	88 37       	cpi	r24, 0x78	; 120
    1384:	21 f0       	breq	.+8      	; 0x138e <vfprintf+0x254>
    1386:	a8 c0       	rjmp	.+336    	; 0x14d8 <vfprintf+0x39e>
    1388:	2f 2f       	mov	r18, r31
    138a:	20 61       	ori	r18, 0x10	; 16
    138c:	b2 2e       	mov	r11, r18
    138e:	b4 fe       	sbrs	r11, 4
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <vfprintf+0x272>
    1392:	8b 2d       	mov	r24, r11
    1394:	84 60       	ori	r24, 0x04	; 4
    1396:	b8 2e       	mov	r11, r24
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <vfprintf+0x272>
    139a:	24 ff       	sbrs	r18, 4
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <vfprintf+0x278>
    139e:	9f 2f       	mov	r25, r31
    13a0:	96 60       	ori	r25, 0x06	; 6
    13a2:	b9 2e       	mov	r11, r25
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <vfprintf+0x278>
    13a6:	28 e0       	ldi	r18, 0x08	; 8
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <vfprintf+0x27c>
    13ac:	20 e1       	ldi	r18, 0x10	; 16
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x27c>
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	32 e0       	ldi	r19, 0x02	; 2
    13b6:	f8 01       	movw	r30, r16
    13b8:	b7 fe       	sbrs	r11, 7
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <vfprintf+0x290>
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	0c 5f       	subi	r16, 0xFC	; 252
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <vfprintf+0x29c>
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 5f       	subi	r16, 0xFE	; 254
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	a4 01       	movw	r20, r8
    13d8:	ec d0       	rcall	.+472    	; 0x15b2 <__ultoa_invert>
    13da:	a8 2e       	mov	r10, r24
    13dc:	a8 18       	sub	r10, r8
    13de:	fb 2d       	mov	r31, r11
    13e0:	ff 77       	andi	r31, 0x7F	; 127
    13e2:	7f 2e       	mov	r7, r31
    13e4:	76 fe       	sbrs	r7, 6
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <vfprintf+0x2c4>
    13e8:	37 2d       	mov	r19, r7
    13ea:	3e 7f       	andi	r19, 0xFE	; 254
    13ec:	a5 14       	cp	r10, r5
    13ee:	50 f4       	brcc	.+20     	; 0x1404 <vfprintf+0x2ca>
    13f0:	74 fe       	sbrs	r7, 4
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <vfprintf+0x2ce>
    13f4:	72 fc       	sbrc	r7, 2
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <vfprintf+0x2ce>
    13f8:	37 2d       	mov	r19, r7
    13fa:	3e 7e       	andi	r19, 0xEE	; 238
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <vfprintf+0x2ce>
    13fe:	ba 2c       	mov	r11, r10
    1400:	37 2d       	mov	r19, r7
    1402:	03 c0       	rjmp	.+6      	; 0x140a <vfprintf+0x2d0>
    1404:	ba 2c       	mov	r11, r10
    1406:	01 c0       	rjmp	.+2      	; 0x140a <vfprintf+0x2d0>
    1408:	b5 2c       	mov	r11, r5
    140a:	34 ff       	sbrs	r19, 4
    140c:	0d c0       	rjmp	.+26     	; 0x1428 <vfprintf+0x2ee>
    140e:	fe 01       	movw	r30, r28
    1410:	ea 0d       	add	r30, r10
    1412:	f1 1d       	adc	r31, r1
    1414:	80 81       	ld	r24, Z
    1416:	80 33       	cpi	r24, 0x30	; 48
    1418:	11 f4       	brne	.+4      	; 0x141e <vfprintf+0x2e4>
    141a:	39 7e       	andi	r19, 0xE9	; 233
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <vfprintf+0x2f6>
    141e:	32 ff       	sbrs	r19, 2
    1420:	06 c0       	rjmp	.+12     	; 0x142e <vfprintf+0x2f4>
    1422:	b3 94       	inc	r11
    1424:	b3 94       	inc	r11
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <vfprintf+0x2f6>
    1428:	83 2f       	mov	r24, r19
    142a:	86 78       	andi	r24, 0x86	; 134
    142c:	09 f0       	breq	.+2      	; 0x1430 <vfprintf+0x2f6>
    142e:	b3 94       	inc	r11
    1430:	33 fd       	sbrc	r19, 3
    1432:	12 c0       	rjmp	.+36     	; 0x1458 <vfprintf+0x31e>
    1434:	30 ff       	sbrs	r19, 0
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <vfprintf+0x30a>
    1438:	5a 2c       	mov	r5, r10
    143a:	b3 14       	cp	r11, r3
    143c:	18 f4       	brcc	.+6      	; 0x1444 <vfprintf+0x30a>
    143e:	53 0c       	add	r5, r3
    1440:	5b 18       	sub	r5, r11
    1442:	b3 2c       	mov	r11, r3
    1444:	b3 14       	cp	r11, r3
    1446:	60 f4       	brcc	.+24     	; 0x1460 <vfprintf+0x326>
    1448:	b7 01       	movw	r22, r14
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	3c 87       	std	Y+12, r19	; 0x0c
    1450:	78 d0       	rcall	.+240    	; 0x1542 <fputc>
    1452:	b3 94       	inc	r11
    1454:	3c 85       	ldd	r19, Y+12	; 0x0c
    1456:	f6 cf       	rjmp	.-20     	; 0x1444 <vfprintf+0x30a>
    1458:	b3 14       	cp	r11, r3
    145a:	10 f4       	brcc	.+4      	; 0x1460 <vfprintf+0x326>
    145c:	3b 18       	sub	r3, r11
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <vfprintf+0x328>
    1460:	31 2c       	mov	r3, r1
    1462:	34 ff       	sbrs	r19, 4
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <vfprintf+0x34e>
    1466:	b7 01       	movw	r22, r14
    1468:	80 e3       	ldi	r24, 0x30	; 48
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	3c 87       	std	Y+12, r19	; 0x0c
    146e:	69 d0       	rcall	.+210    	; 0x1542 <fputc>
    1470:	3c 85       	ldd	r19, Y+12	; 0x0c
    1472:	32 ff       	sbrs	r19, 2
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <vfprintf+0x368>
    1476:	31 fd       	sbrc	r19, 1
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfprintf+0x346>
    147a:	88 e7       	ldi	r24, 0x78	; 120
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0x34a>
    1480:	88 e5       	ldi	r24, 0x58	; 88
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	b7 01       	movw	r22, r14
    1486:	0c c0       	rjmp	.+24     	; 0x14a0 <vfprintf+0x366>
    1488:	83 2f       	mov	r24, r19
    148a:	86 78       	andi	r24, 0x86	; 134
    148c:	51 f0       	breq	.+20     	; 0x14a2 <vfprintf+0x368>
    148e:	31 ff       	sbrs	r19, 1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x35c>
    1492:	8b e2       	ldi	r24, 0x2B	; 43
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <vfprintf+0x35e>
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	37 fd       	sbrc	r19, 7
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	b7 01       	movw	r22, r14
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	50 d0       	rcall	.+160    	; 0x1542 <fputc>
    14a2:	a5 14       	cp	r10, r5
    14a4:	30 f4       	brcc	.+12     	; 0x14b2 <vfprintf+0x378>
    14a6:	b7 01       	movw	r22, r14
    14a8:	80 e3       	ldi	r24, 0x30	; 48
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	4a d0       	rcall	.+148    	; 0x1542 <fputc>
    14ae:	5a 94       	dec	r5
    14b0:	f8 cf       	rjmp	.-16     	; 0x14a2 <vfprintf+0x368>
    14b2:	aa 94       	dec	r10
    14b4:	f4 01       	movw	r30, r8
    14b6:	ea 0d       	add	r30, r10
    14b8:	f1 1d       	adc	r31, r1
    14ba:	80 81       	ld	r24, Z
    14bc:	b7 01       	movw	r22, r14
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	40 d0       	rcall	.+128    	; 0x1542 <fputc>
    14c2:	a1 10       	cpse	r10, r1
    14c4:	f6 cf       	rjmp	.-20     	; 0x14b2 <vfprintf+0x378>
    14c6:	33 20       	and	r3, r3
    14c8:	09 f4       	brne	.+2      	; 0x14cc <vfprintf+0x392>
    14ca:	5d ce       	rjmp	.-838    	; 0x1186 <vfprintf+0x4c>
    14cc:	b7 01       	movw	r22, r14
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	37 d0       	rcall	.+110    	; 0x1542 <fputc>
    14d4:	3a 94       	dec	r3
    14d6:	f7 cf       	rjmp	.-18     	; 0x14c6 <vfprintf+0x38c>
    14d8:	f7 01       	movw	r30, r14
    14da:	86 81       	ldd	r24, Z+6	; 0x06
    14dc:	97 81       	ldd	r25, Z+7	; 0x07
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0x3aa>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	9f ef       	ldi	r25, 0xFF	; 255
    14e4:	2c 96       	adiw	r28, 0x0c	; 12
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	9f 90       	pop	r9
    1506:	8f 90       	pop	r8
    1508:	7f 90       	pop	r7
    150a:	6f 90       	pop	r6
    150c:	5f 90       	pop	r5
    150e:	4f 90       	pop	r4
    1510:	3f 90       	pop	r3
    1512:	2f 90       	pop	r2
    1514:	08 95       	ret

00001516 <strnlen_P>:
    1516:	fc 01       	movw	r30, r24
    1518:	05 90       	lpm	r0, Z+
    151a:	61 50       	subi	r22, 0x01	; 1
    151c:	70 40       	sbci	r23, 0x00	; 0
    151e:	01 10       	cpse	r0, r1
    1520:	d8 f7       	brcc	.-10     	; 0x1518 <strnlen_P+0x2>
    1522:	80 95       	com	r24
    1524:	90 95       	com	r25
    1526:	8e 0f       	add	r24, r30
    1528:	9f 1f       	adc	r25, r31
    152a:	08 95       	ret

0000152c <strnlen>:
    152c:	fc 01       	movw	r30, r24
    152e:	61 50       	subi	r22, 0x01	; 1
    1530:	70 40       	sbci	r23, 0x00	; 0
    1532:	01 90       	ld	r0, Z+
    1534:	01 10       	cpse	r0, r1
    1536:	d8 f7       	brcc	.-10     	; 0x152e <strnlen+0x2>
    1538:	80 95       	com	r24
    153a:	90 95       	com	r25
    153c:	8e 0f       	add	r24, r30
    153e:	9f 1f       	adc	r25, r31
    1540:	08 95       	ret

00001542 <fputc>:
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	fb 01       	movw	r30, r22
    154c:	23 81       	ldd	r18, Z+3	; 0x03
    154e:	21 fd       	sbrc	r18, 1
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <fputc+0x16>
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	28 c0       	rjmp	.+80     	; 0x15a8 <fputc+0x66>
    1558:	22 ff       	sbrs	r18, 2
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <fputc+0x46>
    155c:	46 81       	ldd	r20, Z+6	; 0x06
    155e:	57 81       	ldd	r21, Z+7	; 0x07
    1560:	24 81       	ldd	r18, Z+4	; 0x04
    1562:	35 81       	ldd	r19, Z+5	; 0x05
    1564:	42 17       	cp	r20, r18
    1566:	53 07       	cpc	r21, r19
    1568:	44 f4       	brge	.+16     	; 0x157a <fputc+0x38>
    156a:	a0 81       	ld	r26, Z
    156c:	b1 81       	ldd	r27, Z+1	; 0x01
    156e:	9d 01       	movw	r18, r26
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	31 83       	std	Z+1, r19	; 0x01
    1576:	20 83       	st	Z, r18
    1578:	8c 93       	st	X, r24
    157a:	26 81       	ldd	r18, Z+6	; 0x06
    157c:	37 81       	ldd	r19, Z+7	; 0x07
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	37 83       	std	Z+7, r19	; 0x07
    1584:	26 83       	std	Z+6, r18	; 0x06
    1586:	10 c0       	rjmp	.+32     	; 0x15a8 <fputc+0x66>
    1588:	eb 01       	movw	r28, r22
    158a:	09 2f       	mov	r16, r25
    158c:	18 2f       	mov	r17, r24
    158e:	00 84       	ldd	r0, Z+8	; 0x08
    1590:	f1 85       	ldd	r31, Z+9	; 0x09
    1592:	e0 2d       	mov	r30, r0
    1594:	19 95       	eicall
    1596:	89 2b       	or	r24, r25
    1598:	e1 f6       	brne	.-72     	; 0x1552 <fputc+0x10>
    159a:	8e 81       	ldd	r24, Y+6	; 0x06
    159c:	9f 81       	ldd	r25, Y+7	; 0x07
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	9f 83       	std	Y+7, r25	; 0x07
    15a2:	8e 83       	std	Y+6, r24	; 0x06
    15a4:	81 2f       	mov	r24, r17
    15a6:	90 2f       	mov	r25, r16
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <__ultoa_invert>:
    15b2:	fa 01       	movw	r30, r20
    15b4:	aa 27       	eor	r26, r26
    15b6:	28 30       	cpi	r18, 0x08	; 8
    15b8:	51 f1       	breq	.+84     	; 0x160e <__ultoa_invert+0x5c>
    15ba:	20 31       	cpi	r18, 0x10	; 16
    15bc:	81 f1       	breq	.+96     	; 0x161e <__ultoa_invert+0x6c>
    15be:	e8 94       	clt
    15c0:	6f 93       	push	r22
    15c2:	6e 7f       	andi	r22, 0xFE	; 254
    15c4:	6e 5f       	subi	r22, 0xFE	; 254
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	af 4f       	sbci	r26, 0xFF	; 255
    15ce:	b1 e0       	ldi	r27, 0x01	; 1
    15d0:	3e d0       	rcall	.+124    	; 0x164e <__ultoa_invert+0x9c>
    15d2:	b4 e0       	ldi	r27, 0x04	; 4
    15d4:	3c d0       	rcall	.+120    	; 0x164e <__ultoa_invert+0x9c>
    15d6:	67 0f       	add	r22, r23
    15d8:	78 1f       	adc	r23, r24
    15da:	89 1f       	adc	r24, r25
    15dc:	9a 1f       	adc	r25, r26
    15de:	a1 1d       	adc	r26, r1
    15e0:	68 0f       	add	r22, r24
    15e2:	79 1f       	adc	r23, r25
    15e4:	8a 1f       	adc	r24, r26
    15e6:	91 1d       	adc	r25, r1
    15e8:	a1 1d       	adc	r26, r1
    15ea:	6a 0f       	add	r22, r26
    15ec:	71 1d       	adc	r23, r1
    15ee:	81 1d       	adc	r24, r1
    15f0:	91 1d       	adc	r25, r1
    15f2:	a1 1d       	adc	r26, r1
    15f4:	20 d0       	rcall	.+64     	; 0x1636 <__ultoa_invert+0x84>
    15f6:	09 f4       	brne	.+2      	; 0x15fa <__ultoa_invert+0x48>
    15f8:	68 94       	set
    15fa:	3f 91       	pop	r19
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	26 9f       	mul	r18, r22
    1600:	11 24       	eor	r1, r1
    1602:	30 19       	sub	r19, r0
    1604:	30 5d       	subi	r19, 0xD0	; 208
    1606:	31 93       	st	Z+, r19
    1608:	de f6       	brtc	.-74     	; 0x15c0 <__ultoa_invert+0xe>
    160a:	cf 01       	movw	r24, r30
    160c:	08 95       	ret
    160e:	46 2f       	mov	r20, r22
    1610:	47 70       	andi	r20, 0x07	; 7
    1612:	40 5d       	subi	r20, 0xD0	; 208
    1614:	41 93       	st	Z+, r20
    1616:	b3 e0       	ldi	r27, 0x03	; 3
    1618:	0f d0       	rcall	.+30     	; 0x1638 <__ultoa_invert+0x86>
    161a:	c9 f7       	brne	.-14     	; 0x160e <__ultoa_invert+0x5c>
    161c:	f6 cf       	rjmp	.-20     	; 0x160a <__ultoa_invert+0x58>
    161e:	46 2f       	mov	r20, r22
    1620:	4f 70       	andi	r20, 0x0F	; 15
    1622:	40 5d       	subi	r20, 0xD0	; 208
    1624:	4a 33       	cpi	r20, 0x3A	; 58
    1626:	18 f0       	brcs	.+6      	; 0x162e <__ultoa_invert+0x7c>
    1628:	49 5d       	subi	r20, 0xD9	; 217
    162a:	31 fd       	sbrc	r19, 1
    162c:	40 52       	subi	r20, 0x20	; 32
    162e:	41 93       	st	Z+, r20
    1630:	02 d0       	rcall	.+4      	; 0x1636 <__ultoa_invert+0x84>
    1632:	a9 f7       	brne	.-22     	; 0x161e <__ultoa_invert+0x6c>
    1634:	ea cf       	rjmp	.-44     	; 0x160a <__ultoa_invert+0x58>
    1636:	b4 e0       	ldi	r27, 0x04	; 4
    1638:	a6 95       	lsr	r26
    163a:	97 95       	ror	r25
    163c:	87 95       	ror	r24
    163e:	77 95       	ror	r23
    1640:	67 95       	ror	r22
    1642:	ba 95       	dec	r27
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__ultoa_invert+0x86>
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	61 05       	cpc	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	08 95       	ret
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	0a 2e       	mov	r0, r26
    1654:	06 94       	lsr	r0
    1656:	57 95       	ror	r21
    1658:	47 95       	ror	r20
    165a:	37 95       	ror	r19
    165c:	27 95       	ror	r18
    165e:	ba 95       	dec	r27
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__ultoa_invert+0xa2>
    1662:	62 0f       	add	r22, r18
    1664:	73 1f       	adc	r23, r19
    1666:	84 1f       	adc	r24, r20
    1668:	95 1f       	adc	r25, r21
    166a:	a0 1d       	adc	r26, r0
    166c:	08 95       	ret

0000166e <_exit>:
    166e:	f8 94       	cli

00001670 <__stop_program>:
    1670:	ff cf       	rjmp	.-2      	; 0x1670 <__stop_program>
