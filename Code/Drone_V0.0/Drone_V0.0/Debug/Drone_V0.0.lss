
Drone_V0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800200  000017a8  0000183c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  008002c4  008002c4  00001900  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000235e  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00004a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  00005dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ef  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9a  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000079ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c4       	rjmp	.+2396   	; 0x982 <__vector_9>
      26:	00 00       	nop
      28:	c9 c4       	rjmp	.+2450   	; 0x9bc <__vector_10>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	89 c6       	rjmp	.+3346   	; 0xda0 <__vector_35>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ea       	ldi	r30, 0xA8	; 168
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3c       	cpi	r26, 0xC4	; 196
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 ec       	ldi	r26, 0xC4	; 196
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3f       	cpi	r26, 0xFA	; 250
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 a6 08 	call	0x114c	; 0x114c <main>
     122:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <_ZN3escC1Ev>:
esc 3 = 0C5A
esc 4 = 0C5B
*/

//constructor
esc::esc()
     128:	08 95       	ret

0000012a <_ZN3esc10initializeEv>:
}

void esc::initialize()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
     12a:	e0 ea       	ldi	r30, 0xA0	; 160
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	82 6a       	ori	r24, 0xA2	; 162
     132:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
     134:	e0 e2       	ldi	r30, 0x20	; 32
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	80 81       	ld	r24, Z
     13a:	82 6a       	ori	r24, 0xA2	; 162
     13c:	80 83       	st	Z, r24

  //wave generator mode à phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
     13e:	e1 ea       	ldi	r30, 0xA1	; 161
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	81 61       	ori	r24, 0x11	; 17
     146:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
     148:	e1 e2       	ldi	r30, 0x21	; 33
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	80 81       	ld	r24, Z
     14e:	81 61       	ori	r24, 0x11	; 17
     150:	80 83       	st	Z, r24
  
  //régler TOP à 4096
  ICR4 = 4096;
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e1       	ldi	r25, 0x10	; 16
     156:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     15a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  ICR5 = 4096;
     15e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     162:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
  OCR4A = 0;
     166:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     16a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR4B = 0;
     16e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     172:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  OCR5A = 0;
     176:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     17a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
  OCR5B = 0;
     17e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     182:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
     186:	ea e0       	ldi	r30, 0x0A	; 10
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	80 81       	ld	r24, Z
     18c:	88 61       	ori	r24, 0x18	; 24
     18e:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
     190:	e1 e0       	ldi	r30, 0x01	; 1
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	80 81       	ld	r24, Z
     196:	88 61       	ori	r24, 0x18	; 24
     198:	80 83       	st	Z, r24
  
  //delay to make sure the ESC are armed before playing with the PWM
  _delay_ms(DELAY_ESC);
  
  //Timer 4/5 set to 0
  TCNT4 = 0;
     19a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     19e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5 = 0;
     1a2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     1a6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     1aa:	08 95       	ret

000001ac <_ZN3I2CC1Ev>:
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
}

void resetTWINT()
{
	TWCR &= ~(1<< TWINT);
     1ac:	08 95       	ret

000001ae <_ZN3I2C10initializeEv>:
     1ae:	08 95       	ret

000001b0 <_Z7I2Cstopv>:
     1b0:	ec eb       	ldi	r30, 0xBC	; 188
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	84 e9       	ldi	r24, 0x94	; 148
     1b6:	80 83       	st	Z, r24
     1b8:	10 82       	st	Z, r1
     1ba:	08 95       	ret

000001bc <_Z12WaitForTWINTv>:
     1bc:	ec eb       	ldi	r30, 0xBC	; 188
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	88 23       	and	r24, r24
     1c4:	ec f7       	brge	.-6      	; 0x1c0 <_Z12WaitForTWINTv+0x4>
     1c6:	08 95       	ret

000001c8 <_Z9ERROR_I2Cv>:
	//SetAdress(64); // goes to line 2 of LCD
	//sprintf(buffer, "%X", TWDR);
	//LCD_WriteString(buffer);
	//_delay_ms(5000);
	
	clearDisplay();
     1c8:	5c d6       	rcall	.+3256   	; 0xe82 <_Z12clearDisplayv>
	LCD_WriteString("I2C Error");
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	1f d7       	rcall	.+3646   	; 0x100e <_Z15LCD_WriteStringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d0:	2f e7       	ldi	r18, 0x7F	; 127
     1d2:	8a e1       	ldi	r24, 0x1A	; 26
     1d4:	96 e0       	ldi	r25, 0x06	; 6
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	80 40       	sbci	r24, 0x00	; 0
     1da:	90 40       	sbci	r25, 0x00	; 0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z9ERROR_I2Cv+0xe>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z9ERROR_I2Cv+0x18>
     1e0:	00 00       	nop
	_delay_ms(2000);
	I2Cstop();
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <_Z7I2Cstopv>
     1e4:	08 95       	ret

000001e6 <_ZN3I2C5writeEhhPhh>:
	data1[0] = data;
	write(phys_address,address, data1, 1);
}

uint8_t I2C::write(uint8_t phys_address, uint8_t address, uint8_t *data, uint8_t length)
{
     1e6:	2f 92       	push	r2
     1e8:	3f 92       	push	r3
     1ea:	4f 92       	push	r4
     1ec:	5f 92       	push	r5
     1ee:	6f 92       	push	r6
     1f0:	7f 92       	push	r7
     1f2:	8f 92       	push	r8
     1f4:	9f 92       	push	r9
     1f6:	af 92       	push	r10
     1f8:	bf 92       	push	r11
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	46 2e       	mov	r4, r22
     20c:	34 2e       	mov	r3, r20
     20e:	69 01       	movw	r12, r18
     210:	0f 2e       	mov	r0, r31
     212:	f8 ec       	ldi	r31, 0xC8	; 200
     214:	2f 2e       	mov	r2, r31
     216:	f0 2d       	mov	r31, r0
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     218:	0f 2e       	mov	r0, r31
     21a:	fc eb       	ldi	r31, 0xBC	; 188
     21c:	ef 2e       	mov	r14, r31
     21e:	f1 2c       	mov	r15, r1
     220:	f0 2d       	mov	r31, r0
		return 10;	
	}
	begin:
	I2Cstart();
	WaitForTWINT();
	switch ((twst = TW_STATUS))
     222:	c9 eb       	ldi	r28, 0xB9	; 185
     224:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(2000);		
			return 1;		/* error: not in start condition */
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
     226:	0f 2e       	mov	r0, r31
     228:	fb eb       	ldi	r31, 0xBB	; 187
     22a:	af 2e       	mov	r10, r31
     22c:	b1 2c       	mov	r11, r1
     22e:	f0 2d       	mov	r31, r0
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	49 01       	movw	r8, r18
     234:	80 0e       	add	r8, r16
     236:	91 1e       	adc	r9, r17
     238:	12 c0       	rjmp	.+36     	; 0x25e <_ZN3I2C5writeEhhPhh+0x78>
     23a:	2a 94       	dec	r2
{
	char buffer[20];
	uint8_t twcr, n = 0;
	
	restart:
	if (n++ >= MAX_ITER)
     23c:	21 10       	cpse	r2, r1
     23e:	0f c0       	rjmp	.+30     	; 0x25e <_ZN3I2C5writeEhhPhh+0x78>
	{
		clearDisplay();
     240:	20 d6       	rcall	.+3136   	; 0xe82 <_Z12clearDisplayv>
		LCD_WriteString("Salve not responding");
     242:	8a e0       	ldi	r24, 0x0A	; 10
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	e3 d6       	rcall	.+3526   	; 0x100e <_Z15LCD_WriteStringPc>
     248:	2f e7       	ldi	r18, 0x7F	; 127
     24a:	8a e1       	ldi	r24, 0x1A	; 26
     24c:	96 e0       	ldi	r25, 0x06	; 6
     24e:	21 50       	subi	r18, 0x01	; 1
     250:	80 40       	sbci	r24, 0x00	; 0
     252:	90 40       	sbci	r25, 0x00	; 0
     254:	e1 f7       	brne	.-8      	; 0x24e <_ZN3I2C5writeEhhPhh+0x68>
     256:	00 c0       	rjmp	.+0      	; 0x258 <_ZN3I2C5writeEhhPhh+0x72>
     258:	00 00       	nop
		_delay_ms(2000);
		return 10;	
     25a:	8a e0       	ldi	r24, 0x0A	; 10
     25c:	9c c0       	rjmp	.+312    	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     25e:	0f 2e       	mov	r0, r31
     260:	f4 ea       	ldi	r31, 0xA4	; 164
     262:	5f 2e       	mov	r5, r31
     264:	f0 2d       	mov	r31, r0
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     266:	0f 2e       	mov	r0, r31
     268:	f4 e8       	ldi	r31, 0x84	; 132
     26a:	7f 2e       	mov	r7, r31
     26c:	f0 2d       	mov	r31, r0
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     26e:	f7 01       	movw	r30, r14
     270:	50 82       	st	Z, r5
		_delay_ms(2000);
		return 10;	
	}
	begin:
	I2Cstart();
	WaitForTWINT();
     272:	a4 df       	rcall	.-184    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     274:	88 81       	ld	r24, Y
     276:	88 7f       	andi	r24, 0xF8	; 248
     278:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	99 f0       	breq	.+38     	; 0x2a6 <_ZN3I2C5writeEhhPhh+0xc0>
     280:	88 33       	cpi	r24, 0x38	; 56
     282:	a9 f3       	breq	.-22     	; 0x26e <_ZN3I2C5writeEhhPhh+0x88>
     284:	88 30       	cpi	r24, 0x08	; 8
     286:	79 f0       	breq	.+30     	; 0x2a6 <_ZN3I2C5writeEhhPhh+0xc0>
		case TW_MT_ARB_LOST:	/*  A master must not initiate a stop condition in order to not corrupt the ongoing transfer from the active master. 
								This will cause a new start condition to be initiated, which will normally be delayed until the currently active master has 
								released the bus. */
			goto begin;
		default:
			clearDisplay();
     288:	fc d5       	rcall	.+3064   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("Start I2C fail");
     28a:	8f e1       	ldi	r24, 0x1F	; 31
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	bf d6       	rcall	.+3454   	; 0x100e <_Z15LCD_WriteStringPc>
     290:	ff e7       	ldi	r31, 0x7F	; 127
     292:	2a e1       	ldi	r18, 0x1A	; 26
     294:	86 e0       	ldi	r24, 0x06	; 6
     296:	f1 50       	subi	r31, 0x01	; 1
     298:	20 40       	sbci	r18, 0x00	; 0
     29a:	80 40       	sbci	r24, 0x00	; 0
     29c:	e1 f7       	brne	.-8      	; 0x296 <_ZN3I2C5writeEhhPhh+0xb0>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <_ZN3I2C5writeEhhPhh+0xba>
     2a0:	00 00       	nop
			_delay_ms(2000);		
			return 1;		/* error: not in start condition */
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	78 c0       	rjmp	.+240    	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
     2a6:	f5 01       	movw	r30, r10
     2a8:	40 82       	st	Z, r4
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     2aa:	f7 01       	movw	r30, r14
     2ac:	70 82       	st	Z, r7
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
	I2CstartTransmit();
	WaitForTWINT();
     2ae:	86 df       	rcall	.-244    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     2b0:	88 81       	ld	r24, Y
     2b2:	88 7f       	andi	r24, 0xF8	; 248
     2b4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     2b8:	80 32       	cpi	r24, 0x20	; 32
     2ba:	09 f4       	brne	.+2      	; 0x2be <_ZN3I2C5writeEhhPhh+0xd8>
     2bc:	be cf       	rjmp	.-132    	; 0x23a <_ZN3I2C5writeEhhPhh+0x54>
     2be:	88 33       	cpi	r24, 0x38	; 56
     2c0:	b1 f2       	breq	.-84     	; 0x26e <_ZN3I2C5writeEhhPhh+0x88>
     2c2:	88 31       	cpi	r24, 0x18	; 24
     2c4:	89 f0       	breq	.+34     	; 0x2e8 <_ZN3I2C5writeEhhPhh+0x102>

		case TW_MT_ARB_LOST:	/* re-arbitrate */
			goto begin;

		default:
			clearDisplay();
     2c6:	dd d5       	rcall	.+3002   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("Invalid phys add");
     2c8:	8e e2       	ldi	r24, 0x2E	; 46
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	a0 d6       	rcall	.+3392   	; 0x100e <_Z15LCD_WriteStringPc>
     2ce:	ff e7       	ldi	r31, 0x7F	; 127
     2d0:	2a e1       	ldi	r18, 0x1A	; 26
     2d2:	86 e0       	ldi	r24, 0x06	; 6
     2d4:	f1 50       	subi	r31, 0x01	; 1
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	80 40       	sbci	r24, 0x00	; 0
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <_ZN3I2C5writeEhhPhh+0xee>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <_ZN3I2C5writeEhhPhh+0xf8>
     2de:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     2e0:	73 df       	rcall	.-282    	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     2e2:	66 df       	rcall	.-308    	; 0x1b0 <_Z7I2Cstopv>
			return 2;
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	57 c0       	rjmp	.+174    	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
	}
	//send the address of the register in the IMU chip we want to write to
	TWDR = address; //put register address on the bus
     2e8:	f5 01       	movw	r30, r10
     2ea:	30 82       	st	Z, r3
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     2ec:	f7 01       	movw	r30, r14
     2ee:	70 82       	st	Z, r7
			return 2;
	}
	//send the address of the register in the IMU chip we want to write to
	TWDR = address; //put register address on the bus
	I2CstartTransmit();
	WaitForTWINT();	
     2f0:	65 df       	rcall	.-310    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     2f2:	88 81       	ld	r24, Y
     2f4:	88 7f       	andi	r24, 0xF8	; 248
     2f6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     2fa:	80 33       	cpi	r24, 0x30	; 48
     2fc:	51 f0       	breq	.+20     	; 0x312 <_ZN3I2C5writeEhhPhh+0x12c>
     2fe:	88 33       	cpi	r24, 0x38	; 56
     300:	09 f4       	brne	.+2      	; 0x304 <_ZN3I2C5writeEhhPhh+0x11e>
     302:	b5 cf       	rjmp	.-150    	; 0x26e <_ZN3I2C5writeEhhPhh+0x88>
     304:	88 32       	cpi	r24, 0x28	; 40
     306:	41 f4       	brne	.+16     	; 0x318 <_ZN3I2C5writeEhhPhh+0x132>
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     308:	10 16       	cp	r1, r16
     30a:	11 06       	cpc	r1, r17
     30c:	b4 f0       	brlt	.+44     	; 0x33a <_ZN3I2C5writeEhhPhh+0x154>
				ERROR_I2C();		/* must send stop condition */
				I2Cstop();
				return 6;
		}
	}
	return 0;
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	42 c0       	rjmp	.+132    	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
	{
		case TW_MT_DATA_ACK:
			break;

		case TW_MT_DATA_NACK:
			I2Cstop();
     312:	4e df       	rcall	.-356    	; 0x1b0 <_Z7I2Cstopv>
			return 3;
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	3f c0       	rjmp	.+126    	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			clearDisplay();
     318:	b4 d5       	rcall	.+2920   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("No Data Ack from Slave");
     31a:	8f e3       	ldi	r24, 0x3F	; 63
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	77 d6       	rcall	.+3310   	; 0x100e <_Z15LCD_WriteStringPc>
     320:	ff e7       	ldi	r31, 0x7F	; 127
     322:	2a e1       	ldi	r18, 0x1A	; 26
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	f1 50       	subi	r31, 0x01	; 1
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	80 40       	sbci	r24, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <_ZN3I2C5writeEhhPhh+0x140>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN3I2C5writeEhhPhh+0x14a>
     330:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     332:	4a df       	rcall	.-364    	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     334:	3d df       	rcall	.-390    	; 0x1b0 <_Z7I2Cstopv>
			return 4;
     336:	84 e0       	ldi	r24, 0x04	; 4
     338:	2e c0       	rjmp	.+92     	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
     33a:	36 01       	movw	r6, r12
	}
	
	//send data	
	for (int i = 0; i<length;i++)
	{
		TWDR = data[i]; //Load DATA into TWDR Register.
     33c:	f3 01       	movw	r30, r6
     33e:	81 91       	ld	r24, Z+
     340:	3f 01       	movw	r6, r30
     342:	f5 01       	movw	r30, r10
     344:	80 83       	st	Z, r24
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     346:	24 e8       	ldi	r18, 0x84	; 132
     348:	f7 01       	movw	r30, r14
     34a:	20 83       	st	Z, r18
	//send data	
	for (int i = 0; i<length;i++)
	{
		TWDR = data[i]; //Load DATA into TWDR Register.
		I2CstartTransmit();
		WaitForTWINT();	
     34c:	37 df       	rcall	.-402    	; 0x1bc <_Z12WaitForTWINTv>
		switch ((twst = TW_STATUS))
     34e:	88 81       	ld	r24, Y
     350:	88 7f       	andi	r24, 0xF8	; 248
     352:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     356:	80 33       	cpi	r24, 0x30	; 48
     358:	31 f0       	breq	.+12     	; 0x366 <_ZN3I2C5writeEhhPhh+0x180>
     35a:	88 33       	cpi	r24, 0x38	; 56
     35c:	09 f4       	brne	.+2      	; 0x360 <_ZN3I2C5writeEhhPhh+0x17a>
     35e:	83 cf       	rjmp	.-250    	; 0x266 <_ZN3I2C5writeEhhPhh+0x80>
     360:	88 32       	cpi	r24, 0x28	; 40
     362:	21 f4       	brne	.+8      	; 0x36c <_ZN3I2C5writeEhhPhh+0x186>
     364:	14 c0       	rjmp	.+40     	; 0x38e <_ZN3I2C5writeEhhPhh+0x1a8>
		{
			case TW_MT_DATA_ACK:
				break;

			case TW_MT_DATA_NACK:
				I2Cstop();
     366:	24 df       	rcall	.-440    	; 0x1b0 <_Z7I2Cstopv>
				return 5;
     368:	85 e0       	ldi	r24, 0x05	; 5
     36a:	15 c0       	rjmp	.+42     	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
			case TW_MT_ARB_LOST:
				goto begin;

			default:
				clearDisplay();
     36c:	8a d5       	rcall	.+2836   	; 0xe82 <_Z12clearDisplayv>
				LCD_WriteString("No Data Ack from Slave");
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	4d d6       	rcall	.+3226   	; 0x100e <_Z15LCD_WriteStringPc>
     374:	8f e7       	ldi	r24, 0x7F	; 127
     376:	9a e1       	ldi	r25, 0x1A	; 26
     378:	e6 e0       	ldi	r30, 0x06	; 6
     37a:	81 50       	subi	r24, 0x01	; 1
     37c:	90 40       	sbci	r25, 0x00	; 0
     37e:	e0 40       	sbci	r30, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <_ZN3I2C5writeEhhPhh+0x194>
     382:	00 c0       	rjmp	.+0      	; 0x384 <_ZN3I2C5writeEhhPhh+0x19e>
     384:	00 00       	nop
				_delay_ms(2000);
				ERROR_I2C();		/* must send stop condition */
     386:	20 df       	rcall	.-448    	; 0x1c8 <_Z9ERROR_I2Cv>
				I2Cstop();
     388:	13 df       	rcall	.-474    	; 0x1b0 <_Z7I2Cstopv>
				return 6;
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	04 c0       	rjmp	.+8      	; 0x396 <_ZN3I2C5writeEhhPhh+0x1b0>
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     38e:	68 14       	cp	r6, r8
     390:	79 04       	cpc	r7, r9
     392:	a1 f6       	brne	.-88     	; 0x33c <_ZN3I2C5writeEhhPhh+0x156>
				ERROR_I2C();		/* must send stop condition */
				I2Cstop();
				return 6;
		}
	}
	return 0;
     394:	80 e0       	ldi	r24, 0x00	; 0
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	bf 90       	pop	r11
     3a8:	af 90       	pop	r10
     3aa:	9f 90       	pop	r9
     3ac:	8f 90       	pop	r8
     3ae:	7f 90       	pop	r7
     3b0:	6f 90       	pop	r6
     3b2:	5f 90       	pop	r5
     3b4:	4f 90       	pop	r4
     3b6:	3f 90       	pop	r3
     3b8:	2f 90       	pop	r2
     3ba:	08 95       	ret

000003bc <_ZN3I2C5writeEhhh>:
	 * register to have valid contents while the TWINT bit in TWCR is set.
	 */
uint8_t twst;

uint8_t I2C::write(uint8_t phys_address, uint8_t address, uint8_t data)
{
     3bc:	0f 93       	push	r16
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t data1[1];
	data1[0] = data;
     3c8:	29 83       	std	Y+1, r18	; 0x01
	write(phys_address,address, data1, 1);
     3ca:	01 e0       	ldi	r16, 0x01	; 1
     3cc:	9e 01       	movw	r18, r28
     3ce:	2f 5f       	subi	r18, 0xFF	; 255
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	09 df       	rcall	.-494    	; 0x1e6 <_ZN3I2C5writeEhhPhh>
}
     3d4:	0f 90       	pop	r0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	0f 91       	pop	r16
     3dc:	08 95       	ret

000003de <_ZN3I2C4readEhhPhh>:
	else
	return 0xFF;
}

uint8_t I2C::read(uint8_t phys_address, uint8_t address, uint8_t *data, uint8_t length)
{
     3de:	2f 92       	push	r2
     3e0:	3f 92       	push	r3
     3e2:	4f 92       	push	r4
     3e4:	5f 92       	push	r5
     3e6:	6f 92       	push	r6
     3e8:	7f 92       	push	r7
     3ea:	8f 92       	push	r8
     3ec:	9f 92       	push	r9
     3ee:	af 92       	push	r10
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	76 2e       	mov	r7, r22
     404:	54 2e       	mov	r5, r20
     406:	79 01       	movw	r14, r18
     408:	0f 2e       	mov	r0, r31
     40a:	f8 ec       	ldi	r31, 0xC8	; 200
     40c:	6f 2e       	mov	r6, r31
     40e:	f0 2d       	mov	r31, r0
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     410:	0f 2e       	mov	r0, r31
     412:	fc eb       	ldi	r31, 0xBC	; 188
     414:	cf 2e       	mov	r12, r31
     416:	d1 2c       	mov	r13, r1
     418:	f0 2d       	mov	r31, r0
	
	begin:
	/*Send start condition*/
	I2Cstart();
	WaitForTWINT();
	switch ((twst = TW_STATUS))
     41a:	c9 eb       	ldi	r28, 0xB9	; 185
     41c:	d0 e0       	ldi	r29, 0x00	; 0
			  /* NB: do /not/ send stop condition */
	}
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
     41e:	0f 2e       	mov	r0, r31
     420:	fb eb       	ldi	r31, 0xBB	; 187
     422:	af 2e       	mov	r10, r31
     424:	b1 2c       	mov	r11, r1
     426:	f0 2d       	mov	r31, r0
     428:	12 c0       	rjmp	.+36     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     42a:	6a 94       	dec	r6
{
	uint8_t twcr, n = 0;
	char buffer[20];
		
	restart:
	if (n++ >= MAX_ITER)
     42c:	61 10       	cpse	r6, r1
     42e:	0f c0       	rjmp	.+30     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
	{
		clearDisplay();
     430:	28 d5       	rcall	.+2640   	; 0xe82 <_Z12clearDisplayv>
		LCD_WriteString("Slave not responding");
     432:	86 e5       	ldi	r24, 0x56	; 86
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	eb d5       	rcall	.+3030   	; 0x100e <_Z15LCD_WriteStringPc>
     438:	2f e7       	ldi	r18, 0x7F	; 127
     43a:	8a e1       	ldi	r24, 0x1A	; 26
     43c:	96 e0       	ldi	r25, 0x06	; 6
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
     448:	00 00       	nop
		_delay_ms(2000);
		return 10;	
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	1d c1       	rjmp	.+570    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     44e:	0f 2e       	mov	r0, r31
     450:	f4 e8       	ldi	r31, 0x84	; 132
     452:	8f 2e       	mov	r8, r31
     454:	f0 2d       	mov	r31, r0
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     456:	0f 2e       	mov	r0, r31
     458:	f4 ea       	ldi	r31, 0xA4	; 164
     45a:	9f 2e       	mov	r9, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	19 2d       	mov	r17, r9
     460:	f6 01       	movw	r30, r12
     462:	10 83       	st	Z, r17
	}
	
	begin:
	/*Send start condition*/
	I2Cstart();
	WaitForTWINT();
     464:	ab de       	rcall	.-682    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     466:	88 81       	ld	r24, Y
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     46e:	80 31       	cpi	r24, 0x10	; 16
     470:	99 f0       	breq	.+38     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     472:	88 33       	cpi	r24, 0x38	; 56
     474:	a9 f3       	breq	.-22     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	79 f0       	breq	.+30     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
		case TW_MT_ARB_LOST:	/*  A master must not initiate a stop condition in order to not corrupt the ongoing transfer from the active master. 
								This will cause a new start condition to be initiated, which will normally be delayed until the currently active master has 
								released the bus. */
			goto begin;
		default:
			clearDisplay();
     47a:	03 d5       	rcall	.+2566   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("Start I2C fail");
     47c:	8f e1       	ldi	r24, 0x1F	; 31
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	c6 d5       	rcall	.+2956   	; 0x100e <_Z15LCD_WriteStringPc>
     482:	ff e7       	ldi	r31, 0x7F	; 127
     484:	2a e1       	ldi	r18, 0x1A	; 26
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	f1 50       	subi	r31, 0x01	; 1
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	80 40       	sbci	r24, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     492:	00 00       	nop
			_delay_ms(2000);		
			return 1;		/* error: not in start condition */
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	f8 c0       	rjmp	.+496    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
			  /* NB: do /not/ send stop condition */
	}
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
     498:	f5 01       	movw	r30, r10
     49a:	70 82       	st	Z, r7
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     49c:	f6 01       	movw	r30, r12
     49e:	80 82       	st	Z, r8
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
	I2CstartTransmit();
	WaitForTWINT();
     4a0:	8d de       	rcall	.-742    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     4a2:	88 81       	ld	r24, Y
     4a4:	88 7f       	andi	r24, 0xF8	; 248
     4a6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     4aa:	80 32       	cpi	r24, 0x20	; 32
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
     4ae:	bd cf       	rjmp	.-134    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     4b0:	88 33       	cpi	r24, 0x38	; 56
     4b2:	b1 f2       	breq	.-84     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     4b4:	88 31       	cpi	r24, 0x18	; 24
     4b6:	89 f0       	breq	.+34     	; 0x4da <__FUSE_REGION_LENGTH__+0xda>

		case TW_MT_ARB_LOST:	/* re-arbitrate */
			goto begin;

		default:
			clearDisplay();
     4b8:	e4 d4       	rcall	.+2504   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("Invalid phys add");
     4ba:	8e e2       	ldi	r24, 0x2E	; 46
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	a7 d5       	rcall	.+2894   	; 0x100e <_Z15LCD_WriteStringPc>
     4c0:	ff e7       	ldi	r31, 0x7F	; 127
     4c2:	2a e1       	ldi	r18, 0x1A	; 26
     4c4:	86 e0       	ldi	r24, 0x06	; 6
     4c6:	f1 50       	subi	r31, 0x01	; 1
     4c8:	20 40       	sbci	r18, 0x00	; 0
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
     4d0:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     4d2:	7a de       	rcall	.-780    	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     4d4:	6d de       	rcall	.-806    	; 0x1b0 <_Z7I2Cstopv>
			return 2;
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	d7 c0       	rjmp	.+430    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
	}

	//send the address of the register in the IMU chip we want to read
	TWDR = address; //put register address on the bus
     4da:	f5 01       	movw	r30, r10
     4dc:	50 82       	st	Z, r5
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     4de:	f6 01       	movw	r30, r12
     4e0:	80 82       	st	Z, r8
	}

	//send the address of the register in the IMU chip we want to read
	TWDR = address; //put register address on the bus
	I2CstartTransmit();
	WaitForTWINT();	
     4e2:	6c de       	rcall	.-808    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     4e4:	88 81       	ld	r24, Y
     4e6:	88 7f       	andi	r24, 0xF8	; 248
     4e8:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     4ec:	80 33       	cpi	r24, 0x30	; 48
     4ee:	31 f0       	breq	.+12     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
     4f0:	88 33       	cpi	r24, 0x38	; 56
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
     4f4:	b5 cf       	rjmp	.-150    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     4f6:	88 32       	cpi	r24, 0x28	; 40
     4f8:	21 f4       	brne	.+8      	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
     4fa:	14 c0       	rjmp	.+40     	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
	{
		case TW_MT_DATA_ACK:
			break;

		case TW_MT_DATA_NACK:
			I2Cstop();
     4fc:	59 de       	rcall	.-846    	; 0x1b0 <_Z7I2Cstopv>
			return 3;
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	c3 c0       	rjmp	.+390    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			clearDisplay();
     502:	bf d4       	rcall	.+2430   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("No Data Ack from Slave");
     504:	8f e3       	ldi	r24, 0x3F	; 63
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	82 d5       	rcall	.+2820   	; 0x100e <_Z15LCD_WriteStringPc>
     50a:	ff e7       	ldi	r31, 0x7F	; 127
     50c:	2a e1       	ldi	r18, 0x1A	; 26
     50e:	86 e0       	ldi	r24, 0x06	; 6
     510:	f1 50       	subi	r31, 0x01	; 1
     512:	20 40       	sbci	r18, 0x00	; 0
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     51c:	55 de       	rcall	.-854    	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     51e:	48 de       	rcall	.-880    	; 0x1b0 <_Z7I2Cstopv>
			return 4;
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	b2 c0       	rjmp	.+356    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
	
}

void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     524:	f6 01       	movw	r30, r12
     526:	90 82       	st	Z, r9
		
	
	
	/* send repeated start condition */	
	I2Cstart(); 
	WaitForTWINT();
     528:	49 de       	rcall	.-878    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     52a:	88 81       	ld	r24, Y
     52c:	88 7f       	andi	r24, 0xF8	; 248
     52e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     532:	80 31       	cpi	r24, 0x10	; 16
     534:	b1 f0       	breq	.+44     	; 0x562 <__FUSE_REGION_LENGTH__+0x162>
     536:	88 33       	cpi	r24, 0x38	; 56
     538:	09 f4       	brne	.+2      	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
     53a:	92 cf       	rjmp	.-220    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     53c:	88 30       	cpi	r24, 0x08	; 8
     53e:	89 f0       	breq	.+34     	; 0x562 <__FUSE_REGION_LENGTH__+0x162>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			clearDisplay();
     540:	a0 d4       	rcall	.+2368   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("Rs error");
     542:	8b e6       	ldi	r24, 0x6B	; 107
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	63 d5       	rcall	.+2758   	; 0x100e <_Z15LCD_WriteStringPc>
     548:	ff e7       	ldi	r31, 0x7F	; 127
     54a:	2a e1       	ldi	r18, 0x1A	; 26
     54c:	86 e0       	ldi	r24, 0x06	; 6
     54e:	f1 50       	subi	r31, 0x01	; 1
     550:	20 40       	sbci	r18, 0x00	; 0
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
     556:	00 c0       	rjmp	.+0      	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
     558:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     55a:	36 de       	rcall	.-916    	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     55c:	29 de       	rcall	.-942    	; 0x1b0 <_Z7I2Cstopv>
			return 5;
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	93 c0       	rjmp	.+294    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
	}	


	/* send SLA+R */
	TWDR = phys_address | TW_READ; //Load SLA_R into TWDR Register.	
     562:	87 2d       	mov	r24, r7
     564:	81 60       	ori	r24, 0x01	; 1
     566:	f5 01       	movw	r30, r10
     568:	80 83       	st	Z, r24
	//} 
}

void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     56a:	f6 01       	movw	r30, r12
     56c:	80 82       	st	Z, r8


	/* send SLA+R */
	TWDR = phys_address | TW_READ; //Load SLA_R into TWDR Register.	
	I2CstartTransmit();
	WaitForTWINT();
     56e:	26 de       	rcall	.-948    	; 0x1bc <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     570:	88 81       	ld	r24, Y
     572:	88 7f       	andi	r24, 0xF8	; 248
     574:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     578:	80 34       	cpi	r24, 0x40	; 64
     57a:	29 f0       	breq	.+10     	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
     57c:	88 34       	cpi	r24, 0x48	; 72
     57e:	49 f0       	breq	.+18     	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
     580:	88 33       	cpi	r24, 0x38	; 56
     582:	51 f4       	brne	.+20     	; 0x598 <__FUSE_REGION_LENGTH__+0x198>
     584:	68 cf       	rjmp	.-304    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
			I2Cstop();
			return 7;
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     586:	c0 2f       	mov	r28, r16
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	1c 16       	cp	r1, r28
     58c:	1d 06       	cpc	r1, r29
     58e:	ac f0       	brlt	.+42     	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
     590:	7b c0       	rjmp	.+246    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
	{
		case TW_MR_SLA_ACK:
		break;

		case TW_MR_SLA_NACK:
			I2Cstop();
     592:	0e de       	rcall	.-996    	; 0x1b0 <_Z7I2Cstopv>
			return 6;
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	78 c0       	rjmp	.+240    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>

		case TW_MR_ARB_LOST:
			goto begin;

		default:
			clearDisplay();
     598:	74 d4       	rcall	.+2280   	; 0xe82 <_Z12clearDisplayv>
			LCD_WriteString("MR_SLA_ACK ");
     59a:	84 e7       	ldi	r24, 0x74	; 116
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	37 d5       	rcall	.+2670   	; 0x100e <_Z15LCD_WriteStringPc>
     5a0:	ff e7       	ldi	r31, 0x7F	; 127
     5a2:	2a e1       	ldi	r18, 0x1A	; 26
     5a4:	86 e0       	ldi	r24, 0x06	; 6
     5a6:	f1 50       	subi	r31, 0x01	; 1
     5a8:	20 40       	sbci	r18, 0x00	; 0
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
     5b0:	00 00       	nop
			_delay_ms(2000);
			ERROR_I2C();		/* must send stop condition */
     5b2:	0a de       	rcall	.-1004   	; 0x1c8 <_Z9ERROR_I2Cv>
			I2Cstop();
     5b4:	fd dd       	rcall	.-1030   	; 0x1b0 <_Z7I2Cstopv>
			return 7;
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	67 c0       	rjmp	.+206    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
     5ba:	47 01       	movw	r8, r14
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     5bc:	a1 2c       	mov	r10, r1
     5be:	b1 2c       	mov	r11, r1
	{
		if (i == length-1)
     5c0:	8e 01       	movw	r16, r28
     5c2:	01 50       	subi	r16, 0x01	; 1
     5c4:	11 09       	sbc	r17, r1
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
		}
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     5c6:	0f 2e       	mov	r0, r31
     5c8:	fc eb       	ldi	r31, 0xBC	; 188
     5ca:	2f 2e       	mov	r2, r31
     5cc:	31 2c       	mov	r3, r1
     5ce:	f0 2d       	mov	r31, r0
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f4 ec       	ldi	r31, 0xC4	; 196
     5d4:	4f 2e       	mov	r4, r31
     5d6:	f0 2d       	mov	r31, r0

	for (int i = 0; i < length; i++)    /*********************To check***********************/
	{
		if (i == length-1)
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
     5d8:	0f 2e       	mov	r0, r31
     5da:	f4 e8       	ldi	r31, 0x84	; 132
     5dc:	5f 2e       	mov	r5, r31
     5de:	f0 2d       	mov	r31, r0
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		}
		WaitForTWINT();
		switch ((twst = TW_STATUS))
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f9 eb       	ldi	r31, 0xB9	; 185
     5e4:	6f 2e       	mov	r6, r31
     5e6:	71 2c       	mov	r7, r1
     5e8:	f0 2d       	mov	r31, r0
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
	{
		if (i == length-1)
     5ea:	68 01       	movw	r12, r16
     5ec:	0a 15       	cp	r16, r10
     5ee:	1b 05       	cpc	r17, r11
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <__FUSE_REGION_LENGTH__+0x1f8>
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
     5f2:	f1 01       	movw	r30, r2
     5f4:	50 82       	st	Z, r5
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
		}
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     5f8:	f1 01       	movw	r30, r2
     5fa:	40 82       	st	Z, r4
		}
		WaitForTWINT();
     5fc:	df dd       	rcall	.-1090   	; 0x1bc <_Z12WaitForTWINTv>
		switch ((twst = TW_STATUS))
     5fe:	f3 01       	movw	r30, r6
     600:	80 81       	ld	r24, Z
     602:	88 7f       	andi	r24, 0xF8	; 248
     604:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     608:	80 35       	cpi	r24, 0x50	; 80
     60a:	f9 f0       	breq	.+62     	; 0x64a <__FUSE_REGION_LENGTH__+0x24a>
     60c:	88 35       	cpi	r24, 0x58	; 88
     60e:	59 f5       	brne	.+86     	; 0x666 <__FUSE_REGION_LENGTH__+0x266>
		{
			case TW_MR_DATA_NACK:
				if (i == length-1) //good last bit received,  stop I2C
     610:	ca 14       	cp	r12, r10
     612:	db 04       	cpc	r13, r11
     614:	49 f4       	brne	.+18     	; 0x628 <__FUSE_REGION_LENGTH__+0x228>
				{
					data[i] = TWDR;
     616:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     61a:	f7 01       	movw	r30, r14
     61c:	ec 0d       	add	r30, r12
     61e:	fd 1d       	adc	r31, r13
     620:	80 83       	st	Z, r24
					I2Cstop();
     622:	c6 dd       	rcall	.-1140   	; 0x1b0 <_Z7I2Cstopv>
					return 0;
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	30 c0       	rjmp	.+96     	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
				}
				else
				{
					clearDisplay();
     628:	2c d4       	rcall	.+2136   	; 0xe82 <_Z12clearDisplayv>
					LCD_WriteString("TW_MR_DATA_NACK ");
     62a:	80 e8       	ldi	r24, 0x80	; 128
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	ef d4       	rcall	.+2526   	; 0x100e <_Z15LCD_WriteStringPc>
     630:	ff e7       	ldi	r31, 0x7F	; 127
     632:	2a e1       	ldi	r18, 0x1A	; 26
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	f1 50       	subi	r31, 0x01	; 1
     638:	20 40       	sbci	r18, 0x00	; 0
     63a:	80 40       	sbci	r24, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <__FUSE_REGION_LENGTH__+0x236>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <__FUSE_REGION_LENGTH__+0x240>
     640:	00 00       	nop
					_delay_ms(2000);
					ERROR_I2C();		/* must send stop condition */
     642:	c2 dd       	rcall	.-1148   	; 0x1c8 <_Z9ERROR_I2Cv>
					I2Cstop();
     644:	b5 dd       	rcall	.-1174   	; 0x1b0 <_Z7I2Cstopv>
					return 8;					
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	1f c0       	rjmp	.+62     	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
				}
			case TW_MR_DATA_ACK:
				data[i] = TWDR;
     64a:	eb eb       	ldi	r30, 0xBB	; 187
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	f4 01       	movw	r30, r8
     652:	81 93       	st	Z+, r24
     654:	4f 01       	movw	r8, r30
			I2Cstop();
			return 7;
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     656:	ff ef       	ldi	r31, 0xFF	; 255
     658:	af 1a       	sub	r10, r31
     65a:	bf 0a       	sbc	r11, r31
     65c:	ac 16       	cp	r10, r28
     65e:	bd 06       	cpc	r11, r29
     660:	09 f0       	breq	.+2      	; 0x664 <__FUSE_REGION_LENGTH__+0x264>
     662:	c3 cf       	rjmp	.-122    	; 0x5ea <__FUSE_REGION_LENGTH__+0x1ea>
     664:	11 c0       	rjmp	.+34     	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
				}
			case TW_MR_DATA_ACK:
				data[i] = TWDR;
				break;
			default:
				clearDisplay();
     666:	0d d4       	rcall	.+2074   	; 0xe82 <_Z12clearDisplayv>
				LCD_WriteString("MR_SLA_ACK ");
     668:	84 e7       	ldi	r24, 0x74	; 116
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	d0 d4       	rcall	.+2464   	; 0x100e <_Z15LCD_WriteStringPc>
     66e:	2f e7       	ldi	r18, 0x7F	; 127
     670:	8a e1       	ldi	r24, 0x1A	; 26
     672:	96 e0       	ldi	r25, 0x06	; 6
     674:	21 50       	subi	r18, 0x01	; 1
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <__FUSE_REGION_LENGTH__+0x274>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <__FUSE_REGION_LENGTH__+0x27e>
     67e:	00 00       	nop
				_delay_ms(2000);
				ERROR_I2C();		/* must send stop condition */
     680:	a3 dd       	rcall	.-1210   	; 0x1c8 <_Z9ERROR_I2Cv>
				I2Cstop();
     682:	96 dd       	rcall	.-1236   	; 0x1b0 <_Z7I2Cstopv>
				return 9;
     684:	89 e0       	ldi	r24, 0x09	; 9
     686:	00 c0       	rjmp	.+0      	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
		}
	}

	
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	3f 90       	pop	r3
     6aa:	2f 90       	pop	r2
     6ac:	08 95       	ret

000006ae <_ZN3I2C4readEhh>:
	}
	return 0;
}

uint8_t I2C::read(uint8_t phys_address, uint8_t address)
{
     6ae:	0f 93       	push	r16
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	1f 92       	push	r1
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[1];
	if(read(phys_address,address,data, 1) == 0)
     6ba:	01 e0       	ldi	r16, 0x01	; 1
     6bc:	9e 01       	movw	r18, r28
     6be:	2f 5f       	subi	r18, 0xFF	; 255
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	8d de       	rcall	.-742    	; 0x3de <_ZN3I2C4readEhhPhh>
     6c4:	81 11       	cpse	r24, r1
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <_ZN3I2C4readEhh+0x1e>
	return data[0];
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <_ZN3I2C4readEhh+0x20>
	else
	return 0xFF;
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
}
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <_ZN3IMUC1Ev>:
int16_t tempRaw;
uint32_t timer;
uint8_t i2cData[14];

//constructor
IMU::IMU()
     6d8:	08 95       	ret

000006da <_ZN3IMU15IMUTakeMeasuresE3I2C>:
		while(1);
	}
}

void IMU::IMUTakeMeasures(I2C i2c)
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	63 97       	sbiw	r28, 0x13	; 19
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	7c 01       	movw	r14, r24
     6f6:	6b 8b       	std	Y+19, r22	; 0x13
	uint8_t data[18];
	if(i2c.read(IMU_ADDRESS,ACCEL_XOUT_H, data,18) == 0)
     6f8:	02 e1       	ldi	r16, 0x12	; 18
     6fa:	9e 01       	movw	r18, r28
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	4b e3       	ldi	r20, 0x3B	; 59
     702:	60 ed       	ldi	r22, 0xD0	; 208
     704:	ce 01       	movw	r24, r28
     706:	43 96       	adiw	r24, 0x13	; 19
     708:	6a de       	rcall	.-812    	; 0x3de <_ZN3I2C4readEhhPhh>
     70a:	81 11       	cpse	r24, r1
     70c:	41 c0       	rjmp	.+130    	; 0x790 <_ZN3IMU15IMUTakeMeasuresE3I2C+0xb6>
	{
		accx = (data[0] << 8) | data[1];
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	98 2f       	mov	r25, r24
     714:	88 27       	eor	r24, r24
     716:	2a 81       	ldd	r18, Y+2	; 0x02
     718:	82 2b       	or	r24, r18
     71a:	f7 01       	movw	r30, r14
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
		accy = (data[2] << 8) | data[3];
		accz = (data[4] << 8) | data[5];
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	98 2f       	mov	r25, r24
     726:	88 27       	eor	r24, r24
     728:	2e 81       	ldd	r18, Y+6	; 0x06
     72a:	82 2b       	or	r24, r18
     72c:	95 83       	std	Z+5, r25	; 0x05
     72e:	84 83       	std	Z+4, r24	; 0x04
		accy = (data[6] << 8) | data[7];
     730:	8f 81       	ldd	r24, Y+7	; 0x07
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	98 2f       	mov	r25, r24
     736:	88 27       	eor	r24, r24
     738:	28 85       	ldd	r18, Y+8	; 0x08
     73a:	82 2b       	or	r24, r18
     73c:	93 83       	std	Z+3, r25	; 0x03
     73e:	82 83       	std	Z+2, r24	; 0x02
		temp = (data[8] << 8) | data[9];
     740:	89 85       	ldd	r24, Y+9	; 0x09
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	98 2f       	mov	r25, r24
     746:	88 27       	eor	r24, r24
     748:	2a 85       	ldd	r18, Y+10	; 0x0a
     74a:	82 2b       	or	r24, r18
     74c:	97 83       	std	Z+7, r25	; 0x07
     74e:	86 83       	std	Z+6, r24	; 0x06
		gyrx = (data[10] << 8) | data[11];
     750:	8b 85       	ldd	r24, Y+11	; 0x0b
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	98 2f       	mov	r25, r24
     756:	88 27       	eor	r24, r24
     758:	2c 85       	ldd	r18, Y+12	; 0x0c
     75a:	82 2b       	or	r24, r18
     75c:	91 87       	std	Z+9, r25	; 0x09
     75e:	80 87       	std	Z+8, r24	; 0x08
		gyry = (data[12] << 8) | data[13];
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	98 2f       	mov	r25, r24
     766:	88 27       	eor	r24, r24
     768:	2e 85       	ldd	r18, Y+14	; 0x0e
     76a:	82 2b       	or	r24, r18
     76c:	93 87       	std	Z+11, r25	; 0x0b
     76e:	82 87       	std	Z+10, r24	; 0x0a
		gyrz = (data[14] << 8) | data[15];
     770:	8f 85       	ldd	r24, Y+15	; 0x0f
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	98 2f       	mov	r25, r24
     776:	88 27       	eor	r24, r24
     778:	28 89       	ldd	r18, Y+16	; 0x10
     77a:	82 2b       	or	r24, r18
     77c:	95 87       	std	Z+13, r25	; 0x0d
     77e:	84 87       	std	Z+12, r24	; 0x0c
		pres = (data[16] << 8) | data[17];
     780:	89 89       	ldd	r24, Y+17	; 0x11
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	98 2f       	mov	r25, r24
     786:	88 27       	eor	r24, r24
     788:	2a 89       	ldd	r18, Y+18	; 0x12
     78a:	82 2b       	or	r24, r18
     78c:	97 87       	std	Z+15, r25	; 0x0f
     78e:	86 87       	std	Z+14, r24	; 0x0e
	}
}
     790:	63 96       	adiw	r28, 0x13	; 19
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <_Z17bmp180Calibration3I2C>:


void bmp180Calibration(I2C i2c)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	89 83       	std	Y+1, r24	; 0x01
	ac1 = i2c.read(BMP180_ADDRESS, 0xAA);
     7b4:	4a ea       	ldi	r20, 0xAA	; 170
     7b6:	6e ee       	ldi	r22, 0xEE	; 238
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	78 df       	rcall	.-272    	; 0x6ae <_ZN3I2C4readEhh>
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <ac1+0x1>
     7c4:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ac1>
	ac2 = i2c.read(BMP180_ADDRESS, 0xAC);
     7c8:	4c ea       	ldi	r20, 0xAC	; 172
     7ca:	6e ee       	ldi	r22, 0xEE	; 238
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	6e df       	rcall	.-292    	; 0x6ae <_ZN3I2C4readEhh>
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ac2+0x1>
     7d8:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ac2>
	ac3 = i2c.read(BMP180_ADDRESS, 0xAE);
     7dc:	4e ea       	ldi	r20, 0xAE	; 174
     7de:	6e ee       	ldi	r22, 0xEE	; 238
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	64 df       	rcall	.-312    	; 0x6ae <_ZN3I2C4readEhh>
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <ac3+0x1>
     7ec:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <ac3>
	ac4 = i2c.read(BMP180_ADDRESS, 0xB0);
     7f0:	40 eb       	ldi	r20, 0xB0	; 176
     7f2:	6e ee       	ldi	r22, 0xEE	; 238
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	5a df       	rcall	.-332    	; 0x6ae <_ZN3I2C4readEhh>
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <ac4+0x1>
     800:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <ac4>
	ac5 = i2c.read(BMP180_ADDRESS, 0xB2);
     804:	42 eb       	ldi	r20, 0xB2	; 178
     806:	6e ee       	ldi	r22, 0xEE	; 238
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	50 df       	rcall	.-352    	; 0x6ae <_ZN3I2C4readEhh>
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <ac5+0x1>
     814:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <ac5>
	ac6 = i2c.read(BMP180_ADDRESS, 0xB4);
     818:	44 eb       	ldi	r20, 0xB4	; 180
     81a:	6e ee       	ldi	r22, 0xEE	; 238
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	46 df       	rcall	.-372    	; 0x6ae <_ZN3I2C4readEhh>
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <ac6+0x1>
     828:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <ac6>
	b1 = i2c.read(BMP180_ADDRESS, 0xB6);
     82c:	46 eb       	ldi	r20, 0xB6	; 182
     82e:	6e ee       	ldi	r22, 0xEE	; 238
     830:	ce 01       	movw	r24, r28
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	3c df       	rcall	.-392    	; 0x6ae <_ZN3I2C4readEhh>
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <b1+0x1>
     83c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <b1>
	b2 = i2c.read(BMP180_ADDRESS, 0xB8);
     840:	48 eb       	ldi	r20, 0xB8	; 184
     842:	6e ee       	ldi	r22, 0xEE	; 238
     844:	ce 01       	movw	r24, r28
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	32 df       	rcall	.-412    	; 0x6ae <_ZN3I2C4readEhh>
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <b2+0x1>
     850:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <b2>
	mb = i2c.read(BMP180_ADDRESS, 0xBA);
     854:	4a eb       	ldi	r20, 0xBA	; 186
     856:	6e ee       	ldi	r22, 0xEE	; 238
     858:	ce 01       	movw	r24, r28
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	28 df       	rcall	.-432    	; 0x6ae <_ZN3I2C4readEhh>
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <mb+0x1>
     864:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <mb>
	mc = i2c.read(BMP180_ADDRESS, 0xBC);
     868:	4c eb       	ldi	r20, 0xBC	; 188
     86a:	6e ee       	ldi	r22, 0xEE	; 238
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	1e df       	rcall	.-452    	; 0x6ae <_ZN3I2C4readEhh>
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <mc+0x1>
     878:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <mc>
	md = i2c.read(BMP180_ADDRESS, 0xBE);
     87c:	4e eb       	ldi	r20, 0xBE	; 190
     87e:	6e ee       	ldi	r22, 0xEE	; 238
     880:	ce 01       	movw	r24, r28
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	14 df       	rcall	.-472    	; 0x6ae <_ZN3I2C4readEhh>
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <md+0x1>
     88c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <md>
}
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <_ZN3IMU10initializeE3I2C>:
IMU::IMU()
{

}
void IMU::initialize(I2C i2c)
{
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	1f 92       	push	r1
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	69 83       	std	Y+1, r22	; 0x01
	bmp180Calibration(i2c);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	80 df       	rcall	.-256    	; 0x7a8 <_Z17bmp180Calibration3I2C>
	TWBR = ((F_CPU / 400000L) - 16) / 2;
     8a8:	89 ef       	ldi	r24, 0xF9	; 249
     8aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>

	i2c.write(IMU_ADDRESS,PWR_MGMT_1, 0x00); //Not sleep + clock 20 MHz
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	4b e6       	ldi	r20, 0x6B	; 107
     8b2:	60 ed       	ldi	r22, 0xD0	; 208
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	81 dd       	rcall	.-1278   	; 0x3bc <_ZN3I2C5writeEhhh>
	i2c.write(IMU_ADDRESS,SMPLRT_DIV, 0x07); //divide sample rate by 8
     8ba:	27 e0       	ldi	r18, 0x07	; 7
     8bc:	49 e1       	ldi	r20, 0x19	; 25
     8be:	60 ed       	ldi	r22, 0xD0	; 208
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	7b dd       	rcall	.-1290   	; 0x3bc <_ZN3I2C5writeEhhh>
	i2c.write(IMU_ADDRESS,CONFIG, 0x06); //set low pass filter to 5Hz bandwidth
     8c6:	26 e0       	ldi	r18, 0x06	; 6
     8c8:	4a e1       	ldi	r20, 0x1A	; 26
     8ca:	60 ed       	ldi	r22, 0xD0	; 208
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	75 dd       	rcall	.-1302   	; 0x3bc <_ZN3I2C5writeEhhh>
	i2c.write(IMU_ADDRESS,GYRO_CONFIG, 0x10); //set gyro full scale to 1000 dps
     8d2:	20 e1       	ldi	r18, 0x10	; 16
     8d4:	4b e1       	ldi	r20, 0x1B	; 27
     8d6:	60 ed       	ldi	r22, 0xD0	; 208
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	6f dd       	rcall	.-1314   	; 0x3bc <_ZN3I2C5writeEhhh>
	i2c.write(IMU_ADDRESS,ACCEL_CONFIG, 0x01);//set accel full scale to 4g
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	4c e1       	ldi	r20, 0x1C	; 28
     8e2:	60 ed       	ldi	r22, 0xD0	; 208
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	69 dd       	rcall	.-1326   	; 0x3bc <_ZN3I2C5writeEhhh>

	if (i2c.read(IMU_ADDRESS, WHO_AM_I) != 0x73)
     8ea:	45 e7       	ldi	r20, 0x75	; 117
     8ec:	60 ed       	ldi	r22, 0xD0	; 208
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	dd de       	rcall	.-582    	; 0x6ae <_ZN3I2C4readEhh>
     8f4:	83 37       	cpi	r24, 0x73	; 115
     8f6:	29 f0       	breq	.+10     	; 0x902 <_ZN3IMU10initializeE3I2C+0x6a>
	{
		clearDisplay();
     8f8:	c4 d2       	rcall	.+1416   	; 0xe82 <_Z12clearDisplayv>
		LCD_WriteString("Error reading Sensor");
     8fa:	81 e9       	ldi	r24, 0x91	; 145
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	87 d3       	rcall	.+1806   	; 0x100e <_Z15LCD_WriteStringPc>
	i2c.write(IMU_ADDRESS,SMPLRT_DIV, 0x07); //divide sample rate by 8
	i2c.write(IMU_ADDRESS,CONFIG, 0x06); //set low pass filter to 5Hz bandwidth
	i2c.write(IMU_ADDRESS,GYRO_CONFIG, 0x10); //set gyro full scale to 1000 dps
	i2c.write(IMU_ADDRESS,ACCEL_CONFIG, 0x01);//set accel full scale to 4g

	if (i2c.read(IMU_ADDRESS, WHO_AM_I) != 0x73)
     900:	ff cf       	rjmp	.-2      	; 0x900 <_ZN3IMU10initializeE3I2C+0x68>
	{
		clearDisplay();
		LCD_WriteString("Error reading Sensor");
		while(1);
	}
}
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_Z19initializeInterruptv>:
static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;

void initializeInterrupt()
{
	PCICR |= (1<<PCIE0) | (1<<PCIE1); /* enable pin change interrupt 0 and 1 */
     90a:	e8 e6       	ldi	r30, 0x68	; 104
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	83 60       	ori	r24, 0x03	; 3
     912:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4); /* enable pin B0 to trigger PCINT0 */
     914:	eb e6       	ldi	r30, 0x6B	; 107
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT13) | (1<<PCINT14) | (1<<PCINT15); /* enable pin J3-J6 to trigger PCINT1 */
     91e:	ec e6       	ldi	r30, 0x6C	; 108
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	80 6f       	ori	r24, 0xF0	; 240
     926:	80 83       	st	Z, r24
	sei();	/* Turn interrupts on */
     928:	78 94       	sei
     92a:	08 95       	ret

0000092c <_Z24initializecounterPWMreadv>:
}

void initializecounterPWMread()
{
	last_ch_1 = false, last_ch_2 = false, last_ch_3 = false, last_ch_4 = false;
     92c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZL9last_ch_1>
     930:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <_ZL9last_ch_2>
     934:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZL9last_ch_3>
     938:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZL9last_ch_4>
	ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
     93c:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <_ZL13ch_1_counting>
     940:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <_ZL13ch_2_counting>
     944:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZL13ch_3_counting>
     948:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZL13ch_4_counting>
	ch_1_pw = 0, ch_2_pw = 0, ch_3_pw = 0, ch_4_pw = 0;
     94c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <ch_1_pw+0x1>
     950:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <ch_1_pw>
     954:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <ch_2_pw+0x1>
     958:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <ch_2_pw>
     95c:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <ch_3_pw+0x1>
     960:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <ch_3_pw>
     964:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <ch_4_pw+0x1>
     968:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <ch_4_pw>
	//counter for measuring pulse width of incoming radio signal
	TCCR3B |= (1 << CS30); //set-up counter in normal mode with prescaler = 1
     96c:	e1 e9       	ldi	r30, 0x91	; 145
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3); // enable interrupt on overflow
     976:	e1 e7       	ldi	r30, 0x71	; 113
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 83       	st	Z, r24
     980:	08 95       	ret

00000982 <__vector_9>:
}
//for button press
ISR(PCINT0_vect) {
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
	//read pin PB4 and if 1 this must be a rising edge change
	if (PINB & 0b00010000) button_rising = true;
     990:	1c 9b       	sbis	0x03, 4	; 3
     992:	04 c0       	rjmp	.+8      	; 0x99c <__vector_9+0x1a>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <button_rising>
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__vector_9+0x20>
	else button_falling = true;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <button_falling>
     9a2:	87 e8       	ldi	r24, 0x87	; 135
     9a4:	93 e1       	ldi	r25, 0x13	; 19
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <__vector_9+0x24>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__vector_9+0x2a>
     9ac:	00 00       	nop
	_delay_ms(20); //debounce
}
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_10>:
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
	//channel_1
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
     9d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     9d8:	83 ff       	sbrs	r24, 3
     9da:	6b c1       	rjmp	.+726    	; 0xcb2 <__vector_10+0x2f6>
     9dc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZL9last_ch_1>
     9e0:	81 11       	cpse	r24, r1
     9e2:	bf c1       	rjmp	.+894    	; 0xd62 <__vector_10+0x3a6>
     9e4:	6b c1       	rjmp	.+726    	; 0xcbc <__vector_10+0x300>
	{	last_ch_1 = true;
		ch_1_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
			ch_1_ovf_rising = true;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZL15ch_1_ovf_rising>
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <__vector_10+0x36>
		else 
			ch_1_ovf_rising = false;
     9ee:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZL15ch_1_ovf_rising>
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
     9f2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9f6:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	92 2b       	or	r25, r18
     9fe:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <_ZL10count_ch_1+0x1>
     a02:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_ZL10count_ch_1>
     a06:	3f c0       	rjmp	.+126    	; 0xa86 <__vector_10+0xca>
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
     a08:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZL9last_ch_1>
     a0c:	81 11       	cpse	r24, r1
     a0e:	60 c1       	rjmp	.+704    	; 0xcd0 <__vector_10+0x314>
     a10:	3a c0       	rjmp	.+116    	; 0xa86 <__vector_10+0xca>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
     a12:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZL15ch_1_ovf_rising>
     a16:	81 11       	cpse	r24, r1
     a18:	16 c0       	rjmp	.+44     	; 0xa46 <__vector_10+0x8a>
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__vector_10+0x68>
     a1c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZL15ch_1_ovf_rising>
     a20:	88 23       	and	r24, r24
     a22:	89 f0       	breq	.+34     	; 0xa46 <__vector_10+0x8a>
			ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
     a24:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a28:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	92 2b       	or	r25, r18
     a30:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL10count_ch_1>
     a34:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_ZL10count_ch_1+0x1>
     a38:	82 1b       	sub	r24, r18
     a3a:	93 0b       	sbc	r25, r19
     a3c:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <ch_1_pw+0x1>
     a40:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <ch_1_pw>
     a44:	10 c0       	rjmp	.+32     	; 0xa66 <__vector_10+0xaa>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else 
			ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1;				
     a46:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a4a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	92 2b       	or	r25, r18
     a52:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL10count_ch_1>
     a56:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_ZL10count_ch_1+0x1>
     a5a:	82 1b       	sub	r24, r18
     a5c:	93 0b       	sbc	r25, r19
     a5e:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <ch_1_pw+0x1>
     a62:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <ch_1_pw>
		ch_1_counting = false;
     a66:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <_ZL13ch_1_counting>
		//remove the overflow flag only when no channel is counting to avoid problems 
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     a6a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_ZL13ch_2_counting>
     a6e:	81 11       	cpse	r24, r1
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <__vector_10+0xca>
     a72:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZL13ch_3_counting>
     a76:	81 11       	cpse	r24, r1
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <__vector_10+0xca>
     a7a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_ZL13ch_4_counting>
     a7e:	81 11       	cpse	r24, r1
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <__vector_10+0xca>
     a82:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZL11timer_3_ovf>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
     a86:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     a8a:	84 ff       	sbrs	r24, 4
     a8c:	32 c1       	rjmp	.+612    	; 0xcf2 <__vector_10+0x336>
     a8e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_ZL9last_ch_2>
     a92:	81 11       	cpse	r24, r1
     a94:	6b c1       	rjmp	.+726    	; 0xd6c <__vector_10+0x3b0>
     a96:	23 c1       	rjmp	.+582    	; 0xcde <__vector_10+0x322>
	{	last_ch_2 = true;
		ch_2_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_ZL15ch_2_ovf_rising>
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__vector_10+0xe8>
		else ch_2_ovf_rising = false;
     aa0:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZL15ch_2_ovf_rising>
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
     aa4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     aa8:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	92 2b       	or	r25, r18
     ab0:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <_ZL10count_ch_2+0x1>
     ab4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_ZL10count_ch_2>
     ab8:	3f c0       	rjmp	.+126    	; 0xb38 <__vector_10+0x17c>
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     aba:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_ZL9last_ch_2>
     abe:	81 11       	cpse	r24, r1
     ac0:	1d c1       	rjmp	.+570    	; 0xcfc <__vector_10+0x340>
     ac2:	3a c0       	rjmp	.+116    	; 0xb38 <__vector_10+0x17c>
	{	last_ch_2 = false;
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     ac4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZL15ch_2_ovf_rising>
     ac8:	81 11       	cpse	r24, r1
     aca:	16 c0       	rjmp	.+44     	; 0xaf8 <__vector_10+0x13c>
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__vector_10+0x11a>
     ace:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZL15ch_2_ovf_rising>
     ad2:	88 23       	and	r24, r24
     ad4:	89 f0       	breq	.+34     	; 0xaf8 <__vector_10+0x13c>
     ad6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ada:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	92 2b       	or	r25, r18
     ae2:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZL10count_ch_2>
     ae6:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <_ZL10count_ch_2+0x1>
     aea:	82 1b       	sub	r24, r18
     aec:	93 0b       	sbc	r25, r19
     aee:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <ch_2_pw+0x1>
     af2:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ch_2_pw>
     af6:	10 c0       	rjmp	.+32     	; 0xb18 <__vector_10+0x15c>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_1_pw = 65535 - count_ch_2 + (TCNT3L | TCNT3H << 8) + 1;
     af8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     afc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	92 2b       	or	r25, r18
     b04:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZL10count_ch_2>
     b08:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <_ZL10count_ch_2+0x1>
     b0c:	82 1b       	sub	r24, r18
     b0e:	93 0b       	sbc	r25, r19
     b10:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <ch_1_pw+0x1>
     b14:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <ch_1_pw>
		ch_2_counting = false;
     b18:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <_ZL13ch_2_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     b1c:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL13ch_1_counting>
     b20:	81 11       	cpse	r24, r1
     b22:	0a c0       	rjmp	.+20     	; 0xb38 <__vector_10+0x17c>
     b24:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZL13ch_3_counting>
     b28:	81 11       	cpse	r24, r1
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <__vector_10+0x17c>
     b2c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_ZL13ch_4_counting>
     b30:	81 11       	cpse	r24, r1
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <__vector_10+0x17c>
     b34:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZL11timer_3_ovf>
	}
	
	
	//channel_3
	if (PINJ & 0b00100000 && last_ch_3 == false) //Rising edge
     b38:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     b3c:	85 ff       	sbrs	r24, 5
     b3e:	ef c0       	rjmp	.+478    	; 0xd1e <__vector_10+0x362>
     b40:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_ZL9last_ch_3>
     b44:	81 11       	cpse	r24, r1
     b46:	17 c1       	rjmp	.+558    	; 0xd76 <__vector_10+0x3ba>
     b48:	e0 c0       	rjmp	.+448    	; 0xd0a <__vector_10+0x34e>
	{	last_ch_3 = true;
		ch_3_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_ZL15ch_3_ovf_rising>
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <__vector_10+0x19a>
		else ch_3_ovf_rising = false;
     b52:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_ZL15ch_3_ovf_rising>
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
     b56:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     b5a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	92 2b       	or	r25, r18
     b62:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <_ZL10count_ch_3+0x1>
     b66:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <_ZL10count_ch_3>
     b6a:	44 c0       	rjmp	.+136    	; 0xbf4 <__vector_10+0x238>
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
     b6c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_ZL9last_ch_3>
     b70:	81 11       	cpse	r24, r1
     b72:	da c0       	rjmp	.+436    	; 0xd28 <__vector_10+0x36c>
     b74:	3f c0       	rjmp	.+126    	; 0xbf4 <__vector_10+0x238>
	{	last_ch_3 = false;
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     b76:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZL15ch_3_ovf_rising>
     b7a:	81 11       	cpse	r24, r1
     b7c:	16 c0       	rjmp	.+44     	; 0xbaa <__vector_10+0x1ee>
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__vector_10+0x1cc>
     b80:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZL15ch_3_ovf_rising>
     b84:	88 23       	and	r24, r24
     b86:	89 f0       	breq	.+34     	; 0xbaa <__vector_10+0x1ee>
     b88:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     b8c:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	92 2b       	or	r25, r18
     b94:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <_ZL10count_ch_3>
     b98:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <_ZL10count_ch_3+0x1>
     b9c:	82 1b       	sub	r24, r18
     b9e:	93 0b       	sbc	r25, r19
     ba0:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <ch_3_pw+0x1>
     ba4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ch_3_pw>
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <__vector_10+0x218>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_3_pw = 65535 - count_ch_3 + (TCNT3L | TCNT3H << 8) + 3;
     baa:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     bae:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     bb2:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <_ZL10count_ch_3>
     bb6:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <_ZL10count_ch_3+0x1>
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	26 1b       	sub	r18, r22
     bc0:	37 0b       	sbc	r19, r23
     bc2:	89 2f       	mov	r24, r25
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	94 2b       	or	r25, r20
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <ch_3_pw+0x1>
     bd0:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ch_3_pw>
		ch_3_counting = false;
     bd4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZL13ch_3_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     bd8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL13ch_1_counting>
     bdc:	81 11       	cpse	r24, r1
     bde:	0a c0       	rjmp	.+20     	; 0xbf4 <__vector_10+0x238>
     be0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_ZL13ch_2_counting>
     be4:	81 11       	cpse	r24, r1
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <__vector_10+0x238>
     be8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_ZL13ch_4_counting>
     bec:	81 11       	cpse	r24, r1
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <__vector_10+0x238>
     bf0:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZL11timer_3_ovf>
	}
	
	
	//channel_4
	if (PINJ & 0b01000000 && last_ch_4 == false) //Rising edge
     bf4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     bf8:	86 ff       	sbrs	r24, 6
     bfa:	a7 c0       	rjmp	.+334    	; 0xd4a <__vector_10+0x38e>
     bfc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZL9last_ch_4>
     c00:	81 11       	cpse	r24, r1
     c02:	be c0       	rjmp	.+380    	; 0xd80 <__vector_10+0x3c4>
     c04:	98 c0       	rjmp	.+304    	; 0xd36 <__vector_10+0x37a>
	{	last_ch_4 = true;
		ch_4_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_ZL15ch_4_ovf_rising>
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <__vector_10+0x256>
		else ch_4_ovf_rising = false;
     c0e:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <_ZL15ch_4_ovf_rising>
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
     c12:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     c16:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	92 2b       	or	r25, r18
     c1e:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <_ZL10count_ch_4+0x1>
     c22:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_ZL10count_ch_4>
     c26:	b0 c0       	rjmp	.+352    	; 0xd88 <__vector_10+0x3cc>
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
     c28:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZL9last_ch_4>
     c2c:	81 11       	cpse	r24, r1
     c2e:	92 c0       	rjmp	.+292    	; 0xd54 <__vector_10+0x398>
     c30:	ab c0       	rjmp	.+342    	; 0xd88 <__vector_10+0x3cc>
	{	last_ch_4 = false;
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     c32:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZL15ch_4_ovf_rising>
     c36:	81 11       	cpse	r24, r1
     c38:	16 c0       	rjmp	.+44     	; 0xc66 <__vector_10+0x2aa>
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <__vector_10+0x288>
     c3c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZL15ch_4_ovf_rising>
     c40:	88 23       	and	r24, r24
     c42:	89 f0       	breq	.+34     	; 0xc66 <__vector_10+0x2aa>
     c44:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     c48:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	92 2b       	or	r25, r18
     c50:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <_ZL10count_ch_4>
     c54:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <_ZL10count_ch_4+0x1>
     c58:	82 1b       	sub	r24, r18
     c5a:	93 0b       	sbc	r25, r19
     c5c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <ch_4_pw+0x1>
     c60:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <ch_4_pw>
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <__vector_10+0x2d4>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_4_pw = 65535 - count_ch_4 + (TCNT3L | TCNT3H << 8) + 4;
     c66:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     c6a:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     c6e:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <_ZL10count_ch_4>
     c72:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <_ZL10count_ch_4+0x1>
     c76:	23 e0       	ldi	r18, 0x03	; 3
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	26 1b       	sub	r18, r22
     c7c:	37 0b       	sbc	r19, r23
     c7e:	89 2f       	mov	r24, r25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	94 2b       	or	r25, r20
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <ch_4_pw+0x1>
     c8c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <ch_4_pw>
		ch_4_counting = false;
     c90:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZL13ch_4_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     c94:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZL13ch_1_counting>
     c98:	81 11       	cpse	r24, r1
     c9a:	76 c0       	rjmp	.+236    	; 0xd88 <__vector_10+0x3cc>
     c9c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_ZL13ch_2_counting>
     ca0:	81 11       	cpse	r24, r1
     ca2:	72 c0       	rjmp	.+228    	; 0xd88 <__vector_10+0x3cc>
     ca4:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZL13ch_3_counting>
     ca8:	81 11       	cpse	r24, r1
     caa:	6e c0       	rjmp	.+220    	; 0xd88 <__vector_10+0x3cc>
     cac:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZL11timer_3_ovf>
     cb0:	6b c0       	rjmp	.+214    	; 0xd88 <__vector_10+0x3cc>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
     cb2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     cb6:	83 ff       	sbrs	r24, 3
     cb8:	a7 ce       	rjmp	.-690    	; 0xa08 <__vector_10+0x4c>
     cba:	e5 ce       	rjmp	.-566    	; 0xa86 <__vector_10+0xca>
}
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
	//channel_1
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <_ZL9last_ch_1>
		ch_1_counting = true;
     cc2:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZL13ch_1_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
     cc6:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     cca:	81 11       	cpse	r24, r1
     ccc:	8c ce       	rjmp	.-744    	; 0x9e6 <__vector_10+0x2a>
     cce:	8f ce       	rjmp	.-738    	; 0x9ee <__vector_10+0x32>
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
     cd0:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZL9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
     cd4:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     cd8:	81 11       	cpse	r24, r1
     cda:	a0 ce       	rjmp	.-704    	; 0xa1c <__vector_10+0x60>
     cdc:	9a ce       	rjmp	.-716    	; 0xa12 <__vector_10+0x56>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
	{	last_ch_2 = true;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZL9last_ch_2>
		ch_2_counting = true;
     ce4:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_ZL13ch_2_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
     ce8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     cec:	81 11       	cpse	r24, r1
     cee:	d4 ce       	rjmp	.-600    	; 0xa98 <__vector_10+0xdc>
     cf0:	d7 ce       	rjmp	.-594    	; 0xaa0 <__vector_10+0xe4>
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     cf2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     cf6:	84 ff       	sbrs	r24, 4
     cf8:	e0 ce       	rjmp	.-576    	; 0xaba <__vector_10+0xfe>
     cfa:	1e cf       	rjmp	.-452    	; 0xb38 <__vector_10+0x17c>
	{	last_ch_2 = false;
     cfc:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <_ZL9last_ch_2>
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     d00:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     d04:	81 11       	cpse	r24, r1
     d06:	e3 ce       	rjmp	.-570    	; 0xace <__vector_10+0x112>
     d08:	dd ce       	rjmp	.-582    	; 0xac4 <__vector_10+0x108>
	}
	
	
	//channel_3
	if (PINJ & 0b00100000 && last_ch_3 == false) //Rising edge
	{	last_ch_3 = true;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZL9last_ch_3>
		ch_3_counting = true;
     d10:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_ZL13ch_3_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
     d14:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     d18:	81 11       	cpse	r24, r1
     d1a:	17 cf       	rjmp	.-466    	; 0xb4a <__vector_10+0x18e>
     d1c:	1a cf       	rjmp	.-460    	; 0xb52 <__vector_10+0x196>
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
     d1e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d22:	85 ff       	sbrs	r24, 5
     d24:	23 cf       	rjmp	.-442    	; 0xb6c <__vector_10+0x1b0>
     d26:	66 cf       	rjmp	.-308    	; 0xbf4 <__vector_10+0x238>
	{	last_ch_3 = false;
     d28:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZL9last_ch_3>
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
     d2c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     d30:	81 11       	cpse	r24, r1
     d32:	26 cf       	rjmp	.-436    	; 0xb80 <__vector_10+0x1c4>
     d34:	20 cf       	rjmp	.-448    	; 0xb76 <__vector_10+0x1ba>
	}
	
	
	//channel_4
	if (PINJ & 0b01000000 && last_ch_4 == false) //Rising edge
	{	last_ch_4 = true;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZL9last_ch_4>
		ch_4_counting = true;
     d3c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_ZL13ch_4_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
     d40:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     d44:	81 11       	cpse	r24, r1
     d46:	5f cf       	rjmp	.-322    	; 0xc06 <__vector_10+0x24a>
     d48:	62 cf       	rjmp	.-316    	; 0xc0e <__vector_10+0x252>
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
     d4a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d4e:	86 ff       	sbrs	r24, 6
     d50:	6b cf       	rjmp	.-298    	; 0xc28 <__vector_10+0x26c>
     d52:	1a c0       	rjmp	.+52     	; 0xd88 <__vector_10+0x3cc>
	{	last_ch_4 = false;
     d54:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZL9last_ch_4>
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
     d58:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZL11timer_3_ovf>
     d5c:	81 11       	cpse	r24, r1
     d5e:	6e cf       	rjmp	.-292    	; 0xc3c <__vector_10+0x280>
     d60:	68 cf       	rjmp	.-304    	; 0xc32 <__vector_10+0x276>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
     d62:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d66:	83 ff       	sbrs	r24, 3
     d68:	b3 cf       	rjmp	.-154    	; 0xcd0 <__vector_10+0x314>
     d6a:	8d ce       	rjmp	.-742    	; 0xa86 <__vector_10+0xca>
		if(timer_3_ovf) ch_2_ovf_rising = true;
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     d6c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d70:	84 ff       	sbrs	r24, 4
     d72:	c4 cf       	rjmp	.-120    	; 0xcfc <__vector_10+0x340>
     d74:	e1 ce       	rjmp	.-574    	; 0xb38 <__vector_10+0x17c>
		if(timer_3_ovf) ch_3_ovf_rising = true;
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
     d76:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d7a:	85 ff       	sbrs	r24, 5
     d7c:	d5 cf       	rjmp	.-86     	; 0xd28 <__vector_10+0x36c>
     d7e:	3a cf       	rjmp	.-396    	; 0xbf4 <__vector_10+0x238>
		if(timer_3_ovf) ch_4_ovf_rising = true;
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
     d80:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     d84:	86 ff       	sbrs	r24, 6
     d86:	e6 cf       	rjmp	.-52     	; 0xd54 <__vector_10+0x398>
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
	}
	
	//do the same for every channel when cleaned up
	
}
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_35>:

ISR(TIMER3_OVF_vect) {
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	8f 93       	push	r24
	timer_3_ovf=true;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZL11timer_3_ovf>
	TIFR3 &= ~(1 << TOV3);
     db2:	c0 98       	cbi	0x18, 0	; 24
     db4:	8f 91       	pop	r24
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <_Z6enablev>:
	* @brief Toggle the enable pin to "send" command to display
	* @param None
	* @retval None
	*/
void enable(void){
	PORTL |= (1 << E);
     dc0:	eb e0       	ldi	r30, 0x0B	; 11
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	80 81       	ld	r24, Z
     dc6:	80 68       	ori	r24, 0x80	; 128
     dc8:	80 83       	st	Z, r24
	TCNT1L = 0, TCNT1H = 0;
     dca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     dce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < ENABLE_TIME){/* delay for synchronization */}	
     dd2:	a4 e8       	ldi	r26, 0x84	; 132
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e5 e8       	ldi	r30, 0x85	; 133
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	8c 91       	ld	r24, X
     ddc:	20 81       	ld	r18, Z
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	92 2b       	or	r25, r18
     de2:	80 39       	cpi	r24, 0x90	; 144
     de4:	91 40       	sbci	r25, 0x01	; 1
     de6:	cc f3       	brlt	.-14     	; 0xdda <_Z6enablev+0x1a>
	TCNT1L = 0, TCNT1H = 0;
     de8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     dec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	PORTL &= ~(1 << E);
     df0:	eb e0       	ldi	r30, 0x0B	; 11
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 81       	ld	r24, Z
     df6:	8f 77       	andi	r24, 0x7F	; 127
     df8:	80 83       	st	Z, r24
     dfa:	08 95       	ret

00000dfc <_Z13LCD_WriteCharc>:
/**
	* @brief set the data pin to a particular character
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	e6 ea       	ldi	r30, 0xA6	; 166
     e06:	f2 e0       	ldi	r31, 0x02	; 2
	int i;
	for (i = 0; i < 8; i++) {
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
     e0c:	c1 e0       	ldi	r28, 0x01	; 1
     e0e:	d0 e0       	ldi	r29, 0x00	; 0
     e10:	08 2f       	mov	r16, r24
     e12:	10 e0       	ldi	r17, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
     e14:	a8 e0       	ldi	r26, 0x08	; 8
     e16:	b1 e0       	ldi	r27, 0x01	; 1
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
     e18:	9e 01       	movw	r18, r28
     e1a:	04 2e       	mov	r0, r20
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <_Z13LCD_WriteCharc+0x26>
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <_Z13LCD_WriteCharc+0x22>
     e26:	20 23       	and	r18, r16
     e28:	31 23       	and	r19, r17
     e2a:	04 2e       	mov	r0, r20
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <_Z13LCD_WriteCharc+0x36>
     e2e:	35 95       	asr	r19
     e30:	27 95       	ror	r18
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <_Z13LCD_WriteCharc+0x32>
     e36:	21 30       	cpi	r18, 0x01	; 1
     e38:	31 05       	cpc	r19, r1
     e3a:	59 f4       	brne	.+22     	; 0xe52 <_Z13LCD_WriteCharc+0x56>
			PORTK |= (1 << dataPin[i]);
     e3c:	2c 91       	ld	r18, X
     e3e:	ce 01       	movw	r24, r28
     e40:	00 80       	ld	r0, Z
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <_Z13LCD_WriteCharc+0x4c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <_Z13LCD_WriteCharc+0x48>
     e4c:	82 2b       	or	r24, r18
     e4e:	8c 93       	st	X, r24
     e50:	0c c0       	rjmp	.+24     	; 0xe6a <_Z13LCD_WriteCharc+0x6e>
		} else {
			PORTK &= ~(1 << dataPin[i]);
     e52:	2c 91       	ld	r18, X
     e54:	be 01       	movw	r22, r28
     e56:	00 80       	ld	r0, Z
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <_Z13LCD_WriteCharc+0x62>
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <_Z13LCD_WriteCharc+0x5e>
     e62:	96 2f       	mov	r25, r22
     e64:	90 95       	com	r25
     e66:	92 23       	and	r25, r18
     e68:	9c 93       	st	X, r25
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
     e6a:	4f 5f       	subi	r20, 0xFF	; 255
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
     e6e:	32 96       	adiw	r30, 0x02	; 2
     e70:	48 30       	cpi	r20, 0x08	; 8
     e72:	51 05       	cpc	r21, r1
     e74:	89 f6       	brne	.-94     	; 0xe18 <_Z13LCD_WriteCharc+0x1c>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
     e76:	a4 df       	rcall	.-184    	; 0xdc0 <_Z6enablev>
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <_Z12clearDisplayv>:
	* @brief Clear every character on the display and returns to the first address of display
	* @param None
	* @retval None
	*/
void clearDisplay(void){
	PORTL &= ~(1 << RS);
     e82:	eb e0       	ldi	r30, 0x0B	; 11
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 7b       	andi	r24, 0xBF	; 191
     e90:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     e92:	e8 e0       	ldi	r30, 0x08	; 8
     e94:	f1 e0       	ldi	r31, 0x01	; 1
     e96:	80 81       	ld	r24, Z
     e98:	8f 77       	andi	r24, 0x7F	; 127
     e9a:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 7e       	andi	r24, 0xEF	; 239
     eac:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
     eae:	80 81       	ld	r24, Z
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
     eb4:	80 81       	ld	r24, Z
     eb6:	8b 7f       	andi	r24, 0xFB	; 251
     eb8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
     eba:	80 81       	ld	r24, Z
     ebc:	8d 7f       	andi	r24, 0xFD	; 253
     ebe:	80 83       	st	Z, r24
	PORTK |= (1 << DB0);
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	80 83       	st	Z, r24
	enable();
     ec6:	7c df       	rcall	.-264    	; 0xdc0 <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
     ec8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     ecc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}	
     ed0:	a4 e8       	ldi	r26, 0x84	; 132
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e8       	ldi	r30, 0x85	; 133
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8c 91       	ld	r24, X
     eda:	20 81       	ld	r18, Z
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	92 2b       	or	r25, r18
     ee0:	80 3d       	cpi	r24, 0xD0	; 208
     ee2:	97 40       	sbci	r25, 0x07	; 7
     ee4:	cc f3       	brlt	.-14     	; 0xed8 <_Z12clearDisplayv+0x56>
	TCNT1L = 0, TCNT1H = 0;
     ee6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     eea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     eee:	08 95       	ret

00000ef0 <_Z9SetAdressi>:
	* @retval None
	*	@note When 1-line display mode (N=LOW), DDRAM address is form 0x00 to 0x4F
	* 			In 2-line display mode (N=HIGH), DDRAM address is form 0x00 to 0x27 for first line
	*				and 0x40 to 0x67 for second line
	*/
void SetAdress(int address){
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	8c 01       	movw	r16, r24
  int i;
	PORTL &= ~(1 << RS);
     efa:	eb e0       	ldi	r30, 0x0B	; 11
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	80 81       	ld	r24, Z
     f00:	8f 7d       	andi	r24, 0xDF	; 223
     f02:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     f04:	80 81       	ld	r24, Z
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	80 83       	st	Z, r24
	PORTK |= (1 << DB7);
     f0a:	e8 e0       	ldi	r30, 0x08	; 8
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	80 81       	ld	r24, Z
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	80 83       	st	Z, r24
     f14:	e6 ea       	ldi	r30, 0xA6	; 166
     f16:	f2 e0       	ldi	r31, 0x02	; 2
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
		if ((address & (1 << i)) >> i == 1) {
     f1c:	c1 e0       	ldi	r28, 0x01	; 1
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
     f20:	a8 e0       	ldi	r26, 0x08	; 8
     f22:	b1 e0       	ldi	r27, 0x01	; 1
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
		if ((address & (1 << i)) >> i == 1) {
     f24:	9e 01       	movw	r18, r28
     f26:	04 2e       	mov	r0, r20
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <_Z9SetAdressi+0x3e>
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <_Z9SetAdressi+0x3a>
     f32:	20 23       	and	r18, r16
     f34:	31 23       	and	r19, r17
     f36:	04 2e       	mov	r0, r20
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <_Z9SetAdressi+0x4e>
     f3a:	35 95       	asr	r19
     f3c:	27 95       	ror	r18
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <_Z9SetAdressi+0x4a>
     f42:	21 30       	cpi	r18, 0x01	; 1
     f44:	31 05       	cpc	r19, r1
     f46:	59 f4       	brne	.+22     	; 0xf5e <_Z9SetAdressi+0x6e>
			PORTK |= (1 << dataPin[i]);
     f48:	2c 91       	ld	r18, X
     f4a:	ce 01       	movw	r24, r28
     f4c:	00 80       	ld	r0, Z
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <_Z9SetAdressi+0x64>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <_Z9SetAdressi+0x60>
     f58:	82 2b       	or	r24, r18
     f5a:	8c 93       	st	X, r24
     f5c:	0c c0       	rjmp	.+24     	; 0xf76 <_Z9SetAdressi+0x86>
		} else {
			PORTK &= ~(1 << dataPin[i]);
     f5e:	2c 91       	ld	r18, X
     f60:	be 01       	movw	r22, r28
     f62:	00 80       	ld	r0, Z
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <_Z9SetAdressi+0x7a>
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <_Z9SetAdressi+0x76>
     f6e:	96 2f       	mov	r25, r22
     f70:	90 95       	com	r25
     f72:	92 23       	and	r25, r18
     f74:	9c 93       	st	X, r25
  int i;
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
     f76:	4f 5f       	subi	r20, 0xFF	; 255
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	32 96       	adiw	r30, 0x02	; 2
     f7c:	47 30       	cpi	r20, 0x07	; 7
     f7e:	51 05       	cpc	r21, r1
     f80:	89 f6       	brne	.-94     	; 0xf24 <_Z9SetAdressi+0x34>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
     f82:	1e df       	rcall	.-452    	; 0xdc0 <_Z6enablev>
}
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <_Z10returnHomev>:
	* @brief change the address of the LCD pointer to the first one
	* @param None
	* @retval None
	*/
void returnHome(void){
	PORTL &= ~(1 << RS);
     f8e:	eb e0       	ldi	r30, 0x0B	; 11
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	80 81       	ld	r24, Z
     f94:	8f 7d       	andi	r24, 0xDF	; 223
     f96:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7b       	andi	r24, 0xBF	; 191
     f9c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
     f9e:	e8 e0       	ldi	r30, 0x08	; 8
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
     fa8:	80 81       	ld	r24, Z
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
     fba:	80 81       	ld	r24, Z
     fbc:	87 7f       	andi	r24, 0xF7	; 247
     fbe:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
     fc6:	80 81       	ld	r24, Z
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
     fcc:	80 81       	ld	r24, Z
     fce:	8e 7f       	andi	r24, 0xFE	; 254
     fd0:	80 83       	st	Z, r24
	enable();
     fd2:	f6 de       	rcall	.-532    	; 0xdc0 <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
     fd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     fd8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}
     fdc:	a4 e8       	ldi	r26, 0x84	; 132
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e8       	ldi	r30, 0x85	; 133
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8c 91       	ld	r24, X
     fe6:	20 81       	ld	r18, Z
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	92 2b       	or	r25, r18
     fec:	80 3d       	cpi	r24, 0xD0	; 208
     fee:	97 40       	sbci	r25, 0x07	; 7
     ff0:	cc f3       	brlt	.-14     	; 0xfe4 <_Z10returnHomev+0x56>
	TCNT1L = 0, TCNT1H = 0;
     ff2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     ff6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     ffa:	08 95       	ret

00000ffc <_Z9inputModev>:
	* @brief set up pins to input mode
	* @param None
	* @retval None
	*/
void inputMode(void){
	PORTL |= (1 << RS);
     ffc:	eb e0       	ldi	r30, 0x0B	; 11
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	80 81       	ld	r24, Z
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
    1006:	80 81       	ld	r24, Z
    1008:	8f 7b       	andi	r24, 0xBF	; 191
    100a:	80 83       	st	Z, r24
    100c:	08 95       	ret

0000100e <_Z15LCD_WriteStringPc>:
/**
	* @brief send one by one all the character of the string to LCD_WriteChar()
  * @param string: String to be printed on the LCD
	* @retval None
	*/
void LCD_WriteString(char * string){
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	8c 01       	movw	r16, r24
	int i;
	inputMode(); /************ NOT sure we need this */
    1018:	f1 df       	rcall	.-30     	; 0xffc <_Z9inputModev>
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
    101a:	f8 01       	movw	r30, r16
    101c:	80 81       	ld	r24, Z
    101e:	81 11       	cpse	r24, r1
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <_Z15LCD_WriteStringPc+0x26>
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
    1024:	eb de       	rcall	.-554    	; 0xdfc <_Z13LCD_WriteCharc>
void LCD_WriteString(char * string){
	int i;
	inputMode(); /************ NOT sure we need this */
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
    1026:	c0 17       	cp	r28, r16
    1028:	d1 07       	cpc	r29, r17
    102a:	51 f0       	breq	.+20     	; 0x1040 <_Z15LCD_WriteStringPc+0x32>
    102c:	89 91       	ld	r24, Y+
    102e:	81 11       	cpse	r24, r1
    1030:	f9 cf       	rjmp	.-14     	; 0x1024 <_Z15LCD_WriteStringPc+0x16>
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
    1034:	e3 de       	rcall	.-570    	; 0xdfc <_Z13LCD_WriteCharc>
    1036:	e8 01       	movw	r28, r16
    1038:	21 96       	adiw	r28, 0x01	; 1
    103a:	00 5f       	subi	r16, 0xF0	; 240
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	f6 cf       	rjmp	.-20     	; 0x102c <_Z15LCD_WriteStringPc+0x1e>
	}
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	08 95       	ret

0000104a <_Z6turnOnv>:
	* @brief Turn on the display
	* @param None
	* @retval None
	*/
void turnOn(void){
	PORTL &= ~(1 << RS);
    104a:	eb e0       	ldi	r30, 0x0B	; 11
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	80 81       	ld	r24, Z
    1050:	8f 7d       	andi	r24, 0xDF	; 223
    1052:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
    1054:	80 81       	ld	r24, Z
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
    105a:	e8 e0       	ldi	r30, 0x08	; 8
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	80 81       	ld	r24, Z
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
    1064:	80 81       	ld	r24, Z
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
    106a:	80 81       	ld	r24, Z
    106c:	8f 7d       	andi	r24, 0xDF	; 223
    106e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
    1070:	80 81       	ld	r24, Z
    1072:	8f 7e       	andi	r24, 0xEF	; 239
    1074:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
    1076:	80 81       	ld	r24, Z
    1078:	88 60       	ori	r24, 0x08	; 8
    107a:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
    1082:	80 81       	ld	r24, Z
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
    1088:	80 81       	ld	r24, Z
    108a:	8e 7f       	andi	r24, 0xFE	; 254
    108c:	80 83       	st	Z, r24
	enable();
    108e:	98 ce       	rjmp	.-720    	; 0xdc0 <_Z6enablev>
    1090:	08 95       	ret

00001092 <_Z11functionSetv>:
	* @brief Set up length of data bus, and size of display
	* @param None
	* @retval None
	*/
void functionSet(void){
	PORTL &= ~(1 << RS);
    1092:	eb e0       	ldi	r30, 0x0B	; 11
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	80 81       	ld	r24, Z
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
    109c:	80 81       	ld	r24, Z
    109e:	8f 7b       	andi	r24, 0xBF	; 191
    10a0:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
    10a2:	e8 e0       	ldi	r30, 0x08	; 8
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 77       	andi	r24, 0x7F	; 127
    10aa:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	80 83       	st	Z, r24
	PORTK |= (1 << DB5);
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	80 83       	st	Z, r24
	PORTK |= (1 << DB4);
    10b8:	80 81       	ld	r24, Z
    10ba:	80 61       	ori	r24, 0x10	; 16
    10bc:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
    10be:	80 81       	ld	r24, Z
    10c0:	88 60       	ori	r24, 0x08	; 8
    10c2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
    10c4:	80 81       	ld	r24, Z
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	80 83       	st	Z, r24
	enable();
    10d6:	74 ce       	rjmp	.-792    	; 0xdc0 <_Z6enablev>
    10d8:	08 95       	ret

000010da <_Z9entryModev>:
	* @brief set up the entry mode of the display
	* @param None
	* @retval None
	*/
void entryMode(void){
	PORTL &= ~(1 << RS);
    10da:	eb e0       	ldi	r30, 0x0B	; 11
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7d       	andi	r24, 0xDF	; 223
    10e2:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 7b       	andi	r24, 0xBF	; 191
    10e8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
    10ea:	e8 e0       	ldi	r30, 0x08	; 8
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 77       	andi	r24, 0x7F	; 127
    10f2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7b       	andi	r24, 0xBF	; 191
    10f8:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
    1100:	80 81       	ld	r24, Z
    1102:	8f 7e       	andi	r24, 0xEF	; 239
    1104:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
    1106:	80 81       	ld	r24, Z
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
    110c:	80 81       	ld	r24, Z
    110e:	84 60       	ori	r24, 0x04	; 4
    1110:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
    1112:	80 81       	ld	r24, Z
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
    1118:	80 81       	ld	r24, Z
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	80 83       	st	Z, r24
	enable();
    111e:	50 ce       	rjmp	.-864    	; 0xdc0 <_Z6enablev>
    1120:	08 95       	ret

00001122 <_Z7initLCDv>:
	* @param None
	* @retval None
	*/
void initLCD(void){
	//init timer for LCD control. Counts up every 1us
	TCCR1B |= (1 << CS00); /*prescaler 1*/
    1122:	e1 e8       	ldi	r30, 0x81	; 129
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	81 60       	ori	r24, 0x01	; 1
    112a:	80 83       	st	Z, r24
	//set pins as outputs
	DDRK |= (1 << DDK7) | (1 << DDK6) | (1 << DDK5) | (1 << DDK4) | (1 << DDK3) | (1 << DDK2) | (1 << DDK1) | (1 << DDK0);
    112c:	e7 e0       	ldi	r30, 0x07	; 7
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	80 81       	ld	r24, Z
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	80 83       	st	Z, r24
	DDRL |= (1 << DDL7) | (1 << DDL6) | (1 << DDL5);
    1136:	ea e0       	ldi	r30, 0x0A	; 10
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	80 81       	ld	r24, Z
    113c:	80 6e       	ori	r24, 0xE0	; 224
    113e:	80 83       	st	Z, r24
	clearDisplay();
    1140:	a0 de       	rcall	.-704    	; 0xe82 <_Z12clearDisplayv>
	turnOn();
    1142:	83 df       	rcall	.-250    	; 0x104a <_Z6turnOnv>
	functionSet();
    1144:	a6 df       	rcall	.-180    	; 0x1092 <_Z11functionSetv>
	entryMode();
    1146:	c9 df       	rcall	.-110    	; 0x10da <_Z9entryModev>
	returnHome();
    1148:	22 cf       	rjmp	.-444    	; 0xf8e <_Z10returnHomev>
    114a:	08 95       	ret

0000114c <main>:
#include "lcd.h"
#include "I2C.h"
#include "IMU.h"

int main()
{
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	a6 97       	sbiw	r28, 0x26	; 38
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
	//initialize LCD
	initLCD(); 		/* configure LCD */	
    1160:	e0 df       	rcall	.-64     	; 0x1122 <_Z7initLCDv>
	//char* buffers for printing stuff on the LCD
	char buffer[20];
	//create ESC object
	esc allESC;
    1162:	ce 01       	movw	r24, r28
    1164:	86 96       	adiw	r24, 0x26	; 38
    1166:	0e 94 94 00 	call	0x128	; 0x128 <_ZN3escC1Ev>
	// initialize ESC
	allESC.initialize();
    116a:	ce 01       	movw	r24, r28
    116c:	86 96       	adiw	r24, 0x26	; 38
    116e:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN3esc10initializeEv>
	//create I2C object
	I2C i2c;
    1172:	ce 01       	movw	r24, r28
    1174:	85 96       	adiw	r24, 0x25	; 37
    1176:	1a d8       	rcall	.-4044   	; 0x1ac <_ZN3I2CC1Ev>
	//initialize I2C
	i2c.initialize();
    1178:	ce 01       	movw	r24, r28
    117a:	85 96       	adiw	r24, 0x25	; 37
    117c:	18 d8       	rcall	.-4048   	; 0x1ae <_ZN3I2C10initializeEv>
	//create IMU object
	IMU imu;
    117e:	ce 01       	movw	r24, r28
    1180:	45 96       	adiw	r24, 0x15	; 21
    1182:	aa da       	rcall	.-2732   	; 0x6d8 <_ZN3IMUC1Ev>
	//initialize IMU
	imu.initialize(i2c);
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	45 96       	adiw	r24, 0x15	; 21
    118a:	86 db       	rcall	.-2292   	; 0x898 <_ZN3IMU10initializeE3I2C>
	
	//initialize INT
	initializeInterrupt();
    118c:	be db       	rcall	.-2180   	; 0x90a <_Z19initializeInterruptv>
	//initialize Radio Controller counter
	initializecounterPWMread();
    118e:	ce db       	rcall	.-2148   	; 0x92c <_Z24initializecounterPWMreadv>
			
			imu.IMUTakeMeasures(i2c);
			
			clearDisplay();	
			_delay_ms(20);
			sprintf(buffer, "%u    %u     ", imu.accx, imu.accy);
    1190:	0f 2e       	mov	r0, r31
    1192:	f6 eb       	ldi	r31, 0xB6	; 182
    1194:	ef 2e       	mov	r14, r31
    1196:	f2 e0       	ldi	r31, 0x02	; 2
    1198:	ff 2e       	mov	r15, r31
    119a:	f0 2d       	mov	r31, r0
    119c:	8e 01       	movw	r16, r28
    119e:	0f 5f       	subi	r16, 0xFF	; 255
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
			//LCD_WriteString("   Le meilleur");
			//SetAdress(64); // goes to line 2 of LCD
			//LCD_WriteString(" reste a venir!!");					
			//_delay_ms(1000);
			
			imu.IMUTakeMeasures(i2c);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	ce 01       	movw	r24, r28
    11a6:	45 96       	adiw	r24, 0x15	; 21
    11a8:	98 da       	rcall	.-2768   	; 0x6da <_ZN3IMU15IMUTakeMeasuresE3I2C>
			
			clearDisplay();	
    11aa:	6b de       	rcall	.-810    	; 0xe82 <_Z12clearDisplayv>
    11ac:	87 e8       	ldi	r24, 0x87	; 135
    11ae:	93 e1       	ldi	r25, 0x13	; 19
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <main+0x64>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <main+0x6a>
    11b6:	00 00       	nop
			_delay_ms(20);
			sprintf(buffer, "%u    %u     ", imu.accx, imu.accy);
    11b8:	88 8d       	ldd	r24, Y+24	; 0x18
    11ba:	8f 93       	push	r24
    11bc:	8f 89       	ldd	r24, Y+23	; 0x17
    11be:	8f 93       	push	r24
    11c0:	8e 89       	ldd	r24, Y+22	; 0x16
    11c2:	8f 93       	push	r24
    11c4:	8d 89       	ldd	r24, Y+21	; 0x15
    11c6:	8f 93       	push	r24
    11c8:	ff 92       	push	r15
    11ca:	ef 92       	push	r14
    11cc:	1f 93       	push	r17
    11ce:	0f 93       	push	r16
    11d0:	20 d0       	rcall	.+64     	; 0x1212 <sprintf>
			LCD_WriteString(buffer);
    11d2:	c8 01       	movw	r24, r16
    11d4:	1c df       	rcall	.-456    	; 0x100e <_Z15LCD_WriteStringPc>
			SetAdress(LINE2);
    11d6:	80 e4       	ldi	r24, 0x40	; 64
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	8a de       	rcall	.-748    	; 0xef0 <_Z9SetAdressi>
			sprintf(buffer, "%u    %u     ", imu.accz, imu.temp);
    11dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11de:	8f 93       	push	r24
    11e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e2:	8f 93       	push	r24
    11e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11e6:	8f 93       	push	r24
    11e8:	89 8d       	ldd	r24, Y+25	; 0x19
    11ea:	8f 93       	push	r24
    11ec:	ff 92       	push	r15
    11ee:	ef 92       	push	r14
    11f0:	1f 93       	push	r17
    11f2:	0f 93       	push	r16
    11f4:	0e d0       	rcall	.+28     	; 0x1212 <sprintf>
			LCD_WriteString(buffer);
    11f6:	c8 01       	movw	r24, r16
    11f8:	0a df       	rcall	.-492    	; 0x100e <_Z15LCD_WriteStringPc>
    11fa:	87 ea       	ldi	r24, 0xA7	; 167
    11fc:	91 e6       	ldi	r25, 0x61	; 97
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <main+0xb2>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <main+0xb8>
    1204:	00 00       	nop
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	c8 cf       	rjmp	.-112    	; 0x11a2 <main+0x56>

00001212 <sprintf>:
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	2e 97       	sbiw	r28, 0x0e	; 14
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	0e 89       	ldd	r16, Y+22	; 0x16
    122c:	1f 89       	ldd	r17, Y+23	; 0x17
    122e:	86 e0       	ldi	r24, 0x06	; 6
    1230:	8c 83       	std	Y+4, r24	; 0x04
    1232:	1a 83       	std	Y+2, r17	; 0x02
    1234:	09 83       	std	Y+1, r16	; 0x01
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	9f e7       	ldi	r25, 0x7F	; 127
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	ae 01       	movw	r20, r28
    1240:	46 5e       	subi	r20, 0xE6	; 230
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	68 8d       	ldd	r22, Y+24	; 0x18
    1246:	79 8d       	ldd	r23, Y+25	; 0x19
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	11 d0       	rcall	.+34     	; 0x1270 <vfprintf>
    124e:	2f 81       	ldd	r18, Y+7	; 0x07
    1250:	38 85       	ldd	r19, Y+8	; 0x08
    1252:	f8 01       	movw	r30, r16
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	10 82       	st	Z, r1
    125a:	2e 96       	adiw	r28, 0x0e	; 14
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <vfprintf>:
    1270:	2f 92       	push	r2
    1272:	3f 92       	push	r3
    1274:	4f 92       	push	r4
    1276:	5f 92       	push	r5
    1278:	6f 92       	push	r6
    127a:	7f 92       	push	r7
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2c 97       	sbiw	r28, 0x0c	; 12
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	7c 01       	movw	r14, r24
    12a6:	6b 01       	movw	r12, r22
    12a8:	8a 01       	movw	r16, r20
    12aa:	fc 01       	movw	r30, r24
    12ac:	17 82       	std	Z+7, r1	; 0x07
    12ae:	16 82       	std	Z+6, r1	; 0x06
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	81 ff       	sbrs	r24, 1
    12b4:	b0 c1       	rjmp	.+864    	; 0x1616 <vfprintf+0x3a6>
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	4c 01       	movw	r8, r24
    12bc:	f7 01       	movw	r30, r14
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	f6 01       	movw	r30, r12
    12c2:	93 fd       	sbrc	r25, 3
    12c4:	85 91       	lpm	r24, Z+
    12c6:	93 ff       	sbrs	r25, 3
    12c8:	81 91       	ld	r24, Z+
    12ca:	6f 01       	movw	r12, r30
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfprintf+0x62>
    12d0:	9e c1       	rjmp	.+828    	; 0x160e <vfprintf+0x39e>
    12d2:	85 32       	cpi	r24, 0x25	; 37
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <vfprintf+0x74>
    12d6:	93 fd       	sbrc	r25, 3
    12d8:	85 91       	lpm	r24, Z+
    12da:	93 ff       	sbrs	r25, 3
    12dc:	81 91       	ld	r24, Z+
    12de:	6f 01       	movw	r12, r30
    12e0:	85 32       	cpi	r24, 0x25	; 37
    12e2:	21 f4       	brne	.+8      	; 0x12ec <vfprintf+0x7c>
    12e4:	b7 01       	movw	r22, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	c7 d1       	rcall	.+910    	; 0x1678 <fputc>
    12ea:	e8 cf       	rjmp	.-48     	; 0x12bc <vfprintf+0x4c>
    12ec:	51 2c       	mov	r5, r1
    12ee:	31 2c       	mov	r3, r1
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	20 32       	cpi	r18, 0x20	; 32
    12f4:	a0 f4       	brcc	.+40     	; 0x131e <vfprintf+0xae>
    12f6:	8b 32       	cpi	r24, 0x2B	; 43
    12f8:	69 f0       	breq	.+26     	; 0x1314 <vfprintf+0xa4>
    12fa:	30 f4       	brcc	.+12     	; 0x1308 <vfprintf+0x98>
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	59 f0       	breq	.+22     	; 0x1316 <vfprintf+0xa6>
    1300:	83 32       	cpi	r24, 0x23	; 35
    1302:	69 f4       	brne	.+26     	; 0x131e <vfprintf+0xae>
    1304:	20 61       	ori	r18, 0x10	; 16
    1306:	2c c0       	rjmp	.+88     	; 0x1360 <vfprintf+0xf0>
    1308:	8d 32       	cpi	r24, 0x2D	; 45
    130a:	39 f0       	breq	.+14     	; 0x131a <vfprintf+0xaa>
    130c:	80 33       	cpi	r24, 0x30	; 48
    130e:	39 f4       	brne	.+14     	; 0x131e <vfprintf+0xae>
    1310:	21 60       	ori	r18, 0x01	; 1
    1312:	26 c0       	rjmp	.+76     	; 0x1360 <vfprintf+0xf0>
    1314:	22 60       	ori	r18, 0x02	; 2
    1316:	24 60       	ori	r18, 0x04	; 4
    1318:	23 c0       	rjmp	.+70     	; 0x1360 <vfprintf+0xf0>
    131a:	28 60       	ori	r18, 0x08	; 8
    131c:	21 c0       	rjmp	.+66     	; 0x1360 <vfprintf+0xf0>
    131e:	27 fd       	sbrc	r18, 7
    1320:	27 c0       	rjmp	.+78     	; 0x1370 <vfprintf+0x100>
    1322:	30 ed       	ldi	r19, 0xD0	; 208
    1324:	38 0f       	add	r19, r24
    1326:	3a 30       	cpi	r19, 0x0A	; 10
    1328:	78 f4       	brcc	.+30     	; 0x1348 <vfprintf+0xd8>
    132a:	26 ff       	sbrs	r18, 6
    132c:	06 c0       	rjmp	.+12     	; 0x133a <vfprintf+0xca>
    132e:	fa e0       	ldi	r31, 0x0A	; 10
    1330:	5f 9e       	mul	r5, r31
    1332:	30 0d       	add	r19, r0
    1334:	11 24       	eor	r1, r1
    1336:	53 2e       	mov	r5, r19
    1338:	13 c0       	rjmp	.+38     	; 0x1360 <vfprintf+0xf0>
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	38 9e       	mul	r3, r24
    133e:	30 0d       	add	r19, r0
    1340:	11 24       	eor	r1, r1
    1342:	33 2e       	mov	r3, r19
    1344:	20 62       	ori	r18, 0x20	; 32
    1346:	0c c0       	rjmp	.+24     	; 0x1360 <vfprintf+0xf0>
    1348:	8e 32       	cpi	r24, 0x2E	; 46
    134a:	21 f4       	brne	.+8      	; 0x1354 <vfprintf+0xe4>
    134c:	26 fd       	sbrc	r18, 6
    134e:	5f c1       	rjmp	.+702    	; 0x160e <vfprintf+0x39e>
    1350:	20 64       	ori	r18, 0x40	; 64
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <vfprintf+0xf0>
    1354:	8c 36       	cpi	r24, 0x6C	; 108
    1356:	11 f4       	brne	.+4      	; 0x135c <vfprintf+0xec>
    1358:	20 68       	ori	r18, 0x80	; 128
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0xf0>
    135c:	88 36       	cpi	r24, 0x68	; 104
    135e:	41 f4       	brne	.+16     	; 0x1370 <vfprintf+0x100>
    1360:	f6 01       	movw	r30, r12
    1362:	93 fd       	sbrc	r25, 3
    1364:	85 91       	lpm	r24, Z+
    1366:	93 ff       	sbrs	r25, 3
    1368:	81 91       	ld	r24, Z+
    136a:	6f 01       	movw	r12, r30
    136c:	81 11       	cpse	r24, r1
    136e:	c1 cf       	rjmp	.-126    	; 0x12f2 <vfprintf+0x82>
    1370:	98 2f       	mov	r25, r24
    1372:	9f 7d       	andi	r25, 0xDF	; 223
    1374:	95 54       	subi	r25, 0x45	; 69
    1376:	93 30       	cpi	r25, 0x03	; 3
    1378:	28 f4       	brcc	.+10     	; 0x1384 <vfprintf+0x114>
    137a:	0c 5f       	subi	r16, 0xFC	; 252
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	ff e3       	ldi	r31, 0x3F	; 63
    1380:	f9 83       	std	Y+1, r31	; 0x01
    1382:	0d c0       	rjmp	.+26     	; 0x139e <vfprintf+0x12e>
    1384:	83 36       	cpi	r24, 0x63	; 99
    1386:	31 f0       	breq	.+12     	; 0x1394 <vfprintf+0x124>
    1388:	83 37       	cpi	r24, 0x73	; 115
    138a:	71 f0       	breq	.+28     	; 0x13a8 <vfprintf+0x138>
    138c:	83 35       	cpi	r24, 0x53	; 83
    138e:	09 f0       	breq	.+2      	; 0x1392 <vfprintf+0x122>
    1390:	57 c0       	rjmp	.+174    	; 0x1440 <vfprintf+0x1d0>
    1392:	21 c0       	rjmp	.+66     	; 0x13d6 <vfprintf+0x166>
    1394:	f8 01       	movw	r30, r16
    1396:	80 81       	ld	r24, Z
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	0e 5f       	subi	r16, 0xFE	; 254
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	44 24       	eor	r4, r4
    13a0:	43 94       	inc	r4
    13a2:	51 2c       	mov	r5, r1
    13a4:	54 01       	movw	r10, r8
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <vfprintf+0x160>
    13a8:	38 01       	movw	r6, r16
    13aa:	f2 e0       	ldi	r31, 0x02	; 2
    13ac:	6f 0e       	add	r6, r31
    13ae:	71 1c       	adc	r7, r1
    13b0:	f8 01       	movw	r30, r16
    13b2:	a0 80       	ld	r10, Z
    13b4:	b1 80       	ldd	r11, Z+1	; 0x01
    13b6:	26 ff       	sbrs	r18, 6
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <vfprintf+0x150>
    13ba:	65 2d       	mov	r22, r5
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <vfprintf+0x154>
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	7f ef       	ldi	r23, 0xFF	; 255
    13c4:	c5 01       	movw	r24, r10
    13c6:	2c 87       	std	Y+12, r18	; 0x0c
    13c8:	4c d1       	rcall	.+664    	; 0x1662 <strnlen>
    13ca:	2c 01       	movw	r4, r24
    13cc:	83 01       	movw	r16, r6
    13ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d0:	2f 77       	andi	r18, 0x7F	; 127
    13d2:	22 2e       	mov	r2, r18
    13d4:	16 c0       	rjmp	.+44     	; 0x1402 <vfprintf+0x192>
    13d6:	38 01       	movw	r6, r16
    13d8:	f2 e0       	ldi	r31, 0x02	; 2
    13da:	6f 0e       	add	r6, r31
    13dc:	71 1c       	adc	r7, r1
    13de:	f8 01       	movw	r30, r16
    13e0:	a0 80       	ld	r10, Z
    13e2:	b1 80       	ldd	r11, Z+1	; 0x01
    13e4:	26 ff       	sbrs	r18, 6
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <vfprintf+0x17e>
    13e8:	65 2d       	mov	r22, r5
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x182>
    13ee:	6f ef       	ldi	r22, 0xFF	; 255
    13f0:	7f ef       	ldi	r23, 0xFF	; 255
    13f2:	c5 01       	movw	r24, r10
    13f4:	2c 87       	std	Y+12, r18	; 0x0c
    13f6:	2a d1       	rcall	.+596    	; 0x164c <strnlen_P>
    13f8:	2c 01       	movw	r4, r24
    13fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    13fc:	20 68       	ori	r18, 0x80	; 128
    13fe:	22 2e       	mov	r2, r18
    1400:	83 01       	movw	r16, r6
    1402:	23 fc       	sbrc	r2, 3
    1404:	19 c0       	rjmp	.+50     	; 0x1438 <vfprintf+0x1c8>
    1406:	83 2d       	mov	r24, r3
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	48 16       	cp	r4, r24
    140c:	59 06       	cpc	r5, r25
    140e:	a0 f4       	brcc	.+40     	; 0x1438 <vfprintf+0x1c8>
    1410:	b7 01       	movw	r22, r14
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	30 d1       	rcall	.+608    	; 0x1678 <fputc>
    1418:	3a 94       	dec	r3
    141a:	f5 cf       	rjmp	.-22     	; 0x1406 <vfprintf+0x196>
    141c:	f5 01       	movw	r30, r10
    141e:	27 fc       	sbrc	r2, 7
    1420:	85 91       	lpm	r24, Z+
    1422:	27 fe       	sbrs	r2, 7
    1424:	81 91       	ld	r24, Z+
    1426:	5f 01       	movw	r10, r30
    1428:	b7 01       	movw	r22, r14
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	25 d1       	rcall	.+586    	; 0x1678 <fputc>
    142e:	31 10       	cpse	r3, r1
    1430:	3a 94       	dec	r3
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	4f 1a       	sub	r4, r31
    1436:	51 08       	sbc	r5, r1
    1438:	41 14       	cp	r4, r1
    143a:	51 04       	cpc	r5, r1
    143c:	79 f7       	brne	.-34     	; 0x141c <vfprintf+0x1ac>
    143e:	de c0       	rjmp	.+444    	; 0x15fc <vfprintf+0x38c>
    1440:	84 36       	cpi	r24, 0x64	; 100
    1442:	11 f0       	breq	.+4      	; 0x1448 <vfprintf+0x1d8>
    1444:	89 36       	cpi	r24, 0x69	; 105
    1446:	31 f5       	brne	.+76     	; 0x1494 <vfprintf+0x224>
    1448:	f8 01       	movw	r30, r16
    144a:	27 ff       	sbrs	r18, 7
    144c:	07 c0       	rjmp	.+14     	; 0x145c <vfprintf+0x1ec>
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	0c 5f       	subi	r16, 0xFC	; 252
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	08 c0       	rjmp	.+16     	; 0x146c <vfprintf+0x1fc>
    145c:	60 81       	ld	r22, Z
    145e:	71 81       	ldd	r23, Z+1	; 0x01
    1460:	07 2e       	mov	r0, r23
    1462:	00 0c       	add	r0, r0
    1464:	88 0b       	sbc	r24, r24
    1466:	99 0b       	sbc	r25, r25
    1468:	0e 5f       	subi	r16, 0xFE	; 254
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	2f 76       	andi	r18, 0x6F	; 111
    146e:	72 2e       	mov	r7, r18
    1470:	97 ff       	sbrs	r25, 7
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x216>
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	20 68       	ori	r18, 0x80	; 128
    1484:	72 2e       	mov	r7, r18
    1486:	2a e0       	ldi	r18, 0x0A	; 10
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	a4 01       	movw	r20, r8
    148c:	2d d1       	rcall	.+602    	; 0x16e8 <__ultoa_invert>
    148e:	a8 2e       	mov	r10, r24
    1490:	a8 18       	sub	r10, r8
    1492:	43 c0       	rjmp	.+134    	; 0x151a <vfprintf+0x2aa>
    1494:	85 37       	cpi	r24, 0x75	; 117
    1496:	29 f4       	brne	.+10     	; 0x14a2 <vfprintf+0x232>
    1498:	2f 7e       	andi	r18, 0xEF	; 239
    149a:	b2 2e       	mov	r11, r18
    149c:	2a e0       	ldi	r18, 0x0A	; 10
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	25 c0       	rjmp	.+74     	; 0x14ec <vfprintf+0x27c>
    14a2:	f2 2f       	mov	r31, r18
    14a4:	f9 7f       	andi	r31, 0xF9	; 249
    14a6:	bf 2e       	mov	r11, r31
    14a8:	8f 36       	cpi	r24, 0x6F	; 111
    14aa:	c1 f0       	breq	.+48     	; 0x14dc <vfprintf+0x26c>
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <vfprintf+0x244>
    14ae:	88 35       	cpi	r24, 0x58	; 88
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <vfprintf+0x260>
    14b2:	ad c0       	rjmp	.+346    	; 0x160e <vfprintf+0x39e>
    14b4:	80 37       	cpi	r24, 0x70	; 112
    14b6:	19 f0       	breq	.+6      	; 0x14be <vfprintf+0x24e>
    14b8:	88 37       	cpi	r24, 0x78	; 120
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <vfprintf+0x254>
    14bc:	a8 c0       	rjmp	.+336    	; 0x160e <vfprintf+0x39e>
    14be:	2f 2f       	mov	r18, r31
    14c0:	20 61       	ori	r18, 0x10	; 16
    14c2:	b2 2e       	mov	r11, r18
    14c4:	b4 fe       	sbrs	r11, 4
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <vfprintf+0x272>
    14c8:	8b 2d       	mov	r24, r11
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	b8 2e       	mov	r11, r24
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <vfprintf+0x272>
    14d0:	24 ff       	sbrs	r18, 4
    14d2:	0a c0       	rjmp	.+20     	; 0x14e8 <vfprintf+0x278>
    14d4:	9f 2f       	mov	r25, r31
    14d6:	96 60       	ori	r25, 0x06	; 6
    14d8:	b9 2e       	mov	r11, r25
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <vfprintf+0x278>
    14dc:	28 e0       	ldi	r18, 0x08	; 8
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <vfprintf+0x27c>
    14e2:	20 e1       	ldi	r18, 0x10	; 16
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x27c>
    14e8:	20 e1       	ldi	r18, 0x10	; 16
    14ea:	32 e0       	ldi	r19, 0x02	; 2
    14ec:	f8 01       	movw	r30, r16
    14ee:	b7 fe       	sbrs	r11, 7
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <vfprintf+0x290>
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	0c 5f       	subi	r16, 0xFC	; 252
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <vfprintf+0x29c>
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 5f       	subi	r16, 0xFE	; 254
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	a4 01       	movw	r20, r8
    150e:	ec d0       	rcall	.+472    	; 0x16e8 <__ultoa_invert>
    1510:	a8 2e       	mov	r10, r24
    1512:	a8 18       	sub	r10, r8
    1514:	fb 2d       	mov	r31, r11
    1516:	ff 77       	andi	r31, 0x7F	; 127
    1518:	7f 2e       	mov	r7, r31
    151a:	76 fe       	sbrs	r7, 6
    151c:	0b c0       	rjmp	.+22     	; 0x1534 <vfprintf+0x2c4>
    151e:	37 2d       	mov	r19, r7
    1520:	3e 7f       	andi	r19, 0xFE	; 254
    1522:	a5 14       	cp	r10, r5
    1524:	50 f4       	brcc	.+20     	; 0x153a <vfprintf+0x2ca>
    1526:	74 fe       	sbrs	r7, 4
    1528:	0a c0       	rjmp	.+20     	; 0x153e <vfprintf+0x2ce>
    152a:	72 fc       	sbrc	r7, 2
    152c:	08 c0       	rjmp	.+16     	; 0x153e <vfprintf+0x2ce>
    152e:	37 2d       	mov	r19, r7
    1530:	3e 7e       	andi	r19, 0xEE	; 238
    1532:	05 c0       	rjmp	.+10     	; 0x153e <vfprintf+0x2ce>
    1534:	ba 2c       	mov	r11, r10
    1536:	37 2d       	mov	r19, r7
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x2d0>
    153a:	ba 2c       	mov	r11, r10
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <vfprintf+0x2d0>
    153e:	b5 2c       	mov	r11, r5
    1540:	34 ff       	sbrs	r19, 4
    1542:	0d c0       	rjmp	.+26     	; 0x155e <vfprintf+0x2ee>
    1544:	fe 01       	movw	r30, r28
    1546:	ea 0d       	add	r30, r10
    1548:	f1 1d       	adc	r31, r1
    154a:	80 81       	ld	r24, Z
    154c:	80 33       	cpi	r24, 0x30	; 48
    154e:	11 f4       	brne	.+4      	; 0x1554 <vfprintf+0x2e4>
    1550:	39 7e       	andi	r19, 0xE9	; 233
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <vfprintf+0x2f6>
    1554:	32 ff       	sbrs	r19, 2
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x2f4>
    1558:	b3 94       	inc	r11
    155a:	b3 94       	inc	r11
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <vfprintf+0x2f6>
    155e:	83 2f       	mov	r24, r19
    1560:	86 78       	andi	r24, 0x86	; 134
    1562:	09 f0       	breq	.+2      	; 0x1566 <vfprintf+0x2f6>
    1564:	b3 94       	inc	r11
    1566:	33 fd       	sbrc	r19, 3
    1568:	12 c0       	rjmp	.+36     	; 0x158e <vfprintf+0x31e>
    156a:	30 ff       	sbrs	r19, 0
    156c:	06 c0       	rjmp	.+12     	; 0x157a <vfprintf+0x30a>
    156e:	5a 2c       	mov	r5, r10
    1570:	b3 14       	cp	r11, r3
    1572:	18 f4       	brcc	.+6      	; 0x157a <vfprintf+0x30a>
    1574:	53 0c       	add	r5, r3
    1576:	5b 18       	sub	r5, r11
    1578:	b3 2c       	mov	r11, r3
    157a:	b3 14       	cp	r11, r3
    157c:	60 f4       	brcc	.+24     	; 0x1596 <vfprintf+0x326>
    157e:	b7 01       	movw	r22, r14
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	3c 87       	std	Y+12, r19	; 0x0c
    1586:	78 d0       	rcall	.+240    	; 0x1678 <fputc>
    1588:	b3 94       	inc	r11
    158a:	3c 85       	ldd	r19, Y+12	; 0x0c
    158c:	f6 cf       	rjmp	.-20     	; 0x157a <vfprintf+0x30a>
    158e:	b3 14       	cp	r11, r3
    1590:	10 f4       	brcc	.+4      	; 0x1596 <vfprintf+0x326>
    1592:	3b 18       	sub	r3, r11
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <vfprintf+0x328>
    1596:	31 2c       	mov	r3, r1
    1598:	34 ff       	sbrs	r19, 4
    159a:	11 c0       	rjmp	.+34     	; 0x15be <vfprintf+0x34e>
    159c:	b7 01       	movw	r22, r14
    159e:	80 e3       	ldi	r24, 0x30	; 48
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	3c 87       	std	Y+12, r19	; 0x0c
    15a4:	69 d0       	rcall	.+210    	; 0x1678 <fputc>
    15a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15a8:	32 ff       	sbrs	r19, 2
    15aa:	16 c0       	rjmp	.+44     	; 0x15d8 <vfprintf+0x368>
    15ac:	31 fd       	sbrc	r19, 1
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x346>
    15b0:	88 e7       	ldi	r24, 0x78	; 120
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x34a>
    15b6:	88 e5       	ldi	r24, 0x58	; 88
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	b7 01       	movw	r22, r14
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <vfprintf+0x366>
    15be:	83 2f       	mov	r24, r19
    15c0:	86 78       	andi	r24, 0x86	; 134
    15c2:	51 f0       	breq	.+20     	; 0x15d8 <vfprintf+0x368>
    15c4:	31 ff       	sbrs	r19, 1
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x35c>
    15c8:	8b e2       	ldi	r24, 0x2B	; 43
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <vfprintf+0x35e>
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	37 fd       	sbrc	r19, 7
    15d0:	8d e2       	ldi	r24, 0x2D	; 45
    15d2:	b7 01       	movw	r22, r14
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	50 d0       	rcall	.+160    	; 0x1678 <fputc>
    15d8:	a5 14       	cp	r10, r5
    15da:	30 f4       	brcc	.+12     	; 0x15e8 <vfprintf+0x378>
    15dc:	b7 01       	movw	r22, r14
    15de:	80 e3       	ldi	r24, 0x30	; 48
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	4a d0       	rcall	.+148    	; 0x1678 <fputc>
    15e4:	5a 94       	dec	r5
    15e6:	f8 cf       	rjmp	.-16     	; 0x15d8 <vfprintf+0x368>
    15e8:	aa 94       	dec	r10
    15ea:	f4 01       	movw	r30, r8
    15ec:	ea 0d       	add	r30, r10
    15ee:	f1 1d       	adc	r31, r1
    15f0:	80 81       	ld	r24, Z
    15f2:	b7 01       	movw	r22, r14
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	40 d0       	rcall	.+128    	; 0x1678 <fputc>
    15f8:	a1 10       	cpse	r10, r1
    15fa:	f6 cf       	rjmp	.-20     	; 0x15e8 <vfprintf+0x378>
    15fc:	33 20       	and	r3, r3
    15fe:	09 f4       	brne	.+2      	; 0x1602 <vfprintf+0x392>
    1600:	5d ce       	rjmp	.-838    	; 0x12bc <vfprintf+0x4c>
    1602:	b7 01       	movw	r22, r14
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	37 d0       	rcall	.+110    	; 0x1678 <fputc>
    160a:	3a 94       	dec	r3
    160c:	f7 cf       	rjmp	.-18     	; 0x15fc <vfprintf+0x38c>
    160e:	f7 01       	movw	r30, r14
    1610:	86 81       	ldd	r24, Z+6	; 0x06
    1612:	97 81       	ldd	r25, Z+7	; 0x07
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x3aa>
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	9f ef       	ldi	r25, 0xFF	; 255
    161a:	2c 96       	adiw	r28, 0x0c	; 12
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	6f 90       	pop	r6
    1642:	5f 90       	pop	r5
    1644:	4f 90       	pop	r4
    1646:	3f 90       	pop	r3
    1648:	2f 90       	pop	r2
    164a:	08 95       	ret

0000164c <strnlen_P>:
    164c:	fc 01       	movw	r30, r24
    164e:	05 90       	lpm	r0, Z+
    1650:	61 50       	subi	r22, 0x01	; 1
    1652:	70 40       	sbci	r23, 0x00	; 0
    1654:	01 10       	cpse	r0, r1
    1656:	d8 f7       	brcc	.-10     	; 0x164e <strnlen_P+0x2>
    1658:	80 95       	com	r24
    165a:	90 95       	com	r25
    165c:	8e 0f       	add	r24, r30
    165e:	9f 1f       	adc	r25, r31
    1660:	08 95       	ret

00001662 <strnlen>:
    1662:	fc 01       	movw	r30, r24
    1664:	61 50       	subi	r22, 0x01	; 1
    1666:	70 40       	sbci	r23, 0x00	; 0
    1668:	01 90       	ld	r0, Z+
    166a:	01 10       	cpse	r0, r1
    166c:	d8 f7       	brcc	.-10     	; 0x1664 <strnlen+0x2>
    166e:	80 95       	com	r24
    1670:	90 95       	com	r25
    1672:	8e 0f       	add	r24, r30
    1674:	9f 1f       	adc	r25, r31
    1676:	08 95       	ret

00001678 <fputc>:
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	fb 01       	movw	r30, r22
    1682:	23 81       	ldd	r18, Z+3	; 0x03
    1684:	21 fd       	sbrc	r18, 1
    1686:	03 c0       	rjmp	.+6      	; 0x168e <fputc+0x16>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	28 c0       	rjmp	.+80     	; 0x16de <fputc+0x66>
    168e:	22 ff       	sbrs	r18, 2
    1690:	16 c0       	rjmp	.+44     	; 0x16be <fputc+0x46>
    1692:	46 81       	ldd	r20, Z+6	; 0x06
    1694:	57 81       	ldd	r21, Z+7	; 0x07
    1696:	24 81       	ldd	r18, Z+4	; 0x04
    1698:	35 81       	ldd	r19, Z+5	; 0x05
    169a:	42 17       	cp	r20, r18
    169c:	53 07       	cpc	r21, r19
    169e:	44 f4       	brge	.+16     	; 0x16b0 <fputc+0x38>
    16a0:	a0 81       	ld	r26, Z
    16a2:	b1 81       	ldd	r27, Z+1	; 0x01
    16a4:	9d 01       	movw	r18, r26
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	31 83       	std	Z+1, r19	; 0x01
    16ac:	20 83       	st	Z, r18
    16ae:	8c 93       	st	X, r24
    16b0:	26 81       	ldd	r18, Z+6	; 0x06
    16b2:	37 81       	ldd	r19, Z+7	; 0x07
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	37 83       	std	Z+7, r19	; 0x07
    16ba:	26 83       	std	Z+6, r18	; 0x06
    16bc:	10 c0       	rjmp	.+32     	; 0x16de <fputc+0x66>
    16be:	eb 01       	movw	r28, r22
    16c0:	09 2f       	mov	r16, r25
    16c2:	18 2f       	mov	r17, r24
    16c4:	00 84       	ldd	r0, Z+8	; 0x08
    16c6:	f1 85       	ldd	r31, Z+9	; 0x09
    16c8:	e0 2d       	mov	r30, r0
    16ca:	19 95       	eicall
    16cc:	89 2b       	or	r24, r25
    16ce:	e1 f6       	brne	.-72     	; 0x1688 <fputc+0x10>
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	9f 83       	std	Y+7, r25	; 0x07
    16d8:	8e 83       	std	Y+6, r24	; 0x06
    16da:	81 2f       	mov	r24, r17
    16dc:	90 2f       	mov	r25, r16
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <__ultoa_invert>:
    16e8:	fa 01       	movw	r30, r20
    16ea:	aa 27       	eor	r26, r26
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	51 f1       	breq	.+84     	; 0x1744 <__ultoa_invert+0x5c>
    16f0:	20 31       	cpi	r18, 0x10	; 16
    16f2:	81 f1       	breq	.+96     	; 0x1754 <__ultoa_invert+0x6c>
    16f4:	e8 94       	clt
    16f6:	6f 93       	push	r22
    16f8:	6e 7f       	andi	r22, 0xFE	; 254
    16fa:	6e 5f       	subi	r22, 0xFE	; 254
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	3e d0       	rcall	.+124    	; 0x1784 <__ultoa_invert+0x9c>
    1708:	b4 e0       	ldi	r27, 0x04	; 4
    170a:	3c d0       	rcall	.+120    	; 0x1784 <__ultoa_invert+0x9c>
    170c:	67 0f       	add	r22, r23
    170e:	78 1f       	adc	r23, r24
    1710:	89 1f       	adc	r24, r25
    1712:	9a 1f       	adc	r25, r26
    1714:	a1 1d       	adc	r26, r1
    1716:	68 0f       	add	r22, r24
    1718:	79 1f       	adc	r23, r25
    171a:	8a 1f       	adc	r24, r26
    171c:	91 1d       	adc	r25, r1
    171e:	a1 1d       	adc	r26, r1
    1720:	6a 0f       	add	r22, r26
    1722:	71 1d       	adc	r23, r1
    1724:	81 1d       	adc	r24, r1
    1726:	91 1d       	adc	r25, r1
    1728:	a1 1d       	adc	r26, r1
    172a:	20 d0       	rcall	.+64     	; 0x176c <__ultoa_invert+0x84>
    172c:	09 f4       	brne	.+2      	; 0x1730 <__ultoa_invert+0x48>
    172e:	68 94       	set
    1730:	3f 91       	pop	r19
    1732:	2a e0       	ldi	r18, 0x0A	; 10
    1734:	26 9f       	mul	r18, r22
    1736:	11 24       	eor	r1, r1
    1738:	30 19       	sub	r19, r0
    173a:	30 5d       	subi	r19, 0xD0	; 208
    173c:	31 93       	st	Z+, r19
    173e:	de f6       	brtc	.-74     	; 0x16f6 <__ultoa_invert+0xe>
    1740:	cf 01       	movw	r24, r30
    1742:	08 95       	ret
    1744:	46 2f       	mov	r20, r22
    1746:	47 70       	andi	r20, 0x07	; 7
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	41 93       	st	Z+, r20
    174c:	b3 e0       	ldi	r27, 0x03	; 3
    174e:	0f d0       	rcall	.+30     	; 0x176e <__ultoa_invert+0x86>
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0x5c>
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <__ultoa_invert+0x58>
    1754:	46 2f       	mov	r20, r22
    1756:	4f 70       	andi	r20, 0x0F	; 15
    1758:	40 5d       	subi	r20, 0xD0	; 208
    175a:	4a 33       	cpi	r20, 0x3A	; 58
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__ultoa_invert+0x7c>
    175e:	49 5d       	subi	r20, 0xD9	; 217
    1760:	31 fd       	sbrc	r19, 1
    1762:	40 52       	subi	r20, 0x20	; 32
    1764:	41 93       	st	Z+, r20
    1766:	02 d0       	rcall	.+4      	; 0x176c <__ultoa_invert+0x84>
    1768:	a9 f7       	brne	.-22     	; 0x1754 <__ultoa_invert+0x6c>
    176a:	ea cf       	rjmp	.-44     	; 0x1740 <__ultoa_invert+0x58>
    176c:	b4 e0       	ldi	r27, 0x04	; 4
    176e:	a6 95       	lsr	r26
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	ba 95       	dec	r27
    177a:	c9 f7       	brne	.-14     	; 0x176e <__ultoa_invert+0x86>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 05       	cpc	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	08 95       	ret
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	0a 2e       	mov	r0, r26
    178a:	06 94       	lsr	r0
    178c:	57 95       	ror	r21
    178e:	47 95       	ror	r20
    1790:	37 95       	ror	r19
    1792:	27 95       	ror	r18
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__ultoa_invert+0xa2>
    1798:	62 0f       	add	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	95 1f       	adc	r25, r21
    17a0:	a0 1d       	adc	r26, r0
    17a2:	08 95       	ret

000017a4 <_exit>:
    17a4:	f8 94       	cli

000017a6 <__stop_program>:
    17a6:	ff cf       	rjmp	.-2      	; 0x17a6 <__stop_program>
