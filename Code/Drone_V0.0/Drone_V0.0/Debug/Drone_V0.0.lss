
Drone_V0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  00001c48  00001cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008002cc  008002cc  00001da8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000301d  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8e  00000000  00000000  000050b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000192f  00000000  00000000  00005f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00007878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c14  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000140d  00000000  00000000  00008a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c3       	rjmp	.+1774   	; 0x718 <__vector_10>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	74 c3       	rjmp	.+1768   	; 0x73e <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	77 09       	sbc	r23, r7
      e6:	88 09       	sbc	r24, r8
      e8:	99 09       	sbc	r25, r9
      ea:	aa 09       	sbc	r26, r10
      ec:	bb 09       	sbc	r27, r11
      ee:	cc 09       	sbc	r28, r12
      f0:	dd 09       	sbc	r29, r13
      f2:	ee 09       	sbc	r30, r14

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	e8 e4       	ldi	r30, 0x48	; 72
     10c:	fc e1       	ldi	r31, 0x1C	; 28
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 3c       	cpi	r26, 0xCC	; 204
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	23 e0       	ldi	r18, 0x03	; 3
     120:	ac ec       	ldi	r26, 0xCC	; 204
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a0 33       	cpi	r26, 0x30	; 48
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	96 d5       	rcall	.+2860   	; 0xc5c <main>
     130:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <_ZN3EscC1Ei>:
  
  //Timer 4/5 set to 0
  TCNT4 = 0;
  TCNT5 = 0;
  
  escInitialized = true;
     136:	fc 01       	movw	r30, r24
     138:	71 83       	std	Z+1, r23	; 0x01
     13a:	60 83       	st	Z, r22
     13c:	08 95       	ret

0000013e <_ZN3Esc3setEj>:
}

void Esc::set(uint16_t pwm)
{
	switch (escNumber) {
     13e:	fc 01       	movw	r30, r24
     140:	80 81       	ld	r24, Z
     142:	91 81       	ldd	r25, Z+1	; 0x01
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	91 05       	cpc	r25, r1
     148:	99 f0       	breq	.+38     	; 0x170 <_ZN3Esc3setEj+0x32>
     14a:	1c f4       	brge	.+6      	; 0x152 <_ZN3Esc3setEj+0x14>
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	39 f0       	breq	.+14     	; 0x15e <_ZN3Esc3setEj+0x20>
     150:	2a c0       	rjmp	.+84     	; 0x1a6 <_ZN3Esc3setEj+0x68>
     152:	83 30       	cpi	r24, 0x03	; 3
     154:	91 05       	cpc	r25, r1
     156:	a9 f0       	breq	.+42     	; 0x182 <_ZN3Esc3setEj+0x44>
     158:	04 97       	sbiw	r24, 0x04	; 4
     15a:	e1 f0       	breq	.+56     	; 0x194 <_ZN3Esc3setEj+0x56>
     15c:	24 c0       	rjmp	.+72     	; 0x1a6 <_ZN3Esc3setEj+0x68>
		//multiply by 4 here to get from the PWM of the RF controller to the ESC
		//ESC requires 1-2ms pulse width so from 8000 to 16000 pwm
		//since the number we get from the RF is between 2000 and 4000, multiply by 4
		case 1: 
			OCR4A = pwm*4;
     15e:	66 0f       	add	r22, r22
     160:	77 1f       	adc	r23, r23
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     16a:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
     16e:	08 95       	ret
		case 2: 
			OCR4B = pwm*4;
     170:	66 0f       	add	r22, r22
     172:	77 1f       	adc	r23, r23
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     17c:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
     180:	08 95       	ret
		case 3: 
			OCR5A = pwm*4;
     182:	66 0f       	add	r22, r22
     184:	77 1f       	adc	r23, r23
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     18e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     192:	08 95       	ret
		case 4: 
			OCR5B = pwm*4;
     194:	66 0f       	add	r22, r22
     196:	77 1f       	adc	r23, r23
     198:	66 0f       	add	r22, r22
     19a:	77 1f       	adc	r23, r23
     19c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     1a0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     1a4:	08 95       	ret
		default: 
			OCR4A = 0;
     1a6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1aa:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			OCR4B = 0;
     1ae:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1b2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			OCR5A = 0;
     1b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     1ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			OCR5B = 0;
     1be:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     1c2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     1c6:	08 95       	ret

000001c8 <_Z13initializeI2Cv>:
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     1c8:	80 ec       	ldi	r24, 0xC0	; 192
     1ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     1d4:	08 95       	ret

000001d6 <_Z7I2Cstopv>:
	* @param none
	* @retval none
	*/
void I2Cstop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Transmit STOP condition
     1d6:	ec eb       	ldi	r30, 0xBC	; 188
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	84 e9       	ldi	r24, 0x94	; 148
     1dc:	80 83       	st	Z, r24
	TWCR = 0;
     1de:	10 82       	st	Z, r1
     1e0:	08 95       	ret

000001e2 <_Z12WaitForTWINTv>:
	*/
//might be dangerous, we could get stuck here...
// just implement a timeout
void WaitForTWINT()
{
	while (!(TWCR & (1<<TWINT)))// Wait for TWINT Flag set.
     1e2:	ec eb       	ldi	r30, 0xBC	; 188
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	88 23       	and	r24, r24
     1ea:	ec f7       	brge	.-6      	; 0x1e6 <_Z12WaitForTWINTv+0x4>
	{
	}

}
     1ec:	08 95       	ret

000001ee <_Z8writeI2ChhPhh>:
	*					6	error in sending data, not expected status register
	*					10	MAX_ITER reached timed out
	* @note Refer to page 244 of the Atmega for information
	*/
uint8_t writeI2C(uint8_t phys_address, uint8_t address, uint8_t *data, uint8_t length)
{
     1ee:	2f 92       	push	r2
     1f0:	3f 92       	push	r3
     1f2:	4f 92       	push	r4
     1f4:	5f 92       	push	r5
     1f6:	6f 92       	push	r6
     1f8:	7f 92       	push	r7
     1fa:	8f 92       	push	r8
     1fc:	9f 92       	push	r9
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	48 2e       	mov	r4, r24
     214:	26 2e       	mov	r2, r22
     216:	4a 01       	movw	r8, r20
     218:	0f 2e       	mov	r0, r31
     21a:	f8 ec       	ldi	r31, 0xC8	; 200
     21c:	3f 2e       	mov	r3, r31
     21e:	f0 2d       	mov	r31, r0
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     220:	0f 2e       	mov	r0, r31
     222:	fc eb       	ldi	r31, 0xBC	; 188
     224:	ef 2e       	mov	r14, r31
     226:	f1 2c       	mov	r15, r1
     228:	f0 2d       	mov	r31, r0
		return 10;	
	}
	begin:
	I2Cstart();
	WaitForTWINT();
	switch ((twst = TW_STATUS))
     22a:	09 eb       	ldi	r16, 0xB9	; 185
     22c:	10 e0       	ldi	r17, 0x00	; 0
			changeLCDText("Start I2C fail");
			return 1;		/* error: not in start condition */
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
     22e:	0f 2e       	mov	r0, r31
     230:	fb eb       	ldi	r31, 0xBB	; 187
     232:	cf 2e       	mov	r12, r31
     234:	d1 2c       	mov	r13, r1
     236:	f0 2d       	mov	r31, r0
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     238:	c2 2f       	mov	r28, r18
     23a:	d0 e0       	ldi	r29, 0x00	; 0
     23c:	5a 01       	movw	r10, r20
     23e:	ac 0e       	add	r10, r28
     240:	bd 1e       	adc	r11, r29
     242:	08 c0       	rjmp	.+16     	; 0x254 <_Z8writeI2ChhPhh+0x66>
     244:	3a 94       	dec	r3
{
	char buffer[20];
	uint8_t twcr, n = 0;
	
	restart:
	if (n++ >= MAX_ITER)
     246:	31 10       	cpse	r3, r1
     248:	05 c0       	rjmp	.+10     	; 0x254 <_Z8writeI2ChhPhh+0x66>
	{
		changeLCDText("Slave not responding");
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	16 d4       	rcall	.+2092   	; 0xa7c <_Z13changeLCDTextPc>
		return 10;	
     250:	8a e0       	ldi	r24, 0x0A	; 10
     252:	73 c0       	rjmp	.+230    	; 0x33a <_Z8writeI2ChhPhh+0x14c>
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     254:	0f 2e       	mov	r0, r31
     256:	f4 ea       	ldi	r31, 0xA4	; 164
     258:	5f 2e       	mov	r5, r31
     25a:	f0 2d       	mov	r31, r0
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     25c:	0f 2e       	mov	r0, r31
     25e:	f4 e8       	ldi	r31, 0x84	; 132
     260:	7f 2e       	mov	r7, r31
     262:	f0 2d       	mov	r31, r0
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     264:	f7 01       	movw	r30, r14
     266:	50 82       	st	Z, r5
		changeLCDText("Slave not responding");
		return 10;	
	}
	begin:
	I2Cstart();
	WaitForTWINT();
     268:	bc df       	rcall	.-136    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     26a:	f8 01       	movw	r30, r16
     26c:	80 81       	ld	r24, Z
     26e:	88 7f       	andi	r24, 0xF8	; 248
     270:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     274:	80 31       	cpi	r24, 0x10	; 16
     276:	49 f0       	breq	.+18     	; 0x28a <_Z8writeI2ChhPhh+0x9c>
     278:	88 33       	cpi	r24, 0x38	; 56
     27a:	a1 f3       	breq	.-24     	; 0x264 <_Z8writeI2ChhPhh+0x76>
     27c:	88 30       	cpi	r24, 0x08	; 8
     27e:	29 f0       	breq	.+10     	; 0x28a <_Z8writeI2ChhPhh+0x9c>
		case TW_MT_ARB_LOST:	/*  A master must not initiate a stop condition in order to not corrupt the ongoing transfer from the active master. 
								This will cause a new start condition to be initiated, which will normally be delayed until the currently active master has 
								released the bus. */
			goto begin;
		default:
			changeLCDText("Start I2C fail");
     280:	8d e1       	ldi	r24, 0x1D	; 29
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	fb d3       	rcall	.+2038   	; 0xa7c <_Z13changeLCDTextPc>
			return 1;		/* error: not in start condition */
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	58 c0       	rjmp	.+176    	; 0x33a <_Z8writeI2ChhPhh+0x14c>
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
     28a:	f6 01       	movw	r30, r12
     28c:	40 82       	st	Z, r4
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     28e:	f7 01       	movw	r30, r14
     290:	70 82       	st	Z, r7
			  /* NB: do /not/ send stop condition */
	}
		
	TWDR = phys_address; //Load SLA_W into TWDR Register.
	I2CstartTransmit();
	WaitForTWINT();
     292:	a7 df       	rcall	.-178    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     294:	f8 01       	movw	r30, r16
     296:	80 81       	ld	r24, Z
     298:	88 7f       	andi	r24, 0xF8	; 248
     29a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     29e:	80 32       	cpi	r24, 0x20	; 32
     2a0:	89 f2       	breq	.-94     	; 0x244 <_Z8writeI2ChhPhh+0x56>
     2a2:	88 33       	cpi	r24, 0x38	; 56
     2a4:	f9 f2       	breq	.-66     	; 0x264 <_Z8writeI2ChhPhh+0x76>
     2a6:	88 31       	cpi	r24, 0x18	; 24
     2a8:	31 f0       	breq	.+12     	; 0x2b6 <_Z8writeI2ChhPhh+0xc8>

		case TW_MT_ARB_LOST:	/* re-arbitrate */
			goto begin;

		default:
			changeLCDText("Invalid phys add");
     2aa:	8c e2       	ldi	r24, 0x2C	; 44
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	e6 d3       	rcall	.+1996   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     2b0:	92 df       	rcall	.-220    	; 0x1d6 <_Z7I2Cstopv>
			return 2;
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	42 c0       	rjmp	.+132    	; 0x33a <_Z8writeI2ChhPhh+0x14c>
	}
	//send the address of the register in the IMU chip we want to write to
	TWDR = address; //put register address on the bus
     2b6:	f6 01       	movw	r30, r12
     2b8:	20 82       	st	Z, r2
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     2ba:	f7 01       	movw	r30, r14
     2bc:	70 82       	st	Z, r7
			return 2;
	}
	//send the address of the register in the IMU chip we want to write to
	TWDR = address; //put register address on the bus
	I2CstartTransmit();
	WaitForTWINT();	
     2be:	91 df       	rcall	.-222    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     2c0:	f8 01       	movw	r30, r16
     2c2:	80 81       	ld	r24, Z
     2c4:	88 7f       	andi	r24, 0xF8	; 248
     2c6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     2ca:	80 33       	cpi	r24, 0x30	; 48
     2cc:	49 f0       	breq	.+18     	; 0x2e0 <_Z8writeI2ChhPhh+0xf2>
     2ce:	88 33       	cpi	r24, 0x38	; 56
     2d0:	49 f2       	breq	.-110    	; 0x264 <_Z8writeI2ChhPhh+0x76>
     2d2:	88 32       	cpi	r24, 0x28	; 40
     2d4:	41 f4       	brne	.+16     	; 0x2e6 <_Z8writeI2ChhPhh+0xf8>
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     2d6:	1c 16       	cp	r1, r28
     2d8:	1d 06       	cpc	r1, r29
     2da:	5c f0       	brlt	.+22     	; 0x2f2 <_Z8writeI2ChhPhh+0x104>
				changeLCDText("No Data Ack from Slave");
				I2Cstop();
				return 6;
		}
	}
	return 0;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	2d c0       	rjmp	.+90     	; 0x33a <_Z8writeI2ChhPhh+0x14c>
	{
		case TW_MT_DATA_ACK:
			break;

		case TW_MT_DATA_NACK:
			I2Cstop();
     2e0:	7a df       	rcall	.-268    	; 0x1d6 <_Z7I2Cstopv>
			return 3;
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	2a c0       	rjmp	.+84     	; 0x33a <_Z8writeI2ChhPhh+0x14c>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			changeLCDText("No Data Ack from Slave");
     2e6:	8d e3       	ldi	r24, 0x3D	; 61
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	c8 d3       	rcall	.+1936   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     2ec:	74 df       	rcall	.-280    	; 0x1d6 <_Z7I2Cstopv>
			return 4;
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	24 c0       	rjmp	.+72     	; 0x33a <_Z8writeI2ChhPhh+0x14c>
     2f2:	34 01       	movw	r6, r8
	}
	
	//send data	
	for (int i = 0; i<length;i++)
	{
		TWDR = data[i]; //Load DATA into TWDR Register.
     2f4:	f3 01       	movw	r30, r6
     2f6:	81 91       	ld	r24, Z+
     2f8:	3f 01       	movw	r6, r30
     2fa:	f6 01       	movw	r30, r12
     2fc:	80 83       	st	Z, r24
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     2fe:	84 e8       	ldi	r24, 0x84	; 132
     300:	f7 01       	movw	r30, r14
     302:	80 83       	st	Z, r24
	//send data	
	for (int i = 0; i<length;i++)
	{
		TWDR = data[i]; //Load DATA into TWDR Register.
		I2CstartTransmit();
		WaitForTWINT();	
     304:	6e df       	rcall	.-292    	; 0x1e2 <_Z12WaitForTWINTv>
		switch ((twst = TW_STATUS))
     306:	f8 01       	movw	r30, r16
     308:	80 81       	ld	r24, Z
     30a:	88 7f       	andi	r24, 0xF8	; 248
     30c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     310:	80 33       	cpi	r24, 0x30	; 48
     312:	31 f0       	breq	.+12     	; 0x320 <_Z8writeI2ChhPhh+0x132>
     314:	88 33       	cpi	r24, 0x38	; 56
     316:	09 f4       	brne	.+2      	; 0x31a <_Z8writeI2ChhPhh+0x12c>
     318:	a1 cf       	rjmp	.-190    	; 0x25c <_Z8writeI2ChhPhh+0x6e>
     31a:	88 32       	cpi	r24, 0x28	; 40
     31c:	21 f4       	brne	.+8      	; 0x326 <_Z8writeI2ChhPhh+0x138>
     31e:	09 c0       	rjmp	.+18     	; 0x332 <_Z8writeI2ChhPhh+0x144>
		{
			case TW_MT_DATA_ACK:
				break;

			case TW_MT_DATA_NACK:
				I2Cstop();
     320:	5a df       	rcall	.-332    	; 0x1d6 <_Z7I2Cstopv>
				return 5;
     322:	85 e0       	ldi	r24, 0x05	; 5
     324:	0a c0       	rjmp	.+20     	; 0x33a <_Z8writeI2ChhPhh+0x14c>
			case TW_MT_ARB_LOST:
				goto begin;

			default:
				changeLCDText("No Data Ack from Slave");
     326:	8d e3       	ldi	r24, 0x3D	; 61
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	a8 d3       	rcall	.+1872   	; 0xa7c <_Z13changeLCDTextPc>
				I2Cstop();
     32c:	54 df       	rcall	.-344    	; 0x1d6 <_Z7I2Cstopv>
				return 6;
     32e:	86 e0       	ldi	r24, 0x06	; 6
     330:	04 c0       	rjmp	.+8      	; 0x33a <_Z8writeI2ChhPhh+0x14c>
			I2Cstop();
			return 4;
	}
	
	//send data	
	for (int i = 0; i<length;i++)
     332:	6a 14       	cp	r6, r10
     334:	7b 04       	cpc	r7, r11
     336:	f1 f6       	brne	.-68     	; 0x2f4 <_Z8writeI2ChhPhh+0x106>
				changeLCDText("No Data Ack from Slave");
				I2Cstop();
				return 6;
		}
	}
	return 0;
     338:	80 e0       	ldi	r24, 0x00	; 0
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	6f 90       	pop	r6
     356:	5f 90       	pop	r5
     358:	4f 90       	pop	r4
     35a:	3f 90       	pop	r3
     35c:	2f 90       	pop	r2
     35e:	08 95       	ret

00000360 <_Z8writeI2Chhh>:
	 * register to have valid contents while the TWINT bit in TWCR is set.
	 */
uint8_t twst;

uint8_t writeI2C(uint8_t phys_address, uint8_t address, uint8_t data)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	1f 92       	push	r1
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
	uint8_t data1[1];
	data1[0] = data;
     36a:	49 83       	std	Y+1, r20	; 0x01
	writeI2C(phys_address,address, data1, 1);
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	ae 01       	movw	r20, r28
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	3c df       	rcall	.-392    	; 0x1ee <_Z8writeI2ChhPhh>
}
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <_Z7readI2ChhPhh>:
	*					9	error in reading data, not expected status register
	*					10	MAX_ITER reached timed out
	* @note Refer to page 244 of the Atmega for information
	*/
uint8_t readI2C(uint8_t phys_address, uint8_t address, uint8_t *data, uint8_t length)
{
     37e:	2f 92       	push	r2
     380:	3f 92       	push	r3
     382:	4f 92       	push	r4
     384:	5f 92       	push	r5
     386:	6f 92       	push	r6
     388:	7f 92       	push	r7
     38a:	8f 92       	push	r8
     38c:	9f 92       	push	r9
     38e:	af 92       	push	r10
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <_Z7readI2ChhPhh+0x26>
     3a4:	1f 92       	push	r1
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	88 2e       	mov	r8, r24
     3ac:	66 2e       	mov	r6, r22
     3ae:	5a 83       	std	Y+2, r21	; 0x02
     3b0:	49 83       	std	Y+1, r20	; 0x01
     3b2:	52 2e       	mov	r5, r18
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f8 ec       	ldi	r31, 0xC8	; 200
     3b8:	7f 2e       	mov	r7, r31
     3ba:	f0 2d       	mov	r31, r0
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     3bc:	0f 2e       	mov	r0, r31
     3be:	fc eb       	ldi	r31, 0xBC	; 188
     3c0:	ef 2e       	mov	r14, r31
     3c2:	f1 2c       	mov	r15, r1
     3c4:	f0 2d       	mov	r31, r0
	
	begin:
	/*Send start condition*/
	I2Cstart();
	WaitForTWINT();
	switch ((twst = TW_STATUS))
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f9 eb       	ldi	r31, 0xB9	; 185
     3ca:	cf 2e       	mov	r12, r31
     3cc:	d1 2c       	mov	r13, r1
     3ce:	f0 2d       	mov	r31, r0
			  /* NB: do /not/ send stop condition */
	}
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
     3d0:	0b eb       	ldi	r16, 0xBB	; 187
     3d2:	10 e0       	ldi	r17, 0x00	; 0
     3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <_Z7readI2ChhPhh+0x68>
     3d6:	7a 94       	dec	r7
{
	uint8_t twcr, n = 0;
	char buffer[20];
		
	restart:
	if (n++ >= MAX_ITER)
     3d8:	71 10       	cpse	r7, r1
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <_Z7readI2ChhPhh+0x68>
	{
		changeLCDText("Slave not responding");
     3dc:	88 e0       	ldi	r24, 0x08	; 8
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	4d d3       	rcall	.+1690   	; 0xa7c <_Z13changeLCDTextPc>
		return 10;	
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	dc c0       	rjmp	.+440    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     3e6:	0f 2e       	mov	r0, r31
     3e8:	f4 e8       	ldi	r31, 0x84	; 132
     3ea:	9f 2e       	mov	r9, r31
     3ec:	f0 2d       	mov	r31, r0
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f4 ea       	ldi	r31, 0xA4	; 164
     3f2:	af 2e       	mov	r10, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	ba 2c       	mov	r11, r10
     3f8:	d7 01       	movw	r26, r14
     3fa:	bc 92       	st	X, r11
	}
	
	begin:
	/*Send start condition*/
	I2Cstart();
	WaitForTWINT();
     3fc:	f2 de       	rcall	.-540    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     3fe:	f6 01       	movw	r30, r12
     400:	90 81       	ld	r25, Z
     402:	98 7f       	andi	r25, 0xF8	; 248
     404:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <twst>
     408:	90 31       	cpi	r25, 0x10	; 16
     40a:	49 f0       	breq	.+18     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     40c:	98 33       	cpi	r25, 0x38	; 56
     40e:	a1 f3       	breq	.-24     	; 0x3f8 <_Z7readI2ChhPhh+0x7a>
     410:	98 30       	cpi	r25, 0x08	; 8
     412:	29 f0       	breq	.+10     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		case TW_MT_ARB_LOST:	/*  A master must not initiate a stop condition in order to not corrupt the ongoing transfer from the active master. 
								This will cause a new start condition to be initiated, which will normally be delayed until the currently active master has 
								released the bus. */
			goto begin;
		default:
			changeLCDText("Start I2C fail");	
     414:	8d e1       	ldi	r24, 0x1D	; 29
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	31 d3       	rcall	.+1634   	; 0xa7c <_Z13changeLCDTextPc>
			return 1;		/* error: not in start condition */
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	c0 c0       	rjmp	.+384    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
			  /* NB: do /not/ send stop condition */
	}
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
     41e:	d8 01       	movw	r26, r16
     420:	8c 92       	st	X, r8
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     422:	f7 01       	movw	r30, r14
     424:	90 82       	st	Z, r9
	
	
	 /*Load SLA_W into TWDR Register.*/
	TWDR = phys_address;
	I2CstartTransmit();
	WaitForTWINT();
     426:	dd de       	rcall	.-582    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     428:	d6 01       	movw	r26, r12
     42a:	9c 91       	ld	r25, X
     42c:	98 7f       	andi	r25, 0xF8	; 248
     42e:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <twst>
     432:	90 32       	cpi	r25, 0x20	; 32
     434:	81 f2       	breq	.-96     	; 0x3d6 <_Z7readI2ChhPhh+0x58>
     436:	98 33       	cpi	r25, 0x38	; 56
     438:	f9 f2       	breq	.-66     	; 0x3f8 <_Z7readI2ChhPhh+0x7a>
     43a:	98 31       	cpi	r25, 0x18	; 24
     43c:	31 f0       	breq	.+12     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>

		case TW_MT_ARB_LOST:	/* re-arbitrate */
			goto begin;

		default:
			changeLCDText("Invalid phys add");
     43e:	8c e2       	ldi	r24, 0x2C	; 44
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	1c d3       	rcall	.+1592   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     444:	c8 de       	rcall	.-624    	; 0x1d6 <_Z7I2Cstopv>
			return 2;
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	aa c0       	rjmp	.+340    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
	}

	//send the address of the register in the IMU chip we want to read
	TWDR = address; //put register address on the bus
     44a:	f8 01       	movw	r30, r16
     44c:	60 82       	st	Z, r6
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     44e:	d7 01       	movw	r26, r14
     450:	9c 92       	st	X, r9
	}

	//send the address of the register in the IMU chip we want to read
	TWDR = address; //put register address on the bus
	I2CstartTransmit();
	WaitForTWINT();	
     452:	c7 de       	rcall	.-626    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     454:	f6 01       	movw	r30, r12
     456:	80 81       	ld	r24, Z
     458:	88 7f       	andi	r24, 0xF8	; 248
     45a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     45e:	80 33       	cpi	r24, 0x30	; 48
     460:	29 f0       	breq	.+10     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
     462:	88 33       	cpi	r24, 0x38	; 56
     464:	49 f2       	breq	.-110    	; 0x3f8 <_Z7readI2ChhPhh+0x7a>
     466:	88 32       	cpi	r24, 0x28	; 40
     468:	21 f4       	brne	.+8      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     46a:	09 c0       	rjmp	.+18     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
	{
		case TW_MT_DATA_ACK:
			break;

		case TW_MT_DATA_NACK:
			I2Cstop();
     46c:	b4 de       	rcall	.-664    	; 0x1d6 <_Z7I2Cstopv>
			return 3;
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	96 c0       	rjmp	.+300    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			changeLCDText("No Data Ack from Slave");
     472:	8d e3       	ldi	r24, 0x3D	; 61
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	02 d3       	rcall	.+1540   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     478:	ae de       	rcall	.-676    	; 0x1d6 <_Z7I2Cstopv>
			return 4;
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	90 c0       	rjmp	.+288    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
	* @param none
	* @retval none
	*/
void I2Cstart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
     47e:	d7 01       	movw	r26, r14
     480:	ac 92       	st	X, r10
		
	
	
	/* send repeated start condition */	
	I2Cstart(); 
	WaitForTWINT();
     482:	af de       	rcall	.-674    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     484:	f6 01       	movw	r30, r12
     486:	80 81       	ld	r24, Z
     488:	88 7f       	andi	r24, 0xF8	; 248
     48a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     48e:	80 31       	cpi	r24, 0x10	; 16
     490:	59 f0       	breq	.+22     	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
     492:	88 33       	cpi	r24, 0x38	; 56
     494:	09 f4       	brne	.+2      	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     496:	b0 cf       	rjmp	.-160    	; 0x3f8 <_Z7readI2ChhPhh+0x7a>
     498:	88 30       	cpi	r24, 0x08	; 8
     49a:	31 f0       	breq	.+12     	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>

		case TW_MT_ARB_LOST:
			goto begin;

		default:
			changeLCDText("Rs error");
     49c:	84 e5       	ldi	r24, 0x54	; 84
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	ed d2       	rcall	.+1498   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     4a2:	99 de       	rcall	.-718    	; 0x1d6 <_Z7I2Cstopv>
			return 5;
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	7b c0       	rjmp	.+246    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
	}	


	/* send SLA+R */
	TWDR = phys_address | TW_READ; //Load SLA_R into TWDR Register.	
     4a8:	88 2d       	mov	r24, r8
     4aa:	81 60       	ori	r24, 0x01	; 1
     4ac:	d8 01       	movw	r26, r16
     4ae:	8c 93       	st	X, r24
	* @param none
	* @retval none
	*/
void I2CstartTransmit()
{
	TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data/address
     4b0:	f7 01       	movw	r30, r14
     4b2:	90 82       	st	Z, r9


	/* send SLA+R */
	TWDR = phys_address | TW_READ; //Load SLA_R into TWDR Register.	
	I2CstartTransmit();
	WaitForTWINT();
     4b4:	96 de       	rcall	.-724    	; 0x1e2 <_Z12WaitForTWINTv>
	switch ((twst = TW_STATUS))
     4b6:	d6 01       	movw	r26, r12
     4b8:	8c 91       	ld	r24, X
     4ba:	88 7f       	andi	r24, 0xF8	; 248
     4bc:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     4c0:	80 34       	cpi	r24, 0x40	; 64
     4c2:	29 f0       	breq	.+10     	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
     4c4:	88 34       	cpi	r24, 0x48	; 72
     4c6:	59 f0       	breq	.+22     	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
     4c8:	88 33       	cpi	r24, 0x38	; 56
     4ca:	61 f4       	brne	.+24     	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
     4cc:	90 cf       	rjmp	.-224    	; 0x3ee <_Z7readI2ChhPhh+0x70>
			I2Cstop();
			return 7;
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     4ce:	e5 2d       	mov	r30, r5
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	fc 83       	std	Y+4, r31	; 0x04
     4d4:	eb 83       	std	Y+3, r30	; 0x03
     4d6:	1e 16       	cp	r1, r30
     4d8:	1f 06       	cpc	r1, r31
     4da:	54 f0       	brlt	.+20     	; 0x4f0 <__FUSE_REGION_LENGTH__+0xf0>
     4dc:	60 c0       	rjmp	.+192    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
	{
		case TW_MR_SLA_ACK:
		break;

		case TW_MR_SLA_NACK:
			I2Cstop();
     4de:	7b de       	rcall	.-778    	; 0x1d6 <_Z7I2Cstopv>
			return 6;
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	5d c0       	rjmp	.+186    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>

		case TW_MR_ARB_LOST:
			goto begin;

		default:
			changeLCDText("MR_SLA_ACK ");
     4e4:	8d e5       	ldi	r24, 0x5D	; 93
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	c9 d2       	rcall	.+1426   	; 0xa7c <_Z13changeLCDTextPc>
			I2Cstop();
     4ea:	75 de       	rcall	.-790    	; 0x1d6 <_Z7I2Cstopv>
			return 7;
     4ec:	87 e0       	ldi	r24, 0x07	; 7
     4ee:	57 c0       	rjmp	.+174    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
     4f0:	89 80       	ldd	r8, Y+1	; 0x01
     4f2:	9a 80       	ldd	r9, Y+2	; 0x02
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     4f4:	c1 2c       	mov	r12, r1
     4f6:	d1 2c       	mov	r13, r1
	{
		if (i == length-1)
     4f8:	eb 80       	ldd	r14, Y+3	; 0x03
     4fa:	fc 80       	ldd	r15, Y+4	; 0x04
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	ef 1a       	sub	r14, r31
     500:	f1 08       	sbc	r15, r1
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
		}
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     502:	0f 2e       	mov	r0, r31
     504:	fc eb       	ldi	r31, 0xBC	; 188
     506:	2f 2e       	mov	r2, r31
     508:	31 2c       	mov	r3, r1
     50a:	f0 2d       	mov	r31, r0
     50c:	0f 2e       	mov	r0, r31
     50e:	f4 ec       	ldi	r31, 0xC4	; 196
     510:	4f 2e       	mov	r4, r31
     512:	f0 2d       	mov	r31, r0

	for (int i = 0; i < length; i++)    /*********************To check***********************/
	{
		if (i == length-1)
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
     514:	0f 2e       	mov	r0, r31
     516:	f4 e8       	ldi	r31, 0x84	; 132
     518:	5f 2e       	mov	r5, r31
     51a:	f0 2d       	mov	r31, r0
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
		}
		WaitForTWINT();
		switch ((twst = TW_STATUS))
     51c:	0f 2e       	mov	r0, r31
     51e:	f9 eb       	ldi	r31, 0xB9	; 185
     520:	6f 2e       	mov	r6, r31
     522:	71 2c       	mov	r7, r1
     524:	f0 2d       	mov	r31, r0
					changeLCDText("TW_MR_DATA_NACK ");
					I2Cstop();
					return 8;					
				}
			case TW_MR_DATA_ACK:
				data[i] = TWDR;
     526:	0b eb       	ldi	r16, 0xBB	; 187
     528:	10 e0       	ldi	r17, 0x00	; 0
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
	{
		if (i == length-1)
     52a:	57 01       	movw	r10, r14
     52c:	ec 14       	cp	r14, r12
     52e:	fd 04       	cpc	r15, r13
     530:	19 f4       	brne	.+6      	; 0x538 <__FUSE_REGION_LENGTH__+0x138>
		{
			TWCR = (1<<TWINT)|(1<<TWEN);
     532:	d1 01       	movw	r26, r2
     534:	5c 92       	st	X, r5
     536:	02 c0       	rjmp	.+4      	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
		}
		else
		{
			TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     538:	f1 01       	movw	r30, r2
     53a:	40 82       	st	Z, r4
		}
		WaitForTWINT();
     53c:	52 de       	rcall	.-860    	; 0x1e2 <_Z12WaitForTWINTv>
		switch ((twst = TW_STATUS))
     53e:	d3 01       	movw	r26, r6
     540:	8c 91       	ld	r24, X
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twst>
     548:	80 35       	cpi	r24, 0x50	; 80
     54a:	a9 f0       	breq	.+42     	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
     54c:	88 35       	cpi	r24, 0x58	; 88
     54e:	09 f5       	brne	.+66     	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
		{
			case TW_MR_DATA_NACK:
				if (i == length-1) //good last bit received,  stop I2C
     550:	ac 14       	cp	r10, r12
     552:	bd 04       	cpc	r11, r13
     554:	51 f4       	brne	.+20     	; 0x56a <__FUSE_REGION_LENGTH__+0x16a>
				{
					data[i] = TWDR;
     556:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     55a:	e9 81       	ldd	r30, Y+1	; 0x01
     55c:	fa 81       	ldd	r31, Y+2	; 0x02
     55e:	ea 0d       	add	r30, r10
     560:	fb 1d       	adc	r31, r11
     562:	80 83       	st	Z, r24
					I2Cstop();
     564:	38 de       	rcall	.-912    	; 0x1d6 <_Z7I2Cstopv>
					return 0;
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	1a c0       	rjmp	.+52     	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
				}
				else
				{
					changeLCDText("TW_MR_DATA_NACK ");
     56a:	89 e6       	ldi	r24, 0x69	; 105
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	86 d2       	rcall	.+1292   	; 0xa7c <_Z13changeLCDTextPc>
					I2Cstop();
     570:	32 de       	rcall	.-924    	; 0x1d6 <_Z7I2Cstopv>
					return 8;					
     572:	88 e0       	ldi	r24, 0x08	; 8
     574:	14 c0       	rjmp	.+40     	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
				}
			case TW_MR_DATA_ACK:
				data[i] = TWDR;
     576:	f8 01       	movw	r30, r16
     578:	80 81       	ld	r24, Z
     57a:	d4 01       	movw	r26, r8
     57c:	8d 93       	st	X+, r24
     57e:	4d 01       	movw	r8, r26
			I2Cstop();
			return 7;
	}
	

	for (int i = 0; i < length; i++)    /*********************To check***********************/
     580:	bf ef       	ldi	r27, 0xFF	; 255
     582:	cb 1a       	sub	r12, r27
     584:	db 0a       	sbc	r13, r27
     586:	eb 81       	ldd	r30, Y+3	; 0x03
     588:	fc 81       	ldd	r31, Y+4	; 0x04
     58a:	ce 16       	cp	r12, r30
     58c:	df 06       	cpc	r13, r31
     58e:	69 f6       	brne	.-102    	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
     590:	06 c0       	rjmp	.+12     	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
				}
			case TW_MR_DATA_ACK:
				data[i] = TWDR;
				break;
			default:
				changeLCDText("MR_SLA_ACK ");
     592:	8d e5       	ldi	r24, 0x5D	; 93
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	72 d2       	rcall	.+1252   	; 0xa7c <_Z13changeLCDTextPc>
				I2Cstop();
     598:	1e de       	rcall	.-964    	; 0x1d6 <_Z7I2Cstopv>
				return 9;
     59a:	89 e0       	ldi	r24, 0x09	; 9
     59c:	00 c0       	rjmp	.+0      	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
		}
	}

	
}
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	7f 90       	pop	r7
     5c0:	6f 90       	pop	r6
     5c2:	5f 90       	pop	r5
     5c4:	4f 90       	pop	r4
     5c6:	3f 90       	pop	r3
     5c8:	2f 90       	pop	r2
     5ca:	08 95       	ret

000005cc <_Z7readI2Chh>:
	}
	return 0;
}

uint8_t readI2C(uint8_t phys_address, uint8_t address)
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	1f 92       	push	r1
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[1];
	if(readI2C(phys_address,address,data, 1) == 0)
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	ae 01       	movw	r20, r28
     5da:	4f 5f       	subi	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	cf de       	rcall	.-610    	; 0x37e <_Z7readI2ChhPhh>
     5e0:	81 11       	cpse	r24, r1
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_Z7readI2Chh+0x1c>
	return data[0];
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <_Z7readI2Chh+0x1e>
	else
	return 0xFF;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
}
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <_ZN3IMUC1Ev>:
uint8_t i2cData[14];

bool InertMUInitialized  = false;

//constructor
IMU::IMU()
     5f2:	08 95       	ret

000005f4 <_ZN3IMU10initializeEv>:
void IMU::initialize()
{
	
	//need to set up the magnetometer

	if (readI2C(IMU_ADDRESS, WHO_AM_I) != 0x73)
     5f4:	65 e7       	ldi	r22, 0x75	; 117
     5f6:	80 ed       	ldi	r24, 0xD0	; 208
     5f8:	e9 df       	rcall	.-46     	; 0x5cc <_Z7readI2Chh>
     5fa:	83 37       	cpi	r24, 0x73	; 115
     5fc:	21 f0       	breq	.+8      	; 0x606 <_ZN3IMU10initializeEv+0x12>
	{
		changeLCDText("Error reading Sensor");
     5fe:	8a e7       	ldi	r24, 0x7A	; 122
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	3c d2       	rcall	.+1144   	; 0xa7c <_Z13changeLCDTextPc>
void IMU::initialize()
{
	
	//need to set up the magnetometer

	if (readI2C(IMU_ADDRESS, WHO_AM_I) != 0x73)
     604:	ff cf       	rjmp	.-2      	; 0x604 <_ZN3IMU10initializeEv+0x10>
	{
		changeLCDText("Error reading Sensor");
		while(1); //lol
	}

	writeI2C(IMU_ADDRESS,PWR_MGMT_1, 0x00); //Not sleep + clock 20 MHz
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	6b e6       	ldi	r22, 0x6B	; 107
     60a:	80 ed       	ldi	r24, 0xD0	; 208
     60c:	a9 de       	rcall	.-686    	; 0x360 <_Z8writeI2Chhh>
	writeI2C(IMU_ADDRESS,SMPLRT_DIV, 0x07); //divide sample rate by 8
     60e:	47 e0       	ldi	r20, 0x07	; 7
     610:	69 e1       	ldi	r22, 0x19	; 25
     612:	80 ed       	ldi	r24, 0xD0	; 208
     614:	a5 de       	rcall	.-694    	; 0x360 <_Z8writeI2Chhh>
	writeI2C(IMU_ADDRESS,CONFIG, 0x06); //set low pass filter to 5Hz bandwidth
     616:	46 e0       	ldi	r20, 0x06	; 6
     618:	6a e1       	ldi	r22, 0x1A	; 26
     61a:	80 ed       	ldi	r24, 0xD0	; 208
     61c:	a1 de       	rcall	.-702    	; 0x360 <_Z8writeI2Chhh>
	writeI2C(IMU_ADDRESS,GYRO_CONFIG, 0x10); //set gyro full scale to 1000 dps
     61e:	40 e1       	ldi	r20, 0x10	; 16
     620:	6b e1       	ldi	r22, 0x1B	; 27
     622:	80 ed       	ldi	r24, 0xD0	; 208
     624:	9d de       	rcall	.-710    	; 0x360 <_Z8writeI2Chhh>
	writeI2C(IMU_ADDRESS,ACCEL_CONFIG, 0x01);//set accel full scale to 4g
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	6c e1       	ldi	r22, 0x1C	; 28
     62a:	80 ed       	ldi	r24, 0xD0	; 208
     62c:	99 de       	rcall	.-718    	; 0x360 <_Z8writeI2Chhh>

	//BMP180_Init();
	InertMUInitialized  = true;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <InertMUInitialized>
     634:	08 95       	ret

00000636 <_ZN3IMU12TakeMeasuresEv>:
}

void IMU::TakeMeasures()
{
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	62 97       	sbiw	r28, 0x12	; 18
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	8c 01       	movw	r16, r24
	uint8_t data[18];
	if(readI2C(IMU_ADDRESS,ACCEL_XOUT_H, data,18) == 0)//problem with read I2C for more than 1 data. 
     650:	22 e1       	ldi	r18, 0x12	; 18
     652:	ae 01       	movw	r20, r28
     654:	4f 5f       	subi	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	6b e3       	ldi	r22, 0x3B	; 59
     65a:	80 ed       	ldi	r24, 0xD0	; 208
     65c:	90 de       	rcall	.-736    	; 0x37e <_Z7readI2ChhPhh>
     65e:	81 11       	cpse	r24, r1
     660:	41 c0       	rjmp	.+130    	; 0x6e4 <_ZN3IMU12TakeMeasuresEv+0xae>
	{
		accx = (data[0] << 8) | data[1];
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	98 2f       	mov	r25, r24
     668:	88 27       	eor	r24, r24
     66a:	2a 81       	ldd	r18, Y+2	; 0x02
     66c:	82 2b       	or	r24, r18
     66e:	f8 01       	movw	r30, r16
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
		accy = (data[2] << 8) | data[3];
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	98 2f       	mov	r25, r24
     67a:	88 27       	eor	r24, r24
     67c:	2c 81       	ldd	r18, Y+4	; 0x04
     67e:	82 2b       	or	r24, r18
     680:	93 83       	std	Z+3, r25	; 0x03
     682:	82 83       	std	Z+2, r24	; 0x02
		accz = (data[4] << 8) | data[5];
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	98 2f       	mov	r25, r24
     68a:	88 27       	eor	r24, r24
     68c:	2e 81       	ldd	r18, Y+6	; 0x06
     68e:	82 2b       	or	r24, r18
     690:	95 83       	std	Z+5, r25	; 0x05
     692:	84 83       	std	Z+4, r24	; 0x04
		temp = (data[6] << 8) | data[7];
     694:	8f 81       	ldd	r24, Y+7	; 0x07
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	98 2f       	mov	r25, r24
     69a:	88 27       	eor	r24, r24
     69c:	28 85       	ldd	r18, Y+8	; 0x08
     69e:	82 2b       	or	r24, r18
     6a0:	97 83       	std	Z+7, r25	; 0x07
     6a2:	86 83       	std	Z+6, r24	; 0x06
		gyrx = (data[8] << 8) | data[9];
     6a4:	89 85       	ldd	r24, Y+9	; 0x09
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	98 2f       	mov	r25, r24
     6aa:	88 27       	eor	r24, r24
     6ac:	2a 85       	ldd	r18, Y+10	; 0x0a
     6ae:	82 2b       	or	r24, r18
     6b0:	91 87       	std	Z+9, r25	; 0x09
     6b2:	80 87       	std	Z+8, r24	; 0x08
		gyry = (data[10] << 8) | data[11];
     6b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	98 2f       	mov	r25, r24
     6ba:	88 27       	eor	r24, r24
     6bc:	2c 85       	ldd	r18, Y+12	; 0x0c
     6be:	82 2b       	or	r24, r18
     6c0:	93 87       	std	Z+11, r25	; 0x0b
     6c2:	82 87       	std	Z+10, r24	; 0x0a
		gyrz = (data[12] << 8) | data[13];
     6c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	98 2f       	mov	r25, r24
     6ca:	88 27       	eor	r24, r24
     6cc:	2e 85       	ldd	r18, Y+14	; 0x0e
     6ce:	82 2b       	or	r24, r18
     6d0:	95 87       	std	Z+13, r25	; 0x0d
     6d2:	84 87       	std	Z+12, r24	; 0x0c
		pres = (data[14] << 8) | data[15]; //to set up
		pres = (data[16] << 8) | data[17]; // to set
     6d4:	89 89       	ldd	r24, Y+17	; 0x11
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	98 2f       	mov	r25, r24
     6da:	88 27       	eor	r24, r24
     6dc:	2a 89       	ldd	r18, Y+18	; 0x12
     6de:	82 2b       	or	r24, r18
     6e0:	97 87       	std	Z+15, r25	; 0x0f
     6e2:	86 87       	std	Z+14, r24	; 0x0e
	}
	//CalTemperatureAndPressureAndAltitude();
	//pres = PressureVal;
	//temp = TemperatureVal;
	//alt =  AltitudeVal;
     6e4:	62 96       	adiw	r28, 0x12	; 18
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	08 95       	ret

000006fa <_Z14startInterruptv>:
	*/
void startInterrupt()
{
	/*by setting the max count of the counter (OCR0A) and the prescaler (with TCCR0B), the frequency of the interrupts
	generated by the counter can be controlled with precision */
	OCR0A = 0xFF;	/*Sets the maximum value of the counter before going back to 0*/
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS00); /*prescaler 001 = 1, 010 = 8, 011 = 64, 100 = 256, 101 = 1024*/
     6fe:	85 b5       	in	r24, 0x25	; 37
     700:	81 60       	ori	r24, 0x01	; 1
     702:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1 << WGM01); /*Sets the mode of the counter to CTC to clear counter once OCR0A is reached*/
     704:	84 b5       	in	r24, 0x24	; 36
     706:	82 60       	ori	r24, 0x02	; 2
     708:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A); /*enable interrupt when counter reaches OCR0A*/
     70a:	ee e6       	ldi	r30, 0x6E	; 110
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	82 60       	ori	r24, 0x02	; 2
     712:	80 83       	st	Z, r24

	sei();	/* Turn interrupts on */
     714:	78 94       	sei
     716:	08 95       	ret

00000718 <__vector_10>:
	* ch_x_pw variables. The counter always runs to avoid having issues when 2 channels are triggerred at the same time
	* and overflow protection is implemented. 
    * @param none
	* @retval None
	*/
ISR(PCINT1_vect) {
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	8f 93       	push	r24
	if(RFInitialized)
     724:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <RFInitialized>
     728:	88 23       	and	r24, r24
     72a:	19 f0       	breq	.+6      	; 0x732 <__vector_10+0x1a>
	{
		flagRF = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <flagRF>
	}
}
     732:	8f 91       	pop	r24
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_21>:
	in order to control different hardware. This is where to add different flags if you want more interrupt
	routines
    * @param none
	* @retval None
	*/
ISR(TIMER0_COMPA_vect){
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
	static int LCDFlagCount;
	static int ESCFlagCount;
	static int WS2812FlagCount;
	static int IMUFlagCount;
	
	if(lcdInitialized == true){
     74e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <lcdInitialized>
     752:	88 23       	and	r24, r24
     754:	a1 f0       	breq	.+40     	; 0x77e <__vector_21+0x40>
		if(LCDFlagCount >= LCD_PERIOD){
     756:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_ZZ11__vector_21E12LCDFlagCount>
     75a:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	91 05       	cpc	r25, r1
     762:	44 f0       	brlt	.+16     	; 0x774 <__vector_21+0x36>
			flagLCD = 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <flagLCD>
			LCDFlagCount = 0;
     76a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     76e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <_ZZ11__vector_21E12LCDFlagCount>
     772:	05 c0       	rjmp	.+10     	; 0x77e <__vector_21+0x40>
		}
		else {
			LCDFlagCount++;
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <_ZZ11__vector_21E12LCDFlagCount+0x1>
     77a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <_ZZ11__vector_21E12LCDFlagCount>
		}
	}

	if(escInitialized == true){	
     77e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     782:	88 23       	and	r24, r24
     784:	a9 f0       	breq	.+42     	; 0x7b0 <__vector_21+0x72>
		if(ESCFlagCount >= ESC_PERIOD){
     786:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_ZZ11__vector_21E12ESCFlagCount>
     78a:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     78e:	88 3e       	cpi	r24, 0xE8	; 232
     790:	23 e0       	ldi	r18, 0x03	; 3
     792:	92 07       	cpc	r25, r18
     794:	44 f0       	brlt	.+16     	; 0x7a6 <__vector_21+0x68>
			flagESC = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <flagESC>
			ESCFlagCount = 0;
     79c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     7a0:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <_ZZ11__vector_21E12ESCFlagCount>
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <__vector_21+0x72>
		}
		else {
			ESCFlagCount++;
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <_ZZ11__vector_21E12ESCFlagCount+0x1>
     7ac:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZZ11__vector_21E12ESCFlagCount>
		}
	}

	if(WS2812Initialized == true){
     7b0:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <WS2812Initialized>
     7b4:	88 23       	and	r24, r24
     7b6:	a9 f0       	breq	.+42     	; 0x7e2 <__vector_21+0xa4>
		if(WS2812FlagCount >= WS2812_PERIOD){
     7b8:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <_ZZ11__vector_21E15WS2812FlagCount>
     7bc:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     7c0:	88 3b       	cpi	r24, 0xB8	; 184
     7c2:	2b e0       	ldi	r18, 0x0B	; 11
     7c4:	92 07       	cpc	r25, r18
     7c6:	44 f0       	brlt	.+16     	; 0x7d8 <__vector_21+0x9a>
			flagWS2812 = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <flagWS2812>
			WS2812FlagCount = 0;
     7ce:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     7d2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <_ZZ11__vector_21E15WS2812FlagCount>
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <__vector_21+0xa4>
		}
		else {
			WS2812FlagCount++;
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <_ZZ11__vector_21E15WS2812FlagCount+0x1>
     7de:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <_ZZ11__vector_21E15WS2812FlagCount>
		}
	}

	if(InertMUInitialized == true){
     7e2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <InertMUInitialized>
     7e6:	88 23       	and	r24, r24
     7e8:	a9 f0       	breq	.+42     	; 0x814 <__vector_21+0xd6>
		if(IMUFlagCount >= IMU_PERIOD){
     7ea:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <_ZZ11__vector_21E12IMUFlagCount>
     7ee:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <_ZZ11__vector_21E12IMUFlagCount+0x1>
     7f2:	80 3d       	cpi	r24, 0xD0	; 208
     7f4:	27 e0       	ldi	r18, 0x07	; 7
     7f6:	92 07       	cpc	r25, r18
     7f8:	44 f0       	brlt	.+16     	; 0x80a <__vector_21+0xcc>
			flagIMU = 1;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flagIMU>
			IMUFlagCount = 0;
     800:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <_ZZ11__vector_21E12IMUFlagCount+0x1>
     804:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <_ZZ11__vector_21E12IMUFlagCount>
     808:	05 c0       	rjmp	.+10     	; 0x814 <__vector_21+0xd6>
		}
		else {
			IMUFlagCount++;
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <_ZZ11__vector_21E12IMUFlagCount+0x1>
     810:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <_ZZ11__vector_21E12IMUFlagCount>
		}
	}
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	2f 91       	pop	r18
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0
     820:	1f 90       	pop	r1
     822:	18 95       	reti

00000824 <_Z13LCD_WriteCharc>:
	PORTA &= ~(1 << DB4);
	PORTA &= ~(1 << DB3);
	PORTA |= (1 << DB2);
	PORTA |= (1 << DB1);
	PORTA &= ~(1 << DB0);
	PORTG |= (1 << E);
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ef e8       	ldi	r30, 0x8F	; 143
     82a:	f2 e0       	ldi	r31, 0x02	; 2
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	a1 e0       	ldi	r26, 0x01	; 1
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	c8 2f       	mov	r28, r24
     836:	d0 e0       	ldi	r29, 0x00	; 0
     838:	9d 01       	movw	r18, r26
     83a:	04 2e       	mov	r0, r20
     83c:	02 c0       	rjmp	.+4      	; 0x842 <_Z13LCD_WriteCharc+0x1e>
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	0a 94       	dec	r0
     844:	e2 f7       	brpl	.-8      	; 0x83e <_Z13LCD_WriteCharc+0x1a>
     846:	2c 23       	and	r18, r28
     848:	3d 23       	and	r19, r29
     84a:	04 2e       	mov	r0, r20
     84c:	02 c0       	rjmp	.+4      	; 0x852 <_Z13LCD_WriteCharc+0x2e>
     84e:	35 95       	asr	r19
     850:	27 95       	ror	r18
     852:	0a 94       	dec	r0
     854:	e2 f7       	brpl	.-8      	; 0x84e <_Z13LCD_WriteCharc+0x2a>
     856:	21 30       	cpi	r18, 0x01	; 1
     858:	31 05       	cpc	r19, r1
     85a:	59 f4       	brne	.+22     	; 0x872 <_Z13LCD_WriteCharc+0x4e>
     85c:	22 b1       	in	r18, 0x02	; 2
     85e:	cd 01       	movw	r24, r26
     860:	00 80       	ld	r0, Z
     862:	02 c0       	rjmp	.+4      	; 0x868 <_Z13LCD_WriteCharc+0x44>
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	0a 94       	dec	r0
     86a:	e2 f7       	brpl	.-8      	; 0x864 <_Z13LCD_WriteCharc+0x40>
     86c:	82 2b       	or	r24, r18
     86e:	82 b9       	out	0x02, r24	; 2
     870:	0c c0       	rjmp	.+24     	; 0x88a <_Z13LCD_WriteCharc+0x66>
     872:	22 b1       	in	r18, 0x02	; 2
     874:	bd 01       	movw	r22, r26
     876:	00 80       	ld	r0, Z
     878:	02 c0       	rjmp	.+4      	; 0x87e <_Z13LCD_WriteCharc+0x5a>
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	0a 94       	dec	r0
     880:	e2 f7       	brpl	.-8      	; 0x87a <_Z13LCD_WriteCharc+0x56>
     882:	96 2f       	mov	r25, r22
     884:	90 95       	com	r25
     886:	92 23       	and	r25, r18
     888:	92 b9       	out	0x02, r25	; 2
     88a:	4f 5f       	subi	r20, 0xFF	; 255
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	32 96       	adiw	r30, 0x02	; 2
     890:	48 30       	cpi	r20, 0x08	; 8
     892:	51 05       	cpc	r21, r1
     894:	89 f6       	brne	.-94     	; 0x838 <_Z13LCD_WriteCharc+0x14>
     896:	a2 9a       	sbi	0x14, 2	; 20
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <_Z12clearDisplayv>:
     89e:	a0 98       	cbi	0x14, 0	; 20
     8a0:	a1 98       	cbi	0x14, 1	; 20
     8a2:	17 98       	cbi	0x02, 7	; 2
     8a4:	16 98       	cbi	0x02, 6	; 2
     8a6:	15 98       	cbi	0x02, 5	; 2
     8a8:	14 98       	cbi	0x02, 4	; 2
     8aa:	13 98       	cbi	0x02, 3	; 2
     8ac:	12 98       	cbi	0x02, 2	; 2
     8ae:	11 98       	cbi	0x02, 1	; 2
     8b0:	10 9a       	sbi	0x02, 0	; 2
     8b2:	a2 9a       	sbi	0x14, 2	; 20
     8b4:	08 95       	ret

000008b6 <_Z9SetAdressi>:
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
     8bc:	a0 98       	cbi	0x14, 0	; 20
     8be:	a1 98       	cbi	0x14, 1	; 20
     8c0:	17 9a       	sbi	0x02, 7	; 2
     8c2:	ef e8       	ldi	r30, 0x8F	; 143
     8c4:	f2 e0       	ldi	r31, 0x02	; 2
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	a1 e0       	ldi	r26, 0x01	; 1
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	9d 01       	movw	r18, r26
     8d0:	04 2e       	mov	r0, r20
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <_Z9SetAdressi+0x22>
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	0a 94       	dec	r0
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <_Z9SetAdressi+0x1e>
     8dc:	2c 23       	and	r18, r28
     8de:	3d 23       	and	r19, r29
     8e0:	04 2e       	mov	r0, r20
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <_Z9SetAdressi+0x32>
     8e4:	35 95       	asr	r19
     8e6:	27 95       	ror	r18
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <_Z9SetAdressi+0x2e>
     8ec:	21 30       	cpi	r18, 0x01	; 1
     8ee:	31 05       	cpc	r19, r1
     8f0:	59 f4       	brne	.+22     	; 0x908 <_Z9SetAdressi+0x52>
     8f2:	22 b1       	in	r18, 0x02	; 2
     8f4:	cd 01       	movw	r24, r26
     8f6:	00 80       	ld	r0, Z
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <_Z9SetAdressi+0x48>
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	0a 94       	dec	r0
     900:	e2 f7       	brpl	.-8      	; 0x8fa <_Z9SetAdressi+0x44>
     902:	82 2b       	or	r24, r18
     904:	82 b9       	out	0x02, r24	; 2
     906:	0c c0       	rjmp	.+24     	; 0x920 <_Z9SetAdressi+0x6a>
     908:	22 b1       	in	r18, 0x02	; 2
     90a:	bd 01       	movw	r22, r26
     90c:	00 80       	ld	r0, Z
     90e:	02 c0       	rjmp	.+4      	; 0x914 <_Z9SetAdressi+0x5e>
     910:	66 0f       	add	r22, r22
     912:	77 1f       	adc	r23, r23
     914:	0a 94       	dec	r0
     916:	e2 f7       	brpl	.-8      	; 0x910 <_Z9SetAdressi+0x5a>
     918:	96 2f       	mov	r25, r22
     91a:	90 95       	com	r25
     91c:	92 23       	and	r25, r18
     91e:	92 b9       	out	0x02, r25	; 2
     920:	4f 5f       	subi	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	32 96       	adiw	r30, 0x02	; 2
     926:	47 30       	cpi	r20, 0x07	; 7
     928:	51 05       	cpc	r21, r1
     92a:	89 f6       	brne	.-94     	; 0x8ce <_Z9SetAdressi+0x18>
     92c:	a2 9a       	sbi	0x14, 2	; 20
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <_Z9inputModev>:
     934:	a0 9a       	sbi	0x14, 0	; 20
     936:	a1 98       	cbi	0x14, 1	; 20
     938:	08 95       	ret

0000093a <_Z6turnOnv>:
     93a:	a0 98       	cbi	0x14, 0	; 20
     93c:	a1 98       	cbi	0x14, 1	; 20
     93e:	17 98       	cbi	0x02, 7	; 2
     940:	16 98       	cbi	0x02, 6	; 2
     942:	15 98       	cbi	0x02, 5	; 2
     944:	14 98       	cbi	0x02, 4	; 2
     946:	13 9a       	sbi	0x02, 3	; 2
     948:	12 9a       	sbi	0x02, 2	; 2
     94a:	11 98       	cbi	0x02, 1	; 2
     94c:	10 98       	cbi	0x02, 0	; 2
     94e:	a2 9a       	sbi	0x14, 2	; 20
     950:	08 95       	ret

00000952 <_Z11functionSetv>:
     952:	a0 98       	cbi	0x14, 0	; 20
     954:	a1 98       	cbi	0x14, 1	; 20
     956:	17 98       	cbi	0x02, 7	; 2
     958:	16 98       	cbi	0x02, 6	; 2
     95a:	15 9a       	sbi	0x02, 5	; 2
     95c:	14 9a       	sbi	0x02, 4	; 2
     95e:	13 9a       	sbi	0x02, 3	; 2
     960:	12 98       	cbi	0x02, 2	; 2
     962:	11 98       	cbi	0x02, 1	; 2
     964:	10 98       	cbi	0x02, 0	; 2
     966:	a2 9a       	sbi	0x14, 2	; 20
     968:	08 95       	ret

0000096a <_Z7initLCDv>:
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	e1 e8       	ldi	r30, 0x81	; 129
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	82 60       	ori	r24, 0x02	; 2
     97a:	80 83       	st	Z, r24
     97c:	81 b1       	in	r24, 0x01	; 1
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	81 b9       	out	0x01, r24	; 1
     982:	83 b3       	in	r24, 0x13	; 19
     984:	87 60       	ori	r24, 0x07	; 7
     986:	83 bb       	out	0x13, r24	; 19
     988:	8a df       	rcall	.-236    	; 0x89e <_Z12clearDisplayv>
     98a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     98e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     992:	a4 e8       	ldi	r26, 0x84	; 132
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e5 e8       	ldi	r30, 0x85	; 133
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	8c 91       	ld	r24, X
     99c:	20 81       	ld	r18, Z
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	92 2b       	or	r25, r18
     9a2:	84 36       	cpi	r24, 0x64	; 100
     9a4:	91 05       	cpc	r25, r1
     9a6:	cc f3       	brlt	.-14     	; 0x99a <_Z7initLCDv+0x30>
     9a8:	a4 e8       	ldi	r26, 0x84	; 132
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	1c 92       	st	X, r1
     9ae:	e5 e8       	ldi	r30, 0x85	; 133
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	10 82       	st	Z, r1
     9b4:	a2 98       	cbi	0x14, 2	; 20
     9b6:	1c 92       	st	X, r1
     9b8:	10 82       	st	Z, r1
     9ba:	8c 91       	ld	r24, X
     9bc:	20 81       	ld	r18, Z
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	92 2b       	or	r25, r18
     9c2:	88 3b       	cpi	r24, 0xB8	; 184
     9c4:	9b 40       	sbci	r25, 0x0B	; 11
     9c6:	cc f3       	brlt	.-14     	; 0x9ba <_Z7initLCDv+0x50>
     9c8:	04 e8       	ldi	r16, 0x84	; 132
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	f8 01       	movw	r30, r16
     9ce:	10 82       	st	Z, r1
     9d0:	c5 e8       	ldi	r28, 0x85	; 133
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	18 82       	st	Y, r1
     9d6:	b1 df       	rcall	.-158    	; 0x93a <_Z6turnOnv>
     9d8:	f8 01       	movw	r30, r16
     9da:	10 82       	st	Z, r1
     9dc:	18 82       	st	Y, r1
     9de:	a4 e8       	ldi	r26, 0x84	; 132
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 e8       	ldi	r30, 0x85	; 133
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	8c 91       	ld	r24, X
     9e8:	20 81       	ld	r18, Z
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	92 2b       	or	r25, r18
     9ee:	84 36       	cpi	r24, 0x64	; 100
     9f0:	91 05       	cpc	r25, r1
     9f2:	cc f3       	brlt	.-14     	; 0x9e6 <_Z7initLCDv+0x7c>
     9f4:	04 e8       	ldi	r16, 0x84	; 132
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	f8 01       	movw	r30, r16
     9fa:	10 82       	st	Z, r1
     9fc:	c5 e8       	ldi	r28, 0x85	; 133
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
     a00:	18 82       	st	Y, r1
     a02:	a2 98       	cbi	0x14, 2	; 20
     a04:	a6 df       	rcall	.-180    	; 0x952 <_Z11functionSetv>
     a06:	f8 01       	movw	r30, r16
     a08:	10 82       	st	Z, r1
     a0a:	18 82       	st	Y, r1
     a0c:	a4 e8       	ldi	r26, 0x84	; 132
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e5 e8       	ldi	r30, 0x85	; 133
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	8c 91       	ld	r24, X
     a16:	20 81       	ld	r18, Z
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	92 2b       	or	r25, r18
     a1c:	84 36       	cpi	r24, 0x64	; 100
     a1e:	91 05       	cpc	r25, r1
     a20:	cc f3       	brlt	.-14     	; 0xa14 <_Z7initLCDv+0xaa>
     a22:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     a26:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     a2a:	a2 98       	cbi	0x14, 2	; 20
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <lcdInitialized>
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <_Z13changeLCDTextPcS_>:
}

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1, char* line2)
{
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	e7 ef       	ldi	r30, 0xF7	; 247
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	06 2f       	mov	r16, r22
     a4a:	17 2f       	mov	r17, r23
     a4c:	c3 ee       	ldi	r28, 0xE3	; 227
     a4e:	d2 e0       	ldi	r29, 0x02	; 2
     a50:	47 e0       	ldi	r20, 0x07	; 7
     a52:	53 e0       	ldi	r21, 0x03	; 3
	int i = 0;
	for(; i < 16; i++)
	{
		g_line1[i] = line1[i];
     a54:	dc 01       	movw	r26, r24
     a56:	2d 91       	ld	r18, X+
     a58:	cd 01       	movw	r24, r26
     a5a:	21 93       	st	Z+, r18
		g_line2[i] = line2[i];
     a5c:	d8 01       	movw	r26, r16
     a5e:	2d 91       	ld	r18, X+
     a60:	8d 01       	movw	r16, r26
     a62:	29 93       	st	Y+, r18

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1, char* line2)
{
	int i = 0;
	for(; i < 16; i++)
     a64:	e4 17       	cp	r30, r20
     a66:	f5 07       	cpc	r31, r21
     a68:	a9 f7       	brne	.-22     	; 0xa54 <_Z13changeLCDTextPcS_+0x18>
	{
		g_line1[i] = line1[i];
		g_line2[i] = line2[i];
	}
	i++;
	g_line1[i] = '\0';
     a6a:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <g_line1+0x11>
	g_line2[i] = '\0';
     a6e:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_line2+0x11>
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <_Z13changeLCDTextPc>:

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1)
{
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	e7 ef       	ldi	r30, 0xF7	; 247
     a84:	f2 e0       	ldi	r31, 0x02	; 2
     a86:	a3 ee       	ldi	r26, 0xE3	; 227
     a88:	b2 e0       	ldi	r27, 0x02	; 2
     a8a:	27 e0       	ldi	r18, 0x07	; 7
     a8c:	33 e0       	ldi	r19, 0x03	; 3
	int i = 0;
	for(; i < 16; i++)
	{
		g_line1[i] = line1[i];
		g_line2[i] = ' ';
     a8e:	90 e2       	ldi	r25, 0x20	; 32
void changeLCDText(char* line1)
{
	int i = 0;
	for(; i < 16; i++)
	{
		g_line1[i] = line1[i];
     a90:	89 91       	ld	r24, Y+
     a92:	81 93       	st	Z+, r24
		g_line2[i] = ' ';
     a94:	9d 93       	st	X+, r25

// TODO make method easier to use : calculate the length automatically
void changeLCDText(char* line1)
{
	int i = 0;
	for(; i < 16; i++)
     a96:	e2 17       	cp	r30, r18
     a98:	f3 07       	cpc	r31, r19
     a9a:	d1 f7       	brne	.-12     	; 0xa90 <_Z13changeLCDTextPc+0x14>
	{
		g_line1[i] = line1[i];
		g_line2[i] = ' ';
	}
	i++;
	g_line1[i] = '\0';
     a9c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <g_line1+0x11>
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <_Z12handleFSMLCDv>:



//Finite state machine for the interrupt service routine
void handleFSMLCD(void){
     aa6:	cf 93       	push	r28
	static uint8_t counterShortLCD = 0;
	static uint16_t counterLongLCD = 0;
	static uint8_t charPosition = 0;
	static char currentChar;

	switch(LCDState){
     aa8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	71 f1       	breq	.+92     	; 0xb0c <_Z12handleFSMLCDv+0x66>
     ab0:	28 f4       	brcc	.+10     	; 0xabc <_Z12handleFSMLCDv+0x16>
     ab2:	88 23       	and	r24, r24
     ab4:	61 f0       	breq	.+24     	; 0xace <_Z12handleFSMLCDv+0x28>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	d9 f0       	breq	.+54     	; 0xaf0 <_Z12handleFSMLCDv+0x4a>
     aba:	9a c0       	rjmp	.+308    	; 0xbf0 <_Z12handleFSMLCDv+0x14a>
     abc:	84 30       	cpi	r24, 0x04	; 4
     abe:	09 f4       	brne	.+2      	; 0xac2 <_Z12handleFSMLCDv+0x1c>
     ac0:	5d c0       	rjmp	.+186    	; 0xb7c <_Z12handleFSMLCDv+0xd6>
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <_Z12handleFSMLCDv+0x20>
     ac4:	46 c0       	rjmp	.+140    	; 0xb52 <_Z12handleFSMLCDv+0xac>
     ac6:	85 30       	cpi	r24, 0x05	; 5
     ac8:	09 f4       	brne	.+2      	; 0xacc <_Z12handleFSMLCDv+0x26>
     aca:	81 c0       	rjmp	.+258    	; 0xbce <_Z12handleFSMLCDv+0x128>
     acc:	91 c0       	rjmp	.+290    	; 0xbf0 <_Z12handleFSMLCDv+0x14a>
		case CLEAR_STATE:
		clearDisplay();
     ace:	e7 de       	rcall	.-562    	; 0x89e <_Z12clearDisplayv>
		//Set enable bit for 1 cycle of 50 us
		if(enableOnOff){
     ad0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     ad4:	88 23       	and	r24, r24
     ad6:	19 f0       	breq	.+6      	; 0xade <_Z12handleFSMLCDv+0x38>
			enableOnOff = 0;
     ad8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     adc:	95 c0       	rjmp	.+298    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			enableOnOff = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
			PORTG &= ~(1 << E);
     ae4:	a2 98       	cbi	0x14, 2	; 20
			counterShortLCD = 0;
     ae6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZZ12handleFSMLCDvE15counterShortLCD>
			LCDState = WAIT_1_5_MS_STATE;
     aea:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
     aee:	8c c0       	rjmp	.+280    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		break;

		// 30 * 50us = 1.5ms
		case WAIT_1_5_MS_STATE:
		if (counterShortLCD >= 30){
     af0:	c0 91 e0 02 	lds	r28, 0x02E0	; 0x8002e0 <_ZZ12handleFSMLCDvE15counterShortLCD>
     af4:	ce 31       	cpi	r28, 0x1E	; 30
     af6:	30 f0       	brcs	.+12     	; 0xb04 <_Z12handleFSMLCDv+0x5e>
			LCDState = LINE1_STATE;
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
			charPosition = 0;
     afe:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
			inputMode();
     b02:	18 df       	rcall	.-464    	; 0x934 <_Z9inputModev>
		}
		counterShortLCD++;
     b04:	cf 5f       	subi	r28, 0xFF	; 255
     b06:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <_ZZ12handleFSMLCDvE15counterShortLCD>
		break;
     b0a:	7e c0       	rjmp	.+252    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		case LINE1_STATE:
		currentChar = g_line1[charPosition];
     b0c:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     b10:	e9 2f       	mov	r30, r25
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	e9 50       	subi	r30, 0x09	; 9
     b16:	fd 4f       	sbci	r31, 0xFD	; 253
     b18:	80 81       	ld	r24, Z
     b1a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZZ12handleFSMLCDvE11currentChar>
		if((charPosition < MAX_NUMBER_CHAR_LCD_DISPLAY) && (currentChar != '\0'))
     b1e:	90 31       	cpi	r25, 0x10	; 16
     b20:	a0 f4       	brcc	.+40     	; 0xb4a <_Z12handleFSMLCDv+0xa4>
     b22:	88 23       	and	r24, r24
     b24:	91 f0       	breq	.+36     	; 0xb4a <_Z12handleFSMLCDv+0xa4>
		{
			if(enableOnOff){
     b26:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     b2a:	99 23       	and	r25, r25
     b2c:	21 f0       	breq	.+8      	; 0xb36 <_Z12handleFSMLCDv+0x90>
				LCD_WriteChar(currentChar);
     b2e:	7a de       	rcall	.-780    	; 0x824 <_Z13LCD_WriteCharc>
				enableOnOff = 0;
     b30:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     b34:	69 c0       	rjmp	.+210    	; 0xc08 <_Z12handleFSMLCDv+0x162>
			}
			else
			{
				PORTG &= ~(1 << E);
     b36:	a2 98       	cbi	0x14, 2	; 20
				enableOnOff = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
				charPosition++;
     b3e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     b48:	5f c0       	rjmp	.+190    	; 0xc08 <_Z12handleFSMLCDv+0x162>
			}
		}
		else
		{
			LCDState = CHANGE_ADDRESS_STATE;
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
     b50:	5b c0       	rjmp	.+182    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		break;

		case CHANGE_ADDRESS_STATE:
		if(enableOnOff){
     b52:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     b56:	88 23       	and	r24, r24
     b58:	31 f0       	breq	.+12     	; 0xb66 <_Z12handleFSMLCDv+0xc0>
			SetAdress(LINE2);
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	ab de       	rcall	.-682    	; 0x8b6 <_Z9SetAdressi>
			enableOnOff = 0;
     b60:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     b64:	51 c0       	rjmp	.+162    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			PORTG &= ~(1 << E);
     b66:	a2 98       	cbi	0x14, 2	; 20
			enableOnOff = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
			charPosition = 0;
     b6e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
			LCDState = LINE2_STATE;
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
			inputMode();
     b78:	dd de       	rcall	.-582    	; 0x934 <_Z9inputModev>
     b7a:	46 c0       	rjmp	.+140    	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		break;

		case LINE2_STATE:
		currentChar = g_line2[charPosition];
     b7c:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     b80:	e9 2f       	mov	r30, r25
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ed 51       	subi	r30, 0x1D	; 29
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZZ12handleFSMLCDvE11currentChar>
		if((charPosition < MAX_NUMBER_CHAR_LCD_DISPLAY) && (currentChar != '\0'))
     b8e:	90 31       	cpi	r25, 0x10	; 16
     b90:	a0 f4       	brcc	.+40     	; 0xbba <_Z12handleFSMLCDv+0x114>
     b92:	88 23       	and	r24, r24
     b94:	91 f0       	breq	.+36     	; 0xbba <_Z12handleFSMLCDv+0x114>
		{
			if(enableOnOff){
     b96:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     b9a:	99 23       	and	r25, r25
     b9c:	21 f0       	breq	.+8      	; 0xba6 <_Z12handleFSMLCDv+0x100>
				LCD_WriteChar(currentChar);
     b9e:	42 de       	rcall	.-892    	; 0x824 <_Z13LCD_WriteCharc>
				enableOnOff = 0;
     ba0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
     ba4:	31 c0       	rjmp	.+98     	; 0xc08 <_Z12handleFSMLCDv+0x162>
			}
			else
			{
				PORTG &= ~(1 << E);
     ba6:	a2 98       	cbi	0x14, 2	; 20
				enableOnOff = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
				charPosition++;
     bae:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <_Z12handleFSMLCDv+0x162>
			}
		}
		else
		{
			charPosition = 0;
     bba:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZZ12handleFSMLCDvE12charPosition>
			counterLongLCD = 0;
     bbe:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     bc2:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_ZZ12handleFSMLCDvE14counterLongLCD>
			LCDState = WAIT_STATE;
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <_Z12handleFSMLCDv+0x162>
		// After these 100 cycles, the state machine stays in this state for a certain
		// time depending on the LCD_REFRESH_RATE parameter set in lcd.h
		// 1/LCD_REFRESH_RATE = (100 + number of cycles) * time_between_LCD_interrupts
		//
		case WAIT_STATE:
		if(counterLongLCD >= 2000) // approximately 10 Hz refresh rate
     bce:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZZ12handleFSMLCDvE14counterLongLCD>
     bd2:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     bd6:	80 3d       	cpi	r24, 0xD0	; 208
     bd8:	27 e0       	ldi	r18, 0x07	; 7
     bda:	92 07       	cpc	r25, r18
     bdc:	18 f0       	brcs	.+6      	; 0xbe4 <_Z12handleFSMLCDv+0x13e>
		{
			LCDState = CLEAR_STATE;
     bde:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
     be2:	12 c0       	rjmp	.+36     	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		else
		{
			counterLongLCD++;
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     bea:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_ZZ12handleFSMLCDvE14counterLongLCD>
     bee:	0c c0       	rjmp	.+24     	; 0xc08 <_Z12handleFSMLCDv+0x162>
		}
		break;
		default:
		LCDState = WAIT_STATE;
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZZ12handleFSMLCDvE8LCDState>
		counterShortLCD = 0;
     bf6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZZ12handleFSMLCDvE15counterShortLCD>
		counterLongLCD = 0;
     bfa:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZZ12handleFSMLCDvE14counterLongLCD+0x1>
     bfe:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_ZZ12handleFSMLCDvE14counterLongLCD>
		enableOnOff = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ12handleFSMLCDvE11enableOnOff>
	}
}
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>:
	* @param *port: port of the pin (e.g. PORTA)
	* @param *portreg: ddr of the pin (e.g. DDRA)
	* @retval none
	*/
void  WS2812::ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi,uint8_t *port, uint8_t *portreg)
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	d8 01       	movw	r26, r16
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo = ~maskhi & *port;
     c14:	8c 91       	ld	r24, X
     c16:	92 2f       	mov	r25, r18
     c18:	90 95       	com	r25
     c1a:	98 23       	and	r25, r24
  maskhi |= *port;
     c1c:	28 2b       	or	r18, r24
  sreg_prev=SREG;
     c1e:	cf b7       	in	r28, 0x3f	; 63
  cli();  
     c20:	f8 94       	cli

  while (datlen--) {
     c22:	41 15       	cp	r20, r1
     c24:	51 05       	cpc	r21, r1
     c26:	a9 f0       	breq	.+42     	; 0xc52 <skipone55+0xc>
     c28:	fb 01       	movw	r30, r22
     c2a:	64 0f       	add	r22, r20
     c2c:	75 1f       	adc	r23, r21
    curbyte=*data++;
     c2e:	81 91       	ld	r24, Z+
    "       dec   %0    \n\t"    //  '1' [+4] '0' [+3]
    "       brne  loop%=\n\t"    //  '1' [+5] '0' [+4]
    :	"=&d" (ctr)
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
     c30:	38 e0       	ldi	r19, 0x08	; 8

00000c32 <loop55>:
     c32:	2c 93       	st	X, r18
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <loop55+0x4>
     c36:	87 ff       	sbrs	r24, 7
     c38:	9c 93       	st	X, r25
     c3a:	88 0f       	add	r24, r24
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <loop55+0xc>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <loop55+0xe>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <loop55+0x10>
     c42:	08 f4       	brcc	.+2      	; 0xc46 <skipone55>
     c44:	9c 93       	st	X, r25

00000c46 <skipone55>:
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <skipone55+0x2>
     c48:	3a 95       	dec	r19
     c4a:	99 f7       	brne	.-26     	; 0xc32 <loop55>
  masklo = ~maskhi & *port;
  maskhi |= *port;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     c4c:	e6 17       	cp	r30, r22
     c4e:	f7 07       	cpc	r31, r23
     c50:	71 f7       	brne	.-36     	; 0xc2e <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_+0x22>
//    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    :	"r" (curbyte), "x" (port), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     c52:	cf bf       	out	0x3f, r28	; 63
}
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <main>:
#define LED1J 0X20
#define LED2B 0x40
#define LED2R 0x80

int main()
{
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	cf 54       	subi	r28, 0x4F	; 79
     c66:	d1 09       	sbc	r29, r1
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
	//initialize LCD
	initLCD(); 		// configure LCD
     c72:	7b de       	rcall	.-778    	; 0x96a <_Z7initLCDv>
	//char* buffers for printing stuff on the LCD
	char buffer[20];
	char buffer2[20];
	
	//create ESC object
	Esc escFL(FL), escBL(BL),escBR(BR), escFR(FR);
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	ce 01       	movw	r24, r28
     c7a:	82 5b       	subi	r24, 0xB2	; 178
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	5b da       	rcall	.-2890   	; 0x136 <_ZN3EscC1Ei>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	ce 01       	movw	r24, r28
     c86:	84 5b       	subi	r24, 0xB4	; 180
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	55 da       	rcall	.-2902   	; 0x136 <_ZN3EscC1Ei>
     c8c:	64 e0       	ldi	r22, 0x04	; 4
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	ce 01       	movw	r24, r28
     c92:	86 5b       	subi	r24, 0xB6	; 182
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	4f da       	rcall	.-2914   	; 0x136 <_ZN3EscC1Ei>
     c98:	63 e0       	ldi	r22, 0x03	; 3
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	88 5b       	subi	r24, 0xB8	; 184
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	49 da       	rcall	.-2926   	; 0x136 <_ZN3EscC1Ei>
	
	//create objects for led strips
	WS2812 LEDFRT(1, FRT); // 100 LED
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	ce 01       	movw	r24, r28
     cac:	cb 96       	adiw	r24, 0x3b	; 59
     cae:	cf d2       	rcall	.+1438   	; 0x124e <_ZN6WS2812C1Ejh>
	cRGB valueFRT;	
	
	//create IMU object
	IMU imu;	
     cb0:	ce 01       	movw	r24, r28
     cb2:	89 96       	adiw	r24, 0x29	; 41
     cb4:	9e dc       	rcall	.-1732   	; 0x5f2 <_ZN3IMUC1Ev>
	
	//Initialize modules; comment out to deactivate feature
	initLCD();
     cb6:	59 de       	rcall	.-846    	; 0x96a <_Z7initLCDv>
	//initRF();
	//initializeESC();
	//initWS2812();
	initializeI2C();
     cb8:	87 da       	rcall	.-2802   	; 0x1c8 <_Z13initializeI2Cv>
	imu.initialize();
     cba:	ce 01       	movw	r24, r28
     cbc:	89 96       	adiw	r24, 0x29	; 41
     cbe:	9a dc       	rcall	.-1740   	; 0x5f4 <_ZN3IMU10initializeEv>
	//After everything is initialized, start interrupts
	startInterrupt();
     cc0:	1c dd       	rcall	.-1480   	; 0x6fa <_Z14startInterruptv>
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     cc2:	8e 01       	movw	r16, r28
     cc4:	0b 5e       	subi	r16, 0xEB	; 235
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	5c 01       	movw	r10, r24
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     cce:	40 2e       	mov	r4, r16
     cd0:	51 2e       	mov	r5, r17
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     cd2:	68 2e       	mov	r6, r24
     cd4:	7b 2c       	mov	r7, r11
		//RF receiver handler
		if(flagRF)
		{
			flagRF = 0;
			handleFSMRF();
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     cd6:	0f 2e       	mov	r0, r31
     cd8:	ff e9       	ldi	r31, 0x9F	; 159
     cda:	cf 2e       	mov	r12, r31
     cdc:	f2 e0       	ldi	r31, 0x02	; 2
     cde:	df 2e       	mov	r13, r31
     ce0:	f0 2d       	mov	r31, r0
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     ce2:	0f 2e       	mov	r0, r31
     ce4:	f9 ea       	ldi	r31, 0xA9	; 169
     ce6:	ef 2e       	mov	r14, r31
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	ff 2e       	mov	r15, r31
     cec:	f0 2d       	mov	r31, r0
			static int i = 0;
			static bool directionUp = true;
			//Led strips shit
			for(int j = 0; j<1; j++)
			{
				valueFRT.b = i; valueFRT.g = i; valueFRT.r = i; // RGB Value -> red
     cee:	0f 2e       	mov	r0, r31
     cf0:	fb e0       	ldi	r31, 0x0B	; 11
     cf2:	8f 2e       	mov	r8, r31
     cf4:	f3 e0       	ldi	r31, 0x03	; 3
     cf6:	9f 2e       	mov	r9, r31
     cf8:	f0 2d       	mov	r31, r0
				LEDFRT.set_crgb_at(j, valueFRT); // Set value at LED found at index j
				valueFRT.b = 255; valueFRT.g = 255; valueFRT.r = 255; // RGB Value -> Blue
			}
			LEDFRT.sync(); // Sends the value to the LED
			if(i>=255) directionUp = false;
			if(i<=0) directionUp = true;
     cfa:	33 24       	eor	r3, r3
     cfc:	33 94       	inc	r3
	{
		////minimum useless operation in the while loop, otherwise bugs
		//DDRA = 0xFF;

		//LCD handler
		if(flagLCD){
     cfe:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <flagLCD>
     d02:	88 23       	and	r24, r24
     d04:	19 f0       	breq	.+6      	; 0xd0c <main+0xb0>
			flagLCD = 0;
     d06:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <flagLCD>
			handleFSMLCD();
     d0a:	cd de       	rcall	.-614    	; 0xaa6 <_Z12handleFSMLCDv>
		}

		//RF receiver handler
		if(flagRF)
     d0c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <flagRF>
     d10:	88 23       	and	r24, r24
     d12:	79 f1       	breq	.+94     	; 0xd72 <main+0x116>
		{
			flagRF = 0;
     d14:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <flagRF>
			handleFSMRF();
     d18:	b9 d0       	rcall	.+370    	; 0xe8c <_Z11handleFSMRFv>
			sprintf(buffer, "1:%u 2:%u", ch_1_pw, ch_2_pw);
     d1a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <ch_2_pw+0x1>
     d1e:	8f 93       	push	r24
     d20:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <ch_2_pw>
     d24:	8f 93       	push	r24
     d26:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <ch_1_pw+0x1>
     d2a:	8f 93       	push	r24
     d2c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <ch_1_pw>
     d30:	8f 93       	push	r24
     d32:	df 92       	push	r13
     d34:	cf 92       	push	r12
     d36:	1f 93       	push	r17
     d38:	0f 93       	push	r16
     d3a:	bb d4       	rcall	.+2422   	; 0x16b2 <sprintf>
			sprintf(buffer2, "3:%u 4:%u", ch_3_pw, ch_4_pw);
     d3c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <ch_4_pw+0x1>
     d40:	8f 93       	push	r24
     d42:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <ch_4_pw>
     d46:	8f 93       	push	r24
     d48:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <ch_3_pw+0x1>
     d4c:	8f 93       	push	r24
     d4e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <ch_3_pw>
     d52:	8f 93       	push	r24
     d54:	ff 92       	push	r15
     d56:	ef 92       	push	r14
     d58:	bf 92       	push	r11
     d5a:	af 92       	push	r10
     d5c:	aa d4       	rcall	.+2388   	; 0x16b2 <sprintf>
			changeLCDText(buffer, buffer2);
     d5e:	66 2d       	mov	r22, r6
     d60:	77 2d       	mov	r23, r7
     d62:	84 2d       	mov	r24, r4
     d64:	95 2d       	mov	r25, r5
     d66:	6a de       	rcall	.-812    	; 0xa3c <_Z13changeLCDTextPcS_>
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
		}
		
		//ESC handler
		if(flagESC)
     d72:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <flagESC>
     d76:	88 23       	and	r24, r24
     d78:	11 f1       	breq	.+68     	; 0xdbe <main+0x162>
		{
			flagESC = 0;
     d7a:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <flagESC>
			escFL.set(ch_3_pw);
     d7e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ch_3_pw>
     d82:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ch_3_pw+0x1>
     d86:	ce 01       	movw	r24, r28
     d88:	82 5b       	subi	r24, 0xB2	; 178
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	d8 d9       	rcall	.-3152   	; 0x13e <_ZN3Esc3setEj>
			escBL.set(ch_3_pw);
     d8e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ch_3_pw>
     d92:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ch_3_pw+0x1>
     d96:	ce 01       	movw	r24, r28
     d98:	84 5b       	subi	r24, 0xB4	; 180
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	d0 d9       	rcall	.-3168   	; 0x13e <_ZN3Esc3setEj>
			escBR.set(ch_3_pw);
     d9e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ch_3_pw>
     da2:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ch_3_pw+0x1>
     da6:	ce 01       	movw	r24, r28
     da8:	86 5b       	subi	r24, 0xB6	; 182
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	c8 d9       	rcall	.-3184   	; 0x13e <_ZN3Esc3setEj>
			escFR.set(ch_3_pw);
     dae:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <ch_3_pw>
     db2:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <ch_3_pw+0x1>
     db6:	ce 01       	movw	r24, r28
     db8:	88 5b       	subi	r24, 0xB8	; 184
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	c0 d9       	rcall	.-3200   	; 0x13e <_ZN3Esc3setEj>
		}
		
		if(flagWS2812)
     dbe:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <flagWS2812>
     dc2:	88 23       	and	r24, r24
     dc4:	81 f1       	breq	.+96     	; 0xe26 <main+0x1ca>
		{
			flagWS2812 = 0;
     dc6:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <flagWS2812>
			static int i = 0;
			static bool directionUp = true;
			//Led strips shit
			for(int j = 0; j<1; j++)
			{
				valueFRT.b = i; valueFRT.g = i; valueFRT.r = i; // RGB Value -> red
     dca:	f4 01       	movw	r30, r8
     dcc:	40 81       	ld	r20, Z
				LEDFRT.set_crgb_at(j, valueFRT); // Set value at LED found at index j
     dce:	24 2f       	mov	r18, r20
     dd0:	34 2f       	mov	r19, r20
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	ce 01       	movw	r24, r28
     dd8:	cb 96       	adiw	r24, 0x3b	; 59
     dda:	4f d2       	rcall	.+1182   	; 0x127a <_ZN6WS281211set_crgb_atEj4cRGB>
				valueFRT.b = 255; valueFRT.g = 255; valueFRT.r = 255; // RGB Value -> Blue
			}
			LEDFRT.sync(); // Sends the value to the LED
     ddc:	ce 01       	movw	r24, r28
     dde:	cb 96       	adiw	r24, 0x3b	; 59
     de0:	0e d3       	rcall	.+1564   	; 0x13fe <_ZN6WS28124syncEv>
			if(i>=255) directionUp = false;
     de2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ZZ4mainE1i>
     de6:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <_ZZ4mainE1i+0x1>
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	91 05       	cpc	r25, r1
     dee:	34 f0       	brlt	.+12     	; 0xdfc <main+0x1a0>
     df0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZZ4mainE11directionUp>
			if(i<=0) directionUp = true;
     df4:	18 16       	cp	r1, r24
     df6:	19 06       	cpc	r1, r25
     df8:	8c f0       	brlt	.+34     	; 0xe1c <main+0x1c0>
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <main+0x1a6>
     dfc:	18 16       	cp	r1, r24
     dfe:	19 06       	cpc	r1, r25
     e00:	1c f0       	brlt	.+6      	; 0xe08 <main+0x1ac>
     e02:	30 92 07 02 	sts	0x0207, r3	; 0x800207 <_ZZ4mainE11directionUp>
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <main+0x1b4>
			if (directionUp) i++;
     e08:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZZ4mainE11directionUp>
     e0c:	22 23       	and	r18, r18
     e0e:	31 f0       	breq	.+12     	; 0xe1c <main+0x1c0>
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <_ZZ4mainE1i+0x1>
     e16:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ZZ4mainE1i>
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <main+0x1ca>
			else i--;
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <_ZZ4mainE1i+0x1>
     e22:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ZZ4mainE1i>
		}

		if(flagIMU)
     e26:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <flagIMU>
     e2a:	22 23       	and	r18, r18
     e2c:	09 f4       	brne	.+2      	; 0xe30 <main+0x1d4>
     e2e:	67 cf       	rjmp	.-306    	; 0xcfe <main+0xa2>
		{
			flagIMU = 0;
     e30:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <flagIMU>
			imu.TakeMeasures();
     e34:	ce 01       	movw	r24, r28
     e36:	89 96       	adiw	r24, 0x29	; 41
     e38:	fe db       	rcall	.-2052   	; 0x636 <_ZN3IMU12TakeMeasuresEv>
			sprintf(buffer, "ax:%u ay:%u", imu.accx, imu.accy);
     e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
     e3c:	8f 93       	push	r24
     e3e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e40:	8f 93       	push	r24
     e42:	8a a5       	ldd	r24, Y+42	; 0x2a
     e44:	8f 93       	push	r24
     e46:	89 a5       	ldd	r24, Y+41	; 0x29
     e48:	8f 93       	push	r24
     e4a:	83 eb       	ldi	r24, 0xB3	; 179
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	9f 93       	push	r25
     e50:	8f 93       	push	r24
     e52:	1f 93       	push	r17
     e54:	0f 93       	push	r16
     e56:	2d d4       	rcall	.+2138   	; 0x16b2 <sprintf>
			sprintf(buffer2, "az:%u gx:%u", imu.accz, imu.gyrx);
     e58:	8a a9       	ldd	r24, Y+50	; 0x32
     e5a:	8f 93       	push	r24
     e5c:	89 a9       	ldd	r24, Y+49	; 0x31
     e5e:	8f 93       	push	r24
     e60:	8e a5       	ldd	r24, Y+46	; 0x2e
     e62:	8f 93       	push	r24
     e64:	8d a5       	ldd	r24, Y+45	; 0x2d
     e66:	8f 93       	push	r24
     e68:	8f eb       	ldi	r24, 0xBF	; 191
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	9f 93       	push	r25
     e6e:	8f 93       	push	r24
     e70:	bf 92       	push	r11
     e72:	af 92       	push	r10
     e74:	1e d4       	rcall	.+2108   	; 0x16b2 <sprintf>
			changeLCDText(buffer, buffer2);
     e76:	66 2d       	mov	r22, r6
     e78:	77 2d       	mov	r23, r7
     e7a:	84 2d       	mov	r24, r4
     e7c:	95 2d       	mov	r25, r5
     e7e:	de dd       	rcall	.-1092   	; 0xa3c <_Z13changeLCDTextPcS_>
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	25 cf       	rjmp	.-438    	; 0xcd6 <main+0x7a>

00000e8c <_Z11handleFSMRFv>:
	static bool ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
	static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
	static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;
	
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
     e8c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     e90:	85 ff       	sbrs	r24, 5
     e92:	71 c1       	rjmp	.+738    	; 0x1176 <_Z11handleFSMRFv+0x2ea>
     e94:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_ZZ11handleFSMRFvE9last_ch_1>
     e98:	81 11       	cpse	r24, r1
     e9a:	c5 c1       	rjmp	.+906    	; 0x1226 <_Z11handleFSMRFv+0x39a>
     e9c:	71 c1       	rjmp	.+738    	; 0x1180 <_Z11handleFSMRFv+0x2f4>
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_Z11handleFSMRFv+0x1e>
		else ch_1_ovf_rising = false;
     ea6:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     eaa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     eae:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	92 2b       	or	r25, r18
     eb6:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     eba:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <_ZZ11handleFSMRFvE10count_ch_1>
     ebe:	43 c0       	rjmp	.+134    	; 0xf46 <_Z11handleFSMRFv+0xba>
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
     ec0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_ZZ11handleFSMRFvE9last_ch_1>
     ec4:	81 11       	cpse	r24, r1
     ec6:	66 c1       	rjmp	.+716    	; 0x1194 <_Z11handleFSMRFv+0x308>
     ec8:	3e c0       	rjmp	.+124    	; 0xf46 <_Z11handleFSMRFv+0xba>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
     eca:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     ece:	81 11       	cpse	r24, r1
     ed0:	16 c0       	rjmp	.+44     	; 0xefe <_Z11handleFSMRFv+0x72>
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <_Z11handleFSMRFv+0x50>
     ed4:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZZ11handleFSMRFvE15ch_1_ovf_rising>
     ed8:	88 23       	and	r24, r24
     eda:	89 f0       	breq	.+34     	; 0xefe <_Z11handleFSMRFv+0x72>
     edc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ee0:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	92 2b       	or	r25, r18
     ee8:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <_ZZ11handleFSMRFvE10count_ch_1>
     eec:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     ef0:	82 1b       	sub	r24, r18
     ef2:	93 0b       	sbc	r25, r19
     ef4:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <ch_1_pw+0x1>
     ef8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <ch_1_pw>
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <_Z11handleFSMRFv+0x92>
		else ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     efe:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     f02:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	92 2b       	or	r25, r18
     f0a:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <_ZZ11handleFSMRFvE10count_ch_1>
     f0e:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <_ZZ11handleFSMRFvE10count_ch_1+0x1>
     f12:	82 1b       	sub	r24, r18
     f14:	93 0b       	sbc	r25, r19
     f16:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <ch_1_pw+0x1>
     f1a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <ch_1_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     f1e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
     f22:	81 11       	cpse	r24, r1
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <_Z11handleFSMRFv+0xb6>
     f26:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
     f2a:	81 11       	cpse	r24, r1
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <_Z11handleFSMRFv+0xb6>
     f2e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
     f32:	81 11       	cpse	r24, r1
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <_Z11handleFSMRFv+0xb6>
     f36:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
     f3a:	81 11       	cpse	r24, r1
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <_Z11handleFSMRFv+0xb6>
     f3e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_1_counting = false;
     f42:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
	}
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
     f46:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     f4a:	84 ff       	sbrs	r24, 4
     f4c:	34 c1       	rjmp	.+616    	; 0x11b6 <_Z11handleFSMRFv+0x32a>
     f4e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ11handleFSMRFvE9last_ch_2>
     f52:	81 11       	cpse	r24, r1
     f54:	6d c1       	rjmp	.+730    	; 0x1230 <_Z11handleFSMRFv+0x3a4>
     f56:	25 c1       	rjmp	.+586    	; 0x11a2 <_Z11handleFSMRFv+0x316>
	{	last_ch_2 = true; ch_2_counting = true;
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <_Z11handleFSMRFv+0xd8>
		else ch_2_ovf_rising = false;
     f60:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
     f64:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     f68:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	92 2b       	or	r25, r18
     f70:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     f74:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZZ11handleFSMRFvE10count_ch_2>
     f78:	43 c0       	rjmp	.+134    	; 0x1000 <_Z11handleFSMRFv+0x174>
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
     f7a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ11handleFSMRFvE9last_ch_2>
     f7e:	81 11       	cpse	r24, r1
     f80:	1f c1       	rjmp	.+574    	; 0x11c0 <_Z11handleFSMRFv+0x334>
     f82:	3e c0       	rjmp	.+124    	; 0x1000 <_Z11handleFSMRFv+0x174>
	{	last_ch_2 = false;
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising)) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
     f84:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     f88:	81 11       	cpse	r24, r1
     f8a:	16 c0       	rjmp	.+44     	; 0xfb8 <_Z11handleFSMRFv+0x12c>
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <_Z11handleFSMRFv+0x10a>
     f8e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZ11handleFSMRFvE15ch_2_ovf_rising>
     f92:	88 23       	and	r24, r24
     f94:	89 f0       	breq	.+34     	; 0xfb8 <_Z11handleFSMRFv+0x12c>
     f96:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     f9a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	92 2b       	or	r25, r18
     fa2:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZZ11handleFSMRFvE10count_ch_2>
     fa6:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     faa:	82 1b       	sub	r24, r18
     fac:	93 0b       	sbc	r25, r19
     fae:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <ch_2_pw+0x1>
     fb2:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <ch_2_pw>
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <_Z11handleFSMRFv+0x14c>
		else ch_2_pw = 65535 - count_ch_2 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
     fb8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     fbc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	92 2b       	or	r25, r18
     fc4:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZZ11handleFSMRFvE10count_ch_2>
     fc8:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <_ZZ11handleFSMRFvE10count_ch_2+0x1>
     fcc:	82 1b       	sub	r24, r18
     fce:	93 0b       	sbc	r25, r19
     fd0:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <ch_2_pw+0x1>
     fd4:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <ch_2_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
     fd8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
     fdc:	81 11       	cpse	r24, r1
     fde:	0e c0       	rjmp	.+28     	; 0xffc <_Z11handleFSMRFv+0x170>
     fe0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
     fe4:	81 11       	cpse	r24, r1
     fe6:	0a c0       	rjmp	.+20     	; 0xffc <_Z11handleFSMRFv+0x170>
     fe8:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
     fec:	81 11       	cpse	r24, r1
     fee:	06 c0       	rjmp	.+12     	; 0xffc <_Z11handleFSMRFv+0x170>
     ff0:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
     ff4:	81 11       	cpse	r24, r1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <_Z11handleFSMRFv+0x170>
     ff8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_2_counting = false;
     ffc:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
	}
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
    1000:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    1004:	83 ff       	sbrs	r24, 3
    1006:	e3 c0       	rjmp	.+454    	; 0x11ce <_Z11handleFSMRFv+0x342>
    1008:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_ZZ11handleFSMRFvE9last_ch_3>
    100c:	81 11       	cpse	r24, r1
    100e:	15 c1       	rjmp	.+554    	; 0x123a <_Z11handleFSMRFv+0x3ae>
    1010:	e3 c0       	rjmp	.+454    	; 0x11d8 <_Z11handleFSMRFv+0x34c>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
    1018:	02 c0       	rjmp	.+4      	; 0x101e <_Z11handleFSMRFv+0x192>
		else ch_3_ovf_rising = false;
    101a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
    101e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1022:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	92 2b       	or	r25, r18
    102a:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <_ZZ11handleFSMRFvE10count_ch_3+0x1>
    102e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <_ZZ11handleFSMRFvE10count_ch_3>
    1032:	43 c0       	rjmp	.+134    	; 0x10ba <_Z11handleFSMRFv+0x22e>
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
    1034:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_ZZ11handleFSMRFvE9last_ch_3>
    1038:	81 11       	cpse	r24, r1
    103a:	d8 c0       	rjmp	.+432    	; 0x11ec <_Z11handleFSMRFv+0x360>
    103c:	3e c0       	rjmp	.+124    	; 0x10ba <_Z11handleFSMRFv+0x22e>
	{	last_ch_3 = false;
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising)) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
    103e:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
    1042:	81 11       	cpse	r24, r1
    1044:	16 c0       	rjmp	.+44     	; 0x1072 <_Z11handleFSMRFv+0x1e6>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <_Z11handleFSMRFv+0x1c4>
    1048:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ11handleFSMRFvE15ch_3_ovf_rising>
    104c:	88 23       	and	r24, r24
    104e:	89 f0       	breq	.+34     	; 0x1072 <_Z11handleFSMRFv+0x1e6>
    1050:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1054:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	92 2b       	or	r25, r18
    105c:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <_ZZ11handleFSMRFvE10count_ch_3>
    1060:	30 91 12 03 	lds	r19, 0x0312	; 0x800312 <_ZZ11handleFSMRFvE10count_ch_3+0x1>
    1064:	82 1b       	sub	r24, r18
    1066:	93 0b       	sbc	r25, r19
    1068:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <ch_3_pw+0x1>
    106c:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <ch_3_pw>
    1070:	10 c0       	rjmp	.+32     	; 0x1092 <_Z11handleFSMRFv+0x206>
		else ch_3_pw = 65535 - count_ch_3 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
    1072:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1076:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	92 2b       	or	r25, r18
    107e:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <_ZZ11handleFSMRFvE10count_ch_3>
    1082:	30 91 12 03 	lds	r19, 0x0312	; 0x800312 <_ZZ11handleFSMRFvE10count_ch_3+0x1>
    1086:	82 1b       	sub	r24, r18
    1088:	93 0b       	sbc	r25, r19
    108a:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <ch_3_pw+0x1>
    108e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <ch_3_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
    1092:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
    1096:	81 11       	cpse	r24, r1
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <_Z11handleFSMRFv+0x22a>
    109a:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
    109e:	81 11       	cpse	r24, r1
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <_Z11handleFSMRFv+0x22a>
    10a2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
    10a6:	81 11       	cpse	r24, r1
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <_Z11handleFSMRFv+0x22a>
    10aa:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
    10ae:	81 11       	cpse	r24, r1
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <_Z11handleFSMRFv+0x22a>
    10b2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_3_counting = false;
    10b6:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
	}
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
    10ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    10be:	82 ff       	sbrs	r24, 2
    10c0:	a6 c0       	rjmp	.+332    	; 0x120e <_Z11handleFSMRFv+0x382>
    10c2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ11handleFSMRFvE9last_ch_4>
    10c6:	81 11       	cpse	r24, r1
    10c8:	bd c0       	rjmp	.+378    	; 0x1244 <_Z11handleFSMRFv+0x3b8>
    10ca:	97 c0       	rjmp	.+302    	; 0x11fa <_Z11handleFSMRFv+0x36e>
	{	last_ch_4 = true; ch_4_counting = true;
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <_Z11handleFSMRFv+0x24c>
		else ch_4_ovf_rising = false;
    10d4:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
    10d8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    10dc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	92 2b       	or	r25, r18
    10e4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZ11handleFSMRFvE10count_ch_4+0x1>
    10e8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ11handleFSMRFvE10count_ch_4>
    10ec:	08 95       	ret
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
    10ee:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ11handleFSMRFvE9last_ch_4>
    10f2:	81 11       	cpse	r24, r1
    10f4:	91 c0       	rjmp	.+290    	; 0x1218 <_Z11handleFSMRFv+0x38c>
    10f6:	08 95       	ret
	{	last_ch_4 = false;
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising)) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
    10f8:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
    10fc:	81 11       	cpse	r24, r1
    10fe:	16 c0       	rjmp	.+44     	; 0x112c <_Z11handleFSMRFv+0x2a0>
    1100:	04 c0       	rjmp	.+8      	; 0x110a <_Z11handleFSMRFv+0x27e>
    1102:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZZ11handleFSMRFvE15ch_4_ovf_rising>
    1106:	88 23       	and	r24, r24
    1108:	89 f0       	breq	.+34     	; 0x112c <_Z11handleFSMRFv+0x2a0>
    110a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    110e:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	92 2b       	or	r25, r18
    1116:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <_ZZ11handleFSMRFvE10count_ch_4>
    111a:	30 91 0e 03 	lds	r19, 0x030E	; 0x80030e <_ZZ11handleFSMRFvE10count_ch_4+0x1>
    111e:	82 1b       	sub	r24, r18
    1120:	93 0b       	sbc	r25, r19
    1122:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <ch_4_pw+0x1>
    1126:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <ch_4_pw>
    112a:	10 c0       	rjmp	.+32     	; 0x114c <_Z11handleFSMRFv+0x2c0>
		else ch_4_pw = 65535 - count_ch_4 + (TCNT3L | TCNT3H << 8) + 1; //else there is an overflow calculate the real pulse time by adding 2^16
    112c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1130:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	92 2b       	or	r25, r18
    1138:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <_ZZ11handleFSMRFvE10count_ch_4>
    113c:	30 91 0e 03 	lds	r19, 0x030E	; 0x80030e <_ZZ11handleFSMRFvE10count_ch_4+0x1>
    1140:	82 1b       	sub	r24, r18
    1142:	93 0b       	sbc	r25, r19
    1144:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <ch_4_pw+0x1>
    1148:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <ch_4_pw>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
    114c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
    1150:	81 11       	cpse	r24, r1
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <_Z11handleFSMRFv+0x2e4>
    1154:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
    1158:	81 11       	cpse	r24, r1
    115a:	0a c0       	rjmp	.+20     	; 0x1170 <_Z11handleFSMRFv+0x2e4>
    115c:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
    1160:	81 11       	cpse	r24, r1
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <_Z11handleFSMRFv+0x2e4>
    1164:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
    1168:	81 11       	cpse	r24, r1
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <_Z11handleFSMRFv+0x2e4>
    116c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
		ch_4_counting = false;
    1170:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
    1174:	08 95       	ret
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
    1176:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    117a:	85 ff       	sbrs	r24, 5
    117c:	a1 ce       	rjmp	.-702    	; 0xec0 <_Z11handleFSMRFv+0x34>
    117e:	e3 ce       	rjmp	.-570    	; 0xf46 <_Z11handleFSMRFv+0xba>
	static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
	static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;
	
	//channel_1
	if (PINJ & 0b00100000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true; ch_1_counting = true;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZZ11handleFSMRFvE9last_ch_1>
    1186:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_ZZ11handleFSMRFvE13ch_1_counting>
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
    118a:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    118e:	81 11       	cpse	r24, r1
    1190:	86 ce       	rjmp	.-756    	; 0xe9e <_Z11handleFSMRFv+0x12>
    1192:	89 ce       	rjmp	.-750    	; 0xea6 <_Z11handleFSMRFv+0x1a>
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
    1194:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_ZZ11handleFSMRFvE9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
    1198:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    119c:	81 11       	cpse	r24, r1
    119e:	9a ce       	rjmp	.-716    	; 0xed4 <_Z11handleFSMRFv+0x48>
    11a0:	94 ce       	rjmp	.-728    	; 0xeca <_Z11handleFSMRFv+0x3e>
		ch_1_counting = false;
	}
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
	{	last_ch_2 = true; ch_2_counting = true;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZZ11handleFSMRFvE9last_ch_2>
    11a8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZ11handleFSMRFvE13ch_2_counting>
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
    11ac:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    11b0:	81 11       	cpse	r24, r1
    11b2:	d2 ce       	rjmp	.-604    	; 0xf58 <_Z11handleFSMRFv+0xcc>
    11b4:	d5 ce       	rjmp	.-598    	; 0xf60 <_Z11handleFSMRFv+0xd4>
		else ch_2_ovf_rising = false;
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
    11b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    11ba:	84 ff       	sbrs	r24, 4
    11bc:	de ce       	rjmp	.-580    	; 0xf7a <_Z11handleFSMRFv+0xee>
    11be:	20 cf       	rjmp	.-448    	; 0x1000 <_Z11handleFSMRFv+0x174>
	{	last_ch_2 = false;
    11c0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZZ11handleFSMRFvE9last_ch_2>
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising)) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
    11c4:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    11c8:	81 11       	cpse	r24, r1
    11ca:	e1 ce       	rjmp	.-574    	; 0xf8e <_Z11handleFSMRFv+0x102>
    11cc:	db ce       	rjmp	.-586    	; 0xf84 <_Z11handleFSMRFv+0xf8>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
    11ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    11d2:	83 ff       	sbrs	r24, 3
    11d4:	2f cf       	rjmp	.-418    	; 0x1034 <_Z11handleFSMRFv+0x1a8>
    11d6:	71 cf       	rjmp	.-286    	; 0x10ba <_Z11handleFSMRFv+0x22e>
		ch_2_counting = false;
	}
	
	//channel_3
	if (PINJ & 0b00001000 && last_ch_3 == false) //Rising edge
	{	last_ch_3 = true; ch_3_counting = true;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZZ11handleFSMRFvE9last_ch_3>
    11de:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZZ11handleFSMRFvE13ch_3_counting>
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
    11e2:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    11e6:	81 11       	cpse	r24, r1
    11e8:	14 cf       	rjmp	.-472    	; 0x1012 <_Z11handleFSMRFv+0x186>
    11ea:	17 cf       	rjmp	.-466    	; 0x101a <_Z11handleFSMRFv+0x18e>
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
	{	last_ch_3 = false;
    11ec:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ11handleFSMRFvE9last_ch_3>
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising)) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
    11f0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    11f4:	81 11       	cpse	r24, r1
    11f6:	28 cf       	rjmp	.-432    	; 0x1048 <_Z11handleFSMRFv+0x1bc>
    11f8:	22 cf       	rjmp	.-444    	; 0x103e <_Z11handleFSMRFv+0x1b2>
		ch_3_counting = false;
	}
	
	//channel_4
	if (PINJ & 0b00000100 && last_ch_4 == false) //Rising edge
	{	last_ch_4 = true; ch_4_counting = true;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <_ZZ11handleFSMRFvE9last_ch_4>
    1200:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZZ11handleFSMRFvE13ch_4_counting>
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
    1204:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    1208:	81 11       	cpse	r24, r1
    120a:	60 cf       	rjmp	.-320    	; 0x10cc <_Z11handleFSMRFv+0x240>
    120c:	63 cf       	rjmp	.-314    	; 0x10d4 <_Z11handleFSMRFv+0x248>
		else ch_4_ovf_rising = false;
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
    120e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    1212:	82 ff       	sbrs	r24, 2
    1214:	6c cf       	rjmp	.-296    	; 0x10ee <_Z11handleFSMRFv+0x262>
    1216:	08 95       	ret
	{	last_ch_4 = false;
    1218:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ11handleFSMRFvE9last_ch_4>
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising)) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
    121c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <_ZZ11handleFSMRFvE11timer_3_ovf>
    1220:	81 11       	cpse	r24, r1
    1222:	6f cf       	rjmp	.-290    	; 0x1102 <_Z11handleFSMRFv+0x276>
    1224:	69 cf       	rjmp	.-302    	; 0x10f8 <_Z11handleFSMRFv+0x26c>
	{	last_ch_1 = true; ch_1_counting = true;
		if(timer_3_ovf) ch_1_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_1_ovf_rising = false;
		count_ch_1 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00100000) && last_ch_1 == true) //Falling edge
    1226:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    122a:	85 ff       	sbrs	r24, 5
    122c:	b3 cf       	rjmp	.-154    	; 0x1194 <_Z11handleFSMRFv+0x308>
    122e:	8b ce       	rjmp	.-746    	; 0xf46 <_Z11handleFSMRFv+0xba>
	{	last_ch_2 = true; ch_2_counting = true;
		if(timer_3_ovf) ch_2_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_2_ovf_rising = false;
		count_ch_2 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
    1230:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    1234:	84 ff       	sbrs	r24, 4
    1236:	c4 cf       	rjmp	.-120    	; 0x11c0 <_Z11handleFSMRFv+0x334>
    1238:	e3 ce       	rjmp	.-570    	; 0x1000 <_Z11handleFSMRFv+0x174>
	{	last_ch_3 = true; ch_3_counting = true;
		if(timer_3_ovf) ch_3_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_3_ovf_rising = false;
		count_ch_3 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00001000) && last_ch_3 == true) //Falling edge
    123a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    123e:	83 ff       	sbrs	r24, 3
    1240:	d5 cf       	rjmp	.-86     	; 0x11ec <_Z11handleFSMRFv+0x360>
    1242:	3b cf       	rjmp	.-394    	; 0x10ba <_Z11handleFSMRFv+0x22e>
	{	last_ch_4 = true; ch_4_counting = true;
		if(timer_3_ovf) ch_4_ovf_rising = true; //verify if there is an overflow before starting to count
		else ch_4_ovf_rising = false;
		count_ch_4 = TCNT3L | TCNT3H << 8; //record the counter value for the rising edge
	}
	else if (!(PINJ & 0b00000100) && last_ch_4 == true) //Falling edge
    1244:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    1248:	82 ff       	sbrs	r24, 2
    124a:	e6 cf       	rjmp	.-52     	; 0x1218 <_Z11handleFSMRFv+0x38c>
    124c:	08 95       	ret

0000124e <_ZN6WS2812C1Ejh>:
	* @brief Class destructor, restores the memory associated with the pixel array
	* @param none
	* @retval none
	*/
WS2812::~WS2812() {
	free(pixels);
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	79 83       	std	Y+1, r23	; 0x01
    1256:	68 83       	st	Y, r22
    1258:	4c 87       	std	Y+12, r20	; 0x0c
    125a:	cb 01       	movw	r24, r22
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	86 0f       	add	r24, r22
    1262:	97 1f       	adc	r25, r23
    1264:	f9 d0       	rcall	.+498    	; 0x1458 <malloc>
    1266:	9b 83       	std	Y+3, r25	; 0x03
    1268:	8a 83       	std	Y+2, r24	; 0x02
    126a:	1d 82       	std	Y+5, r1	; 0x05
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	8c 83       	std	Y+4, r24	; 0x04
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	8e 83       	std	Y+6, r24	; 0x06
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <_ZN6WS281211set_crgb_atEj4cRGB>:
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
    1280:	88 81       	ld	r24, Y
    1282:	99 81       	ldd	r25, Y+1	; 0x01
    1284:	68 17       	cp	r22, r24
    1286:	79 07       	cpc	r23, r25
    1288:	f8 f4       	brcc	.+62     	; 0x12c8 <_ZN6WS281211set_crgb_atEj4cRGB+0x4e>
    128a:	fb 01       	movw	r30, r22
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	6e 0f       	add	r22, r30
    1292:	7f 1f       	adc	r23, r31
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	aa 81       	ldd	r26, Y+2	; 0x02
    1298:	bb 81       	ldd	r27, Y+3	; 0x03
    129a:	a6 0f       	add	r26, r22
    129c:	b7 1f       	adc	r27, r23
    129e:	a8 0f       	add	r26, r24
    12a0:	b1 1d       	adc	r27, r1
    12a2:	3c 93       	st	X, r19
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	aa 81       	ldd	r26, Y+2	; 0x02
    12a8:	bb 81       	ldd	r27, Y+3	; 0x03
    12aa:	a6 0f       	add	r26, r22
    12ac:	b7 1f       	adc	r27, r23
    12ae:	a8 0f       	add	r26, r24
    12b0:	b1 1d       	adc	r27, r1
    12b2:	2c 93       	st	X, r18
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	ea 81       	ldd	r30, Y+2	; 0x02
    12b8:	fb 81       	ldd	r31, Y+3	; 0x03
    12ba:	e6 0f       	add	r30, r22
    12bc:	f7 1f       	adc	r31, r23
    12be:	e8 0f       	add	r30, r24
    12c0:	f1 1d       	adc	r31, r1
    12c2:	40 83       	st	Z, r20
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <_ZN6WS281211set_crgb_atEj4cRGB+0x50>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <_ZN6WS281211setAsOutputEv>:
	* This is the place to change the IO pins if we change the pins that control the LED strips
	* @param none
	* @retval none
	*/
void WS2812::setAsOutput()
{
    12d0:	dc 01       	movw	r26, r24
	//seem to have problems with port F, except for F3..., can't do shit
	switch (stripPosition)
    12d2:	1c 96       	adiw	r26, 0x0c	; 12
    12d4:	4c 91       	ld	r20, X
    12d6:	1c 97       	sbiw	r26, 0x0c	; 12
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	48 30       	cpi	r20, 0x08	; 8
    12dc:	51 05       	cpc	r21, r1
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <_ZN6WS281211setAsOutputEv+0x12>
    12e0:	8d c0       	rjmp	.+282    	; 0x13fc <_ZN6WS281211setAsOutputEv+0x12c>
    12e2:	fa 01       	movw	r30, r20
    12e4:	88 27       	eor	r24, r24
    12e6:	ee 58       	subi	r30, 0x8E	; 142
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	ad c0       	rjmp	.+346    	; 0x1448 <__tablejump2__>
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    12ee:	80 e4       	ldi	r24, 0x40	; 64
    12f0:	1b 96       	adiw	r26, 0x0b	; 11
    12f2:	8c 93       	st	X, r24
    12f4:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    12f6:	85 e2       	ldi	r24, 0x25	; 37
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	18 96       	adiw	r26, 0x08	; 8
    12fc:	9c 93       	st	X, r25
    12fe:	8e 93       	st	-X, r24
    1300:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    1302:	84 e2       	ldi	r24, 0x24	; 36
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	1a 96       	adiw	r26, 0x0a	; 10
    1308:	9c 93       	st	X, r25
    130a:	8e 93       	st	-X, r24
    130c:	19 97       	sbiw	r26, 0x09	; 9
    130e:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    1310:	80 e8       	ldi	r24, 0x80	; 128
    1312:	1b 96       	adiw	r26, 0x0b	; 11
    1314:	8c 93       	st	X, r24
    1316:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    1318:	85 e2       	ldi	r24, 0x25	; 37
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	18 96       	adiw	r26, 0x08	; 8
    131e:	9c 93       	st	X, r25
    1320:	8e 93       	st	-X, r24
    1322:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    1324:	84 e2       	ldi	r24, 0x24	; 36
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	1a 96       	adiw	r26, 0x0a	; 10
    132a:	9c 93       	st	X, r25
    132c:	8e 93       	st	-X, r24
    132e:	19 97       	sbiw	r26, 0x09	; 9
    1330:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	1b 96       	adiw	r26, 0x0b	; 11
    1336:	8c 93       	st	X, r24
    1338:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    133a:	85 e0       	ldi	r24, 0x05	; 5
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	18 96       	adiw	r26, 0x08	; 8
    1340:	9c 93       	st	X, r25
    1342:	8e 93       	st	-X, r24
    1344:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	1a 96       	adiw	r26, 0x0a	; 10
    134c:	9c 93       	st	X, r25
    134e:	8e 93       	st	-X, r24
    1350:	19 97       	sbiw	r26, 0x09	; 9
    1352:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	1b 96       	adiw	r26, 0x0b	; 11
    1358:	8c 93       	st	X, r24
    135a:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	18 96       	adiw	r26, 0x08	; 8
    1362:	9c 93       	st	X, r25
    1364:	8e 93       	st	-X, r24
    1366:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	1a 96       	adiw	r26, 0x0a	; 10
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
    1372:	19 97       	sbiw	r26, 0x09	; 9
    1374:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    1376:	80 e8       	ldi	r24, 0x80	; 128
    1378:	1b 96       	adiw	r26, 0x0b	; 11
    137a:	8c 93       	st	X, r24
    137c:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    137e:	81 e3       	ldi	r24, 0x31	; 49
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	9c 93       	st	X, r25
    1386:	8e 93       	st	-X, r24
    1388:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    138a:	80 e3       	ldi	r24, 0x30	; 48
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	1a 96       	adiw	r26, 0x0a	; 10
    1390:	9c 93       	st	X, r25
    1392:	8e 93       	st	-X, r24
    1394:	19 97       	sbiw	r26, 0x09	; 9
    1396:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    1398:	80 e4       	ldi	r24, 0x40	; 64
    139a:	1b 96       	adiw	r26, 0x0b	; 11
    139c:	8c 93       	st	X, r24
    139e:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    13a0:	81 e3       	ldi	r24, 0x31	; 49
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	18 96       	adiw	r26, 0x08	; 8
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
    13aa:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	1a 96       	adiw	r26, 0x0a	; 10
    13b2:	9c 93       	st	X, r25
    13b4:	8e 93       	st	-X, r24
    13b6:	19 97       	sbiw	r26, 0x09	; 9
    13b8:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	1b 96       	adiw	r26, 0x0b	; 11
    13be:	8c 93       	st	X, r24
    13c0:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    13c2:	88 e0       	ldi	r24, 0x08	; 8
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	18 96       	adiw	r26, 0x08	; 8
    13c8:	9c 93       	st	X, r25
    13ca:	8e 93       	st	-X, r24
    13cc:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    13ce:	87 e0       	ldi	r24, 0x07	; 7
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	1a 96       	adiw	r26, 0x0a	; 10
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	19 97       	sbiw	r26, 0x09	; 9
    13da:	08 95       	ret
	* @note Example of utilisation setOutput(&PORTA, &DDRA, 3)
	*/
void WS2812::setOutput(volatile uint8_t *port, volatile uint8_t *ddr, uint8_t pin) 
{
	//seem to have problems with port F, except for F3..., can`t do shit
		pinMask = _BV(pin);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	1b 96       	adiw	r26, 0x0b	; 11
    13e0:	8c 93       	st	X, r24
    13e2:	1b 97       	sbiw	r26, 0x0b	; 11
		ws2812_port = port;
    13e4:	88 e0       	ldi	r24, 0x08	; 8
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	18 96       	adiw	r26, 0x08	; 8
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
    13ee:	17 97       	sbiw	r26, 0x07	; 7
		ws2812_port_reg = ddr;
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	1a 96       	adiw	r26, 0x0a	; 10
    13f6:	9c 93       	st	X, r25
    13f8:	8e 93       	st	-X, r24
    13fa:	19 97       	sbiw	r26, 0x09	; 9
    13fc:	08 95       	ret

000013fe <_ZN6WS28124syncEv>:
	* @brief This method sets the right output port associated with the WS2812 object and sends the pixel data to the 
	* LED strip
	* @param none
	* @retval none
	*/
void WS2812::sync() {
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
	setAsOutput();
    140c:	61 df       	rcall	.-318    	; 0x12d0 <_ZN6WS281211setAsOutputEv>
	*ws2812_port_reg |= pinMask; // Enable DDR 
    140e:	e9 85       	ldd	r30, Y+9	; 0x09
    1410:	fa 85       	ldd	r31, Y+10	; 0x0a
    1412:	90 81       	ld	r25, Z
    1414:	8b 85       	ldd	r24, Y+11	; 0x0b
    1416:	89 2b       	or	r24, r25
    1418:	80 83       	st	Z, r24
	ws2812_sendarray_mask(pixels,3*count_led,pinMask,(uint8_t*) ws2812_port,(uint8_t*) ws2812_port_reg );	
    141a:	e9 84       	ldd	r14, Y+9	; 0x09
    141c:	fa 84       	ldd	r15, Y+10	; 0x0a
    141e:	0f 81       	ldd	r16, Y+7	; 0x07
    1420:	18 85       	ldd	r17, Y+8	; 0x08
    1422:	48 81       	ld	r20, Y
    1424:	59 81       	ldd	r21, Y+1	; 0x01
    1426:	ca 01       	movw	r24, r20
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	48 0f       	add	r20, r24
    142e:	59 1f       	adc	r21, r25
    1430:	6a 81       	ldd	r22, Y+2	; 0x02
    1432:	7b 81       	ldd	r23, Y+3	; 0x03
    1434:	2b 85       	ldd	r18, Y+11	; 0x0b
    1436:	ce 01       	movw	r24, r28
    1438:	e9 db       	rcall	.-2094   	; 0xc0c <_ZN6WS281221ws2812_sendarray_maskEPhjhS0_S0_>
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	08 95       	ret

00001448 <__tablejump2__>:
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	88 1f       	adc	r24, r24
    144e:	8b bf       	out	0x3b, r24	; 59
    1450:	07 90       	elpm	r0, Z+
    1452:	f6 91       	elpm	r31, Z
    1454:	e0 2d       	mov	r30, r0
    1456:	19 94       	eijmp

00001458 <malloc>:
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	91 05       	cpc	r25, r1
    1460:	10 f4       	brcc	.+4      	; 0x1466 <malloc+0xe>
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <__flp>
    146a:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <__flp+0x1>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	c0 e0       	ldi	r28, 0x00	; 0
    1474:	d0 e0       	ldi	r29, 0x00	; 0
    1476:	30 97       	sbiw	r30, 0x00	; 0
    1478:	11 f1       	breq	.+68     	; 0x14be <malloc+0x66>
    147a:	40 81       	ld	r20, Z
    147c:	51 81       	ldd	r21, Z+1	; 0x01
    147e:	48 17       	cp	r20, r24
    1480:	59 07       	cpc	r21, r25
    1482:	c0 f0       	brcs	.+48     	; 0x14b4 <malloc+0x5c>
    1484:	48 17       	cp	r20, r24
    1486:	59 07       	cpc	r21, r25
    1488:	61 f4       	brne	.+24     	; 0x14a2 <malloc+0x4a>
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	20 97       	sbiw	r28, 0x00	; 0
    1490:	19 f0       	breq	.+6      	; 0x1498 <malloc+0x40>
    1492:	9b 83       	std	Y+3, r25	; 0x03
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	2b c0       	rjmp	.+86     	; 0x14ee <malloc+0x96>
    1498:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <__flp+0x1>
    149c:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <__flp>
    14a0:	26 c0       	rjmp	.+76     	; 0x14ee <malloc+0x96>
    14a2:	21 15       	cp	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	19 f0       	breq	.+6      	; 0x14ae <malloc+0x56>
    14a8:	42 17       	cp	r20, r18
    14aa:	53 07       	cpc	r21, r19
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <malloc+0x5c>
    14ae:	9a 01       	movw	r18, r20
    14b0:	be 01       	movw	r22, r28
    14b2:	df 01       	movw	r26, r30
    14b4:	ef 01       	movw	r28, r30
    14b6:	02 80       	ldd	r0, Z+2	; 0x02
    14b8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ba:	e0 2d       	mov	r30, r0
    14bc:	dc cf       	rjmp	.-72     	; 0x1476 <malloc+0x1e>
    14be:	21 15       	cp	r18, r1
    14c0:	31 05       	cpc	r19, r1
    14c2:	09 f1       	breq	.+66     	; 0x1506 <malloc+0xae>
    14c4:	28 1b       	sub	r18, r24
    14c6:	39 0b       	sbc	r19, r25
    14c8:	24 30       	cpi	r18, 0x04	; 4
    14ca:	31 05       	cpc	r19, r1
    14cc:	90 f4       	brcc	.+36     	; 0x14f2 <malloc+0x9a>
    14ce:	12 96       	adiw	r26, 0x02	; 2
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	13 97       	sbiw	r26, 0x03	; 3
    14d6:	61 15       	cp	r22, r1
    14d8:	71 05       	cpc	r23, r1
    14da:	21 f0       	breq	.+8      	; 0x14e4 <malloc+0x8c>
    14dc:	fb 01       	movw	r30, r22
    14de:	93 83       	std	Z+3, r25	; 0x03
    14e0:	82 83       	std	Z+2, r24	; 0x02
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <malloc+0x94>
    14e4:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <__flp+0x1>
    14e8:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <__flp>
    14ec:	fd 01       	movw	r30, r26
    14ee:	32 96       	adiw	r30, 0x02	; 2
    14f0:	44 c0       	rjmp	.+136    	; 0x157a <malloc+0x122>
    14f2:	fd 01       	movw	r30, r26
    14f4:	e2 0f       	add	r30, r18
    14f6:	f3 1f       	adc	r31, r19
    14f8:	81 93       	st	Z+, r24
    14fa:	91 93       	st	Z+, r25
    14fc:	22 50       	subi	r18, 0x02	; 2
    14fe:	31 09       	sbc	r19, r1
    1500:	2d 93       	st	X+, r18
    1502:	3c 93       	st	X, r19
    1504:	3a c0       	rjmp	.+116    	; 0x157a <malloc+0x122>
    1506:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <__brkval>
    150a:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <__brkval+0x1>
    150e:	23 2b       	or	r18, r19
    1510:	41 f4       	brne	.+16     	; 0x1522 <malloc+0xca>
    1512:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1516:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    151a:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <__brkval+0x1>
    151e:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <__brkval>
    1522:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1526:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    152a:	21 15       	cp	r18, r1
    152c:	31 05       	cpc	r19, r1
    152e:	41 f4       	brne	.+16     	; 0x1540 <malloc+0xe8>
    1530:	2d b7       	in	r18, 0x3d	; 61
    1532:	3e b7       	in	r19, 0x3e	; 62
    1534:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1538:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    153c:	24 1b       	sub	r18, r20
    153e:	35 0b       	sbc	r19, r21
    1540:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <__brkval>
    1544:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <__brkval+0x1>
    1548:	e2 17       	cp	r30, r18
    154a:	f3 07       	cpc	r31, r19
    154c:	a0 f4       	brcc	.+40     	; 0x1576 <malloc+0x11e>
    154e:	2e 1b       	sub	r18, r30
    1550:	3f 0b       	sbc	r19, r31
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	78 f0       	brcs	.+30     	; 0x1576 <malloc+0x11e>
    1558:	ac 01       	movw	r20, r24
    155a:	4e 5f       	subi	r20, 0xFE	; 254
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	24 17       	cp	r18, r20
    1560:	35 07       	cpc	r19, r21
    1562:	48 f0       	brcs	.+18     	; 0x1576 <malloc+0x11e>
    1564:	4e 0f       	add	r20, r30
    1566:	5f 1f       	adc	r21, r31
    1568:	50 93 2d 03 	sts	0x032D, r21	; 0x80032d <__brkval+0x1>
    156c:	40 93 2c 03 	sts	0x032C, r20	; 0x80032c <__brkval>
    1570:	81 93       	st	Z+, r24
    1572:	91 93       	st	Z+, r25
    1574:	02 c0       	rjmp	.+4      	; 0x157a <malloc+0x122>
    1576:	e0 e0       	ldi	r30, 0x00	; 0
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	cf 01       	movw	r24, r30
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <free>:
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f4       	brne	.+2      	; 0x1590 <free+0xe>
    158e:	8c c0       	rjmp	.+280    	; 0x16a8 <free+0x126>
    1590:	fc 01       	movw	r30, r24
    1592:	32 97       	sbiw	r30, 0x02	; 2
    1594:	13 82       	std	Z+3, r1	; 0x03
    1596:	12 82       	std	Z+2, r1	; 0x02
    1598:	00 91 2e 03 	lds	r16, 0x032E	; 0x80032e <__flp>
    159c:	10 91 2f 03 	lds	r17, 0x032F	; 0x80032f <__flp+0x1>
    15a0:	01 15       	cp	r16, r1
    15a2:	11 05       	cpc	r17, r1
    15a4:	81 f4       	brne	.+32     	; 0x15c6 <free+0x44>
    15a6:	20 81       	ld	r18, Z
    15a8:	31 81       	ldd	r19, Z+1	; 0x01
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <__brkval>
    15b2:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <__brkval+0x1>
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	79 f5       	brne	.+94     	; 0x161a <free+0x98>
    15bc:	f0 93 2d 03 	sts	0x032D, r31	; 0x80032d <__brkval+0x1>
    15c0:	e0 93 2c 03 	sts	0x032C, r30	; 0x80032c <__brkval>
    15c4:	71 c0       	rjmp	.+226    	; 0x16a8 <free+0x126>
    15c6:	d8 01       	movw	r26, r16
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	ae 17       	cp	r26, r30
    15ce:	bf 07       	cpc	r27, r31
    15d0:	50 f4       	brcc	.+20     	; 0x15e6 <free+0x64>
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	2d 91       	ld	r18, X+
    15d6:	3c 91       	ld	r19, X
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	ad 01       	movw	r20, r26
    15dc:	21 15       	cp	r18, r1
    15de:	31 05       	cpc	r19, r1
    15e0:	09 f1       	breq	.+66     	; 0x1624 <free+0xa2>
    15e2:	d9 01       	movw	r26, r18
    15e4:	f3 cf       	rjmp	.-26     	; 0x15cc <free+0x4a>
    15e6:	9d 01       	movw	r18, r26
    15e8:	da 01       	movw	r26, r20
    15ea:	33 83       	std	Z+3, r19	; 0x03
    15ec:	22 83       	std	Z+2, r18	; 0x02
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	86 0f       	add	r24, r22
    15f4:	97 1f       	adc	r25, r23
    15f6:	82 17       	cp	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	69 f4       	brne	.+26     	; 0x1616 <free+0x94>
    15fc:	ec 01       	movw	r28, r24
    15fe:	28 81       	ld	r18, Y
    1600:	39 81       	ldd	r19, Y+1	; 0x01
    1602:	26 0f       	add	r18, r22
    1604:	37 1f       	adc	r19, r23
    1606:	2e 5f       	subi	r18, 0xFE	; 254
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	31 83       	std	Z+1, r19	; 0x01
    160c:	20 83       	st	Z, r18
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	93 83       	std	Z+3, r25	; 0x03
    1614:	82 83       	std	Z+2, r24	; 0x02
    1616:	45 2b       	or	r20, r21
    1618:	29 f4       	brne	.+10     	; 0x1624 <free+0xa2>
    161a:	f0 93 2f 03 	sts	0x032F, r31	; 0x80032f <__flp+0x1>
    161e:	e0 93 2e 03 	sts	0x032E, r30	; 0x80032e <__flp>
    1622:	42 c0       	rjmp	.+132    	; 0x16a8 <free+0x126>
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	fc 93       	st	X, r31
    1628:	ee 93       	st	-X, r30
    162a:	12 97       	sbiw	r26, 0x02	; 2
    162c:	ed 01       	movw	r28, r26
    162e:	49 91       	ld	r20, Y+
    1630:	59 91       	ld	r21, Y+
    1632:	9e 01       	movw	r18, r28
    1634:	24 0f       	add	r18, r20
    1636:	35 1f       	adc	r19, r21
    1638:	e2 17       	cp	r30, r18
    163a:	f3 07       	cpc	r31, r19
    163c:	71 f4       	brne	.+28     	; 0x165a <free+0xd8>
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	84 0f       	add	r24, r20
    1644:	95 1f       	adc	r25, r21
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	9c 93       	st	X, r25
    164c:	8e 93       	st	-X, r24
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	13 96       	adiw	r26, 0x03	; 3
    1654:	9c 93       	st	X, r25
    1656:	8e 93       	st	-X, r24
    1658:	12 97       	sbiw	r26, 0x02	; 2
    165a:	e0 e0       	ldi	r30, 0x00	; 0
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	d8 01       	movw	r26, r16
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	8d 91       	ld	r24, X+
    1664:	9c 91       	ld	r25, X
    1666:	13 97       	sbiw	r26, 0x03	; 3
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	19 f0       	breq	.+6      	; 0x1672 <free+0xf0>
    166c:	f8 01       	movw	r30, r16
    166e:	8c 01       	movw	r16, r24
    1670:	f6 cf       	rjmp	.-20     	; 0x165e <free+0xdc>
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	98 01       	movw	r18, r16
    1678:	2e 5f       	subi	r18, 0xFE	; 254
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <__brkval>
    1684:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <__brkval+0x1>
    1688:	28 17       	cp	r18, r24
    168a:	39 07       	cpc	r19, r25
    168c:	69 f4       	brne	.+26     	; 0x16a8 <free+0x126>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	29 f4       	brne	.+10     	; 0x169c <free+0x11a>
    1692:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <__flp+0x1>
    1696:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <__flp>
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <free+0x11e>
    169c:	13 82       	std	Z+3, r1	; 0x03
    169e:	12 82       	std	Z+2, r1	; 0x02
    16a0:	10 93 2d 03 	sts	0x032D, r17	; 0x80032d <__brkval+0x1>
    16a4:	00 93 2c 03 	sts	0x032C, r16	; 0x80032c <__brkval>
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <sprintf>:
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	2e 97       	sbiw	r28, 0x0e	; 14
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	0e 89       	ldd	r16, Y+22	; 0x16
    16cc:	1f 89       	ldd	r17, Y+23	; 0x17
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	8c 83       	std	Y+4, r24	; 0x04
    16d2:	1a 83       	std	Y+2, r17	; 0x02
    16d4:	09 83       	std	Y+1, r16	; 0x01
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f e7       	ldi	r25, 0x7F	; 127
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	ae 01       	movw	r20, r28
    16e0:	46 5e       	subi	r20, 0xE6	; 230
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	68 8d       	ldd	r22, Y+24	; 0x18
    16e6:	79 8d       	ldd	r23, Y+25	; 0x19
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	11 d0       	rcall	.+34     	; 0x1710 <vfprintf>
    16ee:	2f 81       	ldd	r18, Y+7	; 0x07
    16f0:	38 85       	ldd	r19, Y+8	; 0x08
    16f2:	f8 01       	movw	r30, r16
    16f4:	e2 0f       	add	r30, r18
    16f6:	f3 1f       	adc	r31, r19
    16f8:	10 82       	st	Z, r1
    16fa:	2e 96       	adiw	r28, 0x0e	; 14
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <vfprintf>:
    1710:	2f 92       	push	r2
    1712:	3f 92       	push	r3
    1714:	4f 92       	push	r4
    1716:	5f 92       	push	r5
    1718:	6f 92       	push	r6
    171a:	7f 92       	push	r7
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2c 97       	sbiw	r28, 0x0c	; 12
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	7c 01       	movw	r14, r24
    1746:	6b 01       	movw	r12, r22
    1748:	8a 01       	movw	r16, r20
    174a:	fc 01       	movw	r30, r24
    174c:	17 82       	std	Z+7, r1	; 0x07
    174e:	16 82       	std	Z+6, r1	; 0x06
    1750:	83 81       	ldd	r24, Z+3	; 0x03
    1752:	81 ff       	sbrs	r24, 1
    1754:	b0 c1       	rjmp	.+864    	; 0x1ab6 <vfprintf+0x3a6>
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	4c 01       	movw	r8, r24
    175c:	f7 01       	movw	r30, r14
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	f6 01       	movw	r30, r12
    1762:	93 fd       	sbrc	r25, 3
    1764:	85 91       	lpm	r24, Z+
    1766:	93 ff       	sbrs	r25, 3
    1768:	81 91       	ld	r24, Z+
    176a:	6f 01       	movw	r12, r30
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <vfprintf+0x62>
    1770:	9e c1       	rjmp	.+828    	; 0x1aae <vfprintf+0x39e>
    1772:	85 32       	cpi	r24, 0x25	; 37
    1774:	39 f4       	brne	.+14     	; 0x1784 <vfprintf+0x74>
    1776:	93 fd       	sbrc	r25, 3
    1778:	85 91       	lpm	r24, Z+
    177a:	93 ff       	sbrs	r25, 3
    177c:	81 91       	ld	r24, Z+
    177e:	6f 01       	movw	r12, r30
    1780:	85 32       	cpi	r24, 0x25	; 37
    1782:	21 f4       	brne	.+8      	; 0x178c <vfprintf+0x7c>
    1784:	b7 01       	movw	r22, r14
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	c7 d1       	rcall	.+910    	; 0x1b18 <fputc>
    178a:	e8 cf       	rjmp	.-48     	; 0x175c <vfprintf+0x4c>
    178c:	51 2c       	mov	r5, r1
    178e:	31 2c       	mov	r3, r1
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	20 32       	cpi	r18, 0x20	; 32
    1794:	a0 f4       	brcc	.+40     	; 0x17be <vfprintf+0xae>
    1796:	8b 32       	cpi	r24, 0x2B	; 43
    1798:	69 f0       	breq	.+26     	; 0x17b4 <vfprintf+0xa4>
    179a:	30 f4       	brcc	.+12     	; 0x17a8 <vfprintf+0x98>
    179c:	80 32       	cpi	r24, 0x20	; 32
    179e:	59 f0       	breq	.+22     	; 0x17b6 <vfprintf+0xa6>
    17a0:	83 32       	cpi	r24, 0x23	; 35
    17a2:	69 f4       	brne	.+26     	; 0x17be <vfprintf+0xae>
    17a4:	20 61       	ori	r18, 0x10	; 16
    17a6:	2c c0       	rjmp	.+88     	; 0x1800 <vfprintf+0xf0>
    17a8:	8d 32       	cpi	r24, 0x2D	; 45
    17aa:	39 f0       	breq	.+14     	; 0x17ba <vfprintf+0xaa>
    17ac:	80 33       	cpi	r24, 0x30	; 48
    17ae:	39 f4       	brne	.+14     	; 0x17be <vfprintf+0xae>
    17b0:	21 60       	ori	r18, 0x01	; 1
    17b2:	26 c0       	rjmp	.+76     	; 0x1800 <vfprintf+0xf0>
    17b4:	22 60       	ori	r18, 0x02	; 2
    17b6:	24 60       	ori	r18, 0x04	; 4
    17b8:	23 c0       	rjmp	.+70     	; 0x1800 <vfprintf+0xf0>
    17ba:	28 60       	ori	r18, 0x08	; 8
    17bc:	21 c0       	rjmp	.+66     	; 0x1800 <vfprintf+0xf0>
    17be:	27 fd       	sbrc	r18, 7
    17c0:	27 c0       	rjmp	.+78     	; 0x1810 <vfprintf+0x100>
    17c2:	30 ed       	ldi	r19, 0xD0	; 208
    17c4:	38 0f       	add	r19, r24
    17c6:	3a 30       	cpi	r19, 0x0A	; 10
    17c8:	78 f4       	brcc	.+30     	; 0x17e8 <vfprintf+0xd8>
    17ca:	26 ff       	sbrs	r18, 6
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0xca>
    17ce:	fa e0       	ldi	r31, 0x0A	; 10
    17d0:	5f 9e       	mul	r5, r31
    17d2:	30 0d       	add	r19, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	53 2e       	mov	r5, r19
    17d8:	13 c0       	rjmp	.+38     	; 0x1800 <vfprintf+0xf0>
    17da:	8a e0       	ldi	r24, 0x0A	; 10
    17dc:	38 9e       	mul	r3, r24
    17de:	30 0d       	add	r19, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	33 2e       	mov	r3, r19
    17e4:	20 62       	ori	r18, 0x20	; 32
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <vfprintf+0xf0>
    17e8:	8e 32       	cpi	r24, 0x2E	; 46
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <vfprintf+0xe4>
    17ec:	26 fd       	sbrc	r18, 6
    17ee:	5f c1       	rjmp	.+702    	; 0x1aae <vfprintf+0x39e>
    17f0:	20 64       	ori	r18, 0x40	; 64
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0xf0>
    17f4:	8c 36       	cpi	r24, 0x6C	; 108
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vfprintf+0xec>
    17f8:	20 68       	ori	r18, 0x80	; 128
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <vfprintf+0xf0>
    17fc:	88 36       	cpi	r24, 0x68	; 104
    17fe:	41 f4       	brne	.+16     	; 0x1810 <vfprintf+0x100>
    1800:	f6 01       	movw	r30, r12
    1802:	93 fd       	sbrc	r25, 3
    1804:	85 91       	lpm	r24, Z+
    1806:	93 ff       	sbrs	r25, 3
    1808:	81 91       	ld	r24, Z+
    180a:	6f 01       	movw	r12, r30
    180c:	81 11       	cpse	r24, r1
    180e:	c1 cf       	rjmp	.-126    	; 0x1792 <vfprintf+0x82>
    1810:	98 2f       	mov	r25, r24
    1812:	9f 7d       	andi	r25, 0xDF	; 223
    1814:	95 54       	subi	r25, 0x45	; 69
    1816:	93 30       	cpi	r25, 0x03	; 3
    1818:	28 f4       	brcc	.+10     	; 0x1824 <vfprintf+0x114>
    181a:	0c 5f       	subi	r16, 0xFC	; 252
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	ff e3       	ldi	r31, 0x3F	; 63
    1820:	f9 83       	std	Y+1, r31	; 0x01
    1822:	0d c0       	rjmp	.+26     	; 0x183e <vfprintf+0x12e>
    1824:	83 36       	cpi	r24, 0x63	; 99
    1826:	31 f0       	breq	.+12     	; 0x1834 <vfprintf+0x124>
    1828:	83 37       	cpi	r24, 0x73	; 115
    182a:	71 f0       	breq	.+28     	; 0x1848 <vfprintf+0x138>
    182c:	83 35       	cpi	r24, 0x53	; 83
    182e:	09 f0       	breq	.+2      	; 0x1832 <vfprintf+0x122>
    1830:	57 c0       	rjmp	.+174    	; 0x18e0 <vfprintf+0x1d0>
    1832:	21 c0       	rjmp	.+66     	; 0x1876 <vfprintf+0x166>
    1834:	f8 01       	movw	r30, r16
    1836:	80 81       	ld	r24, Z
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	0e 5f       	subi	r16, 0xFE	; 254
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	44 24       	eor	r4, r4
    1840:	43 94       	inc	r4
    1842:	51 2c       	mov	r5, r1
    1844:	54 01       	movw	r10, r8
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <vfprintf+0x160>
    1848:	38 01       	movw	r6, r16
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	6f 0e       	add	r6, r31
    184e:	71 1c       	adc	r7, r1
    1850:	f8 01       	movw	r30, r16
    1852:	a0 80       	ld	r10, Z
    1854:	b1 80       	ldd	r11, Z+1	; 0x01
    1856:	26 ff       	sbrs	r18, 6
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <vfprintf+0x150>
    185a:	65 2d       	mov	r22, r5
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <vfprintf+0x154>
    1860:	6f ef       	ldi	r22, 0xFF	; 255
    1862:	7f ef       	ldi	r23, 0xFF	; 255
    1864:	c5 01       	movw	r24, r10
    1866:	2c 87       	std	Y+12, r18	; 0x0c
    1868:	4c d1       	rcall	.+664    	; 0x1b02 <strnlen>
    186a:	2c 01       	movw	r4, r24
    186c:	83 01       	movw	r16, r6
    186e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1870:	2f 77       	andi	r18, 0x7F	; 127
    1872:	22 2e       	mov	r2, r18
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <vfprintf+0x192>
    1876:	38 01       	movw	r6, r16
    1878:	f2 e0       	ldi	r31, 0x02	; 2
    187a:	6f 0e       	add	r6, r31
    187c:	71 1c       	adc	r7, r1
    187e:	f8 01       	movw	r30, r16
    1880:	a0 80       	ld	r10, Z
    1882:	b1 80       	ldd	r11, Z+1	; 0x01
    1884:	26 ff       	sbrs	r18, 6
    1886:	03 c0       	rjmp	.+6      	; 0x188e <vfprintf+0x17e>
    1888:	65 2d       	mov	r22, r5
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <vfprintf+0x182>
    188e:	6f ef       	ldi	r22, 0xFF	; 255
    1890:	7f ef       	ldi	r23, 0xFF	; 255
    1892:	c5 01       	movw	r24, r10
    1894:	2c 87       	std	Y+12, r18	; 0x0c
    1896:	2a d1       	rcall	.+596    	; 0x1aec <strnlen_P>
    1898:	2c 01       	movw	r4, r24
    189a:	2c 85       	ldd	r18, Y+12	; 0x0c
    189c:	20 68       	ori	r18, 0x80	; 128
    189e:	22 2e       	mov	r2, r18
    18a0:	83 01       	movw	r16, r6
    18a2:	23 fc       	sbrc	r2, 3
    18a4:	19 c0       	rjmp	.+50     	; 0x18d8 <vfprintf+0x1c8>
    18a6:	83 2d       	mov	r24, r3
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	48 16       	cp	r4, r24
    18ac:	59 06       	cpc	r5, r25
    18ae:	a0 f4       	brcc	.+40     	; 0x18d8 <vfprintf+0x1c8>
    18b0:	b7 01       	movw	r22, r14
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	30 d1       	rcall	.+608    	; 0x1b18 <fputc>
    18b8:	3a 94       	dec	r3
    18ba:	f5 cf       	rjmp	.-22     	; 0x18a6 <vfprintf+0x196>
    18bc:	f5 01       	movw	r30, r10
    18be:	27 fc       	sbrc	r2, 7
    18c0:	85 91       	lpm	r24, Z+
    18c2:	27 fe       	sbrs	r2, 7
    18c4:	81 91       	ld	r24, Z+
    18c6:	5f 01       	movw	r10, r30
    18c8:	b7 01       	movw	r22, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	25 d1       	rcall	.+586    	; 0x1b18 <fputc>
    18ce:	31 10       	cpse	r3, r1
    18d0:	3a 94       	dec	r3
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	4f 1a       	sub	r4, r31
    18d6:	51 08       	sbc	r5, r1
    18d8:	41 14       	cp	r4, r1
    18da:	51 04       	cpc	r5, r1
    18dc:	79 f7       	brne	.-34     	; 0x18bc <vfprintf+0x1ac>
    18de:	de c0       	rjmp	.+444    	; 0x1a9c <vfprintf+0x38c>
    18e0:	84 36       	cpi	r24, 0x64	; 100
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <vfprintf+0x1d8>
    18e4:	89 36       	cpi	r24, 0x69	; 105
    18e6:	31 f5       	brne	.+76     	; 0x1934 <vfprintf+0x224>
    18e8:	f8 01       	movw	r30, r16
    18ea:	27 ff       	sbrs	r18, 7
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <vfprintf+0x1ec>
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	0c 5f       	subi	r16, 0xFC	; 252
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <vfprintf+0x1fc>
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	07 2e       	mov	r0, r23
    1902:	00 0c       	add	r0, r0
    1904:	88 0b       	sbc	r24, r24
    1906:	99 0b       	sbc	r25, r25
    1908:	0e 5f       	subi	r16, 0xFE	; 254
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	2f 76       	andi	r18, 0x6F	; 111
    190e:	72 2e       	mov	r7, r18
    1910:	97 ff       	sbrs	r25, 7
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x216>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	20 68       	ori	r18, 0x80	; 128
    1924:	72 2e       	mov	r7, r18
    1926:	2a e0       	ldi	r18, 0x0A	; 10
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	a4 01       	movw	r20, r8
    192c:	2d d1       	rcall	.+602    	; 0x1b88 <__ultoa_invert>
    192e:	a8 2e       	mov	r10, r24
    1930:	a8 18       	sub	r10, r8
    1932:	43 c0       	rjmp	.+134    	; 0x19ba <vfprintf+0x2aa>
    1934:	85 37       	cpi	r24, 0x75	; 117
    1936:	29 f4       	brne	.+10     	; 0x1942 <vfprintf+0x232>
    1938:	2f 7e       	andi	r18, 0xEF	; 239
    193a:	b2 2e       	mov	r11, r18
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	25 c0       	rjmp	.+74     	; 0x198c <vfprintf+0x27c>
    1942:	f2 2f       	mov	r31, r18
    1944:	f9 7f       	andi	r31, 0xF9	; 249
    1946:	bf 2e       	mov	r11, r31
    1948:	8f 36       	cpi	r24, 0x6F	; 111
    194a:	c1 f0       	breq	.+48     	; 0x197c <vfprintf+0x26c>
    194c:	18 f4       	brcc	.+6      	; 0x1954 <vfprintf+0x244>
    194e:	88 35       	cpi	r24, 0x58	; 88
    1950:	79 f0       	breq	.+30     	; 0x1970 <vfprintf+0x260>
    1952:	ad c0       	rjmp	.+346    	; 0x1aae <vfprintf+0x39e>
    1954:	80 37       	cpi	r24, 0x70	; 112
    1956:	19 f0       	breq	.+6      	; 0x195e <vfprintf+0x24e>
    1958:	88 37       	cpi	r24, 0x78	; 120
    195a:	21 f0       	breq	.+8      	; 0x1964 <vfprintf+0x254>
    195c:	a8 c0       	rjmp	.+336    	; 0x1aae <vfprintf+0x39e>
    195e:	2f 2f       	mov	r18, r31
    1960:	20 61       	ori	r18, 0x10	; 16
    1962:	b2 2e       	mov	r11, r18
    1964:	b4 fe       	sbrs	r11, 4
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x272>
    1968:	8b 2d       	mov	r24, r11
    196a:	84 60       	ori	r24, 0x04	; 4
    196c:	b8 2e       	mov	r11, r24
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <vfprintf+0x272>
    1970:	24 ff       	sbrs	r18, 4
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <vfprintf+0x278>
    1974:	9f 2f       	mov	r25, r31
    1976:	96 60       	ori	r25, 0x06	; 6
    1978:	b9 2e       	mov	r11, r25
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x278>
    197c:	28 e0       	ldi	r18, 0x08	; 8
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <vfprintf+0x27c>
    1982:	20 e1       	ldi	r18, 0x10	; 16
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x27c>
    1988:	20 e1       	ldi	r18, 0x10	; 16
    198a:	32 e0       	ldi	r19, 0x02	; 2
    198c:	f8 01       	movw	r30, r16
    198e:	b7 fe       	sbrs	r11, 7
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <vfprintf+0x290>
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	0c 5f       	subi	r16, 0xFC	; 252
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x29c>
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 5f       	subi	r16, 0xFE	; 254
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	a4 01       	movw	r20, r8
    19ae:	ec d0       	rcall	.+472    	; 0x1b88 <__ultoa_invert>
    19b0:	a8 2e       	mov	r10, r24
    19b2:	a8 18       	sub	r10, r8
    19b4:	fb 2d       	mov	r31, r11
    19b6:	ff 77       	andi	r31, 0x7F	; 127
    19b8:	7f 2e       	mov	r7, r31
    19ba:	76 fe       	sbrs	r7, 6
    19bc:	0b c0       	rjmp	.+22     	; 0x19d4 <vfprintf+0x2c4>
    19be:	37 2d       	mov	r19, r7
    19c0:	3e 7f       	andi	r19, 0xFE	; 254
    19c2:	a5 14       	cp	r10, r5
    19c4:	50 f4       	brcc	.+20     	; 0x19da <vfprintf+0x2ca>
    19c6:	74 fe       	sbrs	r7, 4
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <vfprintf+0x2ce>
    19ca:	72 fc       	sbrc	r7, 2
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <vfprintf+0x2ce>
    19ce:	37 2d       	mov	r19, r7
    19d0:	3e 7e       	andi	r19, 0xEE	; 238
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <vfprintf+0x2ce>
    19d4:	ba 2c       	mov	r11, r10
    19d6:	37 2d       	mov	r19, r7
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <vfprintf+0x2d0>
    19da:	ba 2c       	mov	r11, r10
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <vfprintf+0x2d0>
    19de:	b5 2c       	mov	r11, r5
    19e0:	34 ff       	sbrs	r19, 4
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <vfprintf+0x2ee>
    19e4:	fe 01       	movw	r30, r28
    19e6:	ea 0d       	add	r30, r10
    19e8:	f1 1d       	adc	r31, r1
    19ea:	80 81       	ld	r24, Z
    19ec:	80 33       	cpi	r24, 0x30	; 48
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <vfprintf+0x2e4>
    19f0:	39 7e       	andi	r19, 0xE9	; 233
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <vfprintf+0x2f6>
    19f4:	32 ff       	sbrs	r19, 2
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <vfprintf+0x2f4>
    19f8:	b3 94       	inc	r11
    19fa:	b3 94       	inc	r11
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <vfprintf+0x2f6>
    19fe:	83 2f       	mov	r24, r19
    1a00:	86 78       	andi	r24, 0x86	; 134
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <vfprintf+0x2f6>
    1a04:	b3 94       	inc	r11
    1a06:	33 fd       	sbrc	r19, 3
    1a08:	12 c0       	rjmp	.+36     	; 0x1a2e <vfprintf+0x31e>
    1a0a:	30 ff       	sbrs	r19, 0
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0x30a>
    1a0e:	5a 2c       	mov	r5, r10
    1a10:	b3 14       	cp	r11, r3
    1a12:	18 f4       	brcc	.+6      	; 0x1a1a <vfprintf+0x30a>
    1a14:	53 0c       	add	r5, r3
    1a16:	5b 18       	sub	r5, r11
    1a18:	b3 2c       	mov	r11, r3
    1a1a:	b3 14       	cp	r11, r3
    1a1c:	60 f4       	brcc	.+24     	; 0x1a36 <vfprintf+0x326>
    1a1e:	b7 01       	movw	r22, r14
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	3c 87       	std	Y+12, r19	; 0x0c
    1a26:	78 d0       	rcall	.+240    	; 0x1b18 <fputc>
    1a28:	b3 94       	inc	r11
    1a2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a2c:	f6 cf       	rjmp	.-20     	; 0x1a1a <vfprintf+0x30a>
    1a2e:	b3 14       	cp	r11, r3
    1a30:	10 f4       	brcc	.+4      	; 0x1a36 <vfprintf+0x326>
    1a32:	3b 18       	sub	r3, r11
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <vfprintf+0x328>
    1a36:	31 2c       	mov	r3, r1
    1a38:	34 ff       	sbrs	r19, 4
    1a3a:	11 c0       	rjmp	.+34     	; 0x1a5e <vfprintf+0x34e>
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	80 e3       	ldi	r24, 0x30	; 48
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	3c 87       	std	Y+12, r19	; 0x0c
    1a44:	69 d0       	rcall	.+210    	; 0x1b18 <fputc>
    1a46:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a48:	32 ff       	sbrs	r19, 2
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <vfprintf+0x368>
    1a4c:	31 fd       	sbrc	r19, 1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <vfprintf+0x346>
    1a50:	88 e7       	ldi	r24, 0x78	; 120
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <vfprintf+0x34a>
    1a56:	88 e5       	ldi	r24, 0x58	; 88
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	b7 01       	movw	r22, r14
    1a5c:	0c c0       	rjmp	.+24     	; 0x1a76 <vfprintf+0x366>
    1a5e:	83 2f       	mov	r24, r19
    1a60:	86 78       	andi	r24, 0x86	; 134
    1a62:	51 f0       	breq	.+20     	; 0x1a78 <vfprintf+0x368>
    1a64:	31 ff       	sbrs	r19, 1
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0x35c>
    1a68:	8b e2       	ldi	r24, 0x2B	; 43
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <vfprintf+0x35e>
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	37 fd       	sbrc	r19, 7
    1a70:	8d e2       	ldi	r24, 0x2D	; 45
    1a72:	b7 01       	movw	r22, r14
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	50 d0       	rcall	.+160    	; 0x1b18 <fputc>
    1a78:	a5 14       	cp	r10, r5
    1a7a:	30 f4       	brcc	.+12     	; 0x1a88 <vfprintf+0x378>
    1a7c:	b7 01       	movw	r22, r14
    1a7e:	80 e3       	ldi	r24, 0x30	; 48
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	4a d0       	rcall	.+148    	; 0x1b18 <fputc>
    1a84:	5a 94       	dec	r5
    1a86:	f8 cf       	rjmp	.-16     	; 0x1a78 <vfprintf+0x368>
    1a88:	aa 94       	dec	r10
    1a8a:	f4 01       	movw	r30, r8
    1a8c:	ea 0d       	add	r30, r10
    1a8e:	f1 1d       	adc	r31, r1
    1a90:	80 81       	ld	r24, Z
    1a92:	b7 01       	movw	r22, r14
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	40 d0       	rcall	.+128    	; 0x1b18 <fputc>
    1a98:	a1 10       	cpse	r10, r1
    1a9a:	f6 cf       	rjmp	.-20     	; 0x1a88 <vfprintf+0x378>
    1a9c:	33 20       	and	r3, r3
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <vfprintf+0x392>
    1aa0:	5d ce       	rjmp	.-838    	; 0x175c <vfprintf+0x4c>
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	80 e2       	ldi	r24, 0x20	; 32
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	37 d0       	rcall	.+110    	; 0x1b18 <fputc>
    1aaa:	3a 94       	dec	r3
    1aac:	f7 cf       	rjmp	.-18     	; 0x1a9c <vfprintf+0x38c>
    1aae:	f7 01       	movw	r30, r14
    1ab0:	86 81       	ldd	r24, Z+6	; 0x06
    1ab2:	97 81       	ldd	r25, Z+7	; 0x07
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <vfprintf+0x3aa>
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	2c 96       	adiw	r28, 0x0c	; 12
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
    1ae2:	5f 90       	pop	r5
    1ae4:	4f 90       	pop	r4
    1ae6:	3f 90       	pop	r3
    1ae8:	2f 90       	pop	r2
    1aea:	08 95       	ret

00001aec <strnlen_P>:
    1aec:	fc 01       	movw	r30, r24
    1aee:	05 90       	lpm	r0, Z+
    1af0:	61 50       	subi	r22, 0x01	; 1
    1af2:	70 40       	sbci	r23, 0x00	; 0
    1af4:	01 10       	cpse	r0, r1
    1af6:	d8 f7       	brcc	.-10     	; 0x1aee <strnlen_P+0x2>
    1af8:	80 95       	com	r24
    1afa:	90 95       	com	r25
    1afc:	8e 0f       	add	r24, r30
    1afe:	9f 1f       	adc	r25, r31
    1b00:	08 95       	ret

00001b02 <strnlen>:
    1b02:	fc 01       	movw	r30, r24
    1b04:	61 50       	subi	r22, 0x01	; 1
    1b06:	70 40       	sbci	r23, 0x00	; 0
    1b08:	01 90       	ld	r0, Z+
    1b0a:	01 10       	cpse	r0, r1
    1b0c:	d8 f7       	brcc	.-10     	; 0x1b04 <strnlen+0x2>
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	08 95       	ret

00001b18 <fputc>:
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	fb 01       	movw	r30, r22
    1b22:	23 81       	ldd	r18, Z+3	; 0x03
    1b24:	21 fd       	sbrc	r18, 1
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <fputc+0x16>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	9f ef       	ldi	r25, 0xFF	; 255
    1b2c:	28 c0       	rjmp	.+80     	; 0x1b7e <fputc+0x66>
    1b2e:	22 ff       	sbrs	r18, 2
    1b30:	16 c0       	rjmp	.+44     	; 0x1b5e <fputc+0x46>
    1b32:	46 81       	ldd	r20, Z+6	; 0x06
    1b34:	57 81       	ldd	r21, Z+7	; 0x07
    1b36:	24 81       	ldd	r18, Z+4	; 0x04
    1b38:	35 81       	ldd	r19, Z+5	; 0x05
    1b3a:	42 17       	cp	r20, r18
    1b3c:	53 07       	cpc	r21, r19
    1b3e:	44 f4       	brge	.+16     	; 0x1b50 <fputc+0x38>
    1b40:	a0 81       	ld	r26, Z
    1b42:	b1 81       	ldd	r27, Z+1	; 0x01
    1b44:	9d 01       	movw	r18, r26
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	31 83       	std	Z+1, r19	; 0x01
    1b4c:	20 83       	st	Z, r18
    1b4e:	8c 93       	st	X, r24
    1b50:	26 81       	ldd	r18, Z+6	; 0x06
    1b52:	37 81       	ldd	r19, Z+7	; 0x07
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	37 83       	std	Z+7, r19	; 0x07
    1b5a:	26 83       	std	Z+6, r18	; 0x06
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <fputc+0x66>
    1b5e:	eb 01       	movw	r28, r22
    1b60:	09 2f       	mov	r16, r25
    1b62:	18 2f       	mov	r17, r24
    1b64:	00 84       	ldd	r0, Z+8	; 0x08
    1b66:	f1 85       	ldd	r31, Z+9	; 0x09
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	19 95       	eicall
    1b6c:	89 2b       	or	r24, r25
    1b6e:	e1 f6       	brne	.-72     	; 0x1b28 <fputc+0x10>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	9f 81       	ldd	r25, Y+7	; 0x07
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	9f 83       	std	Y+7, r25	; 0x07
    1b78:	8e 83       	std	Y+6, r24	; 0x06
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	90 2f       	mov	r25, r16
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <__ultoa_invert>:
    1b88:	fa 01       	movw	r30, r20
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	28 30       	cpi	r18, 0x08	; 8
    1b8e:	51 f1       	breq	.+84     	; 0x1be4 <__ultoa_invert+0x5c>
    1b90:	20 31       	cpi	r18, 0x10	; 16
    1b92:	81 f1       	breq	.+96     	; 0x1bf4 <__ultoa_invert+0x6c>
    1b94:	e8 94       	clt
    1b96:	6f 93       	push	r22
    1b98:	6e 7f       	andi	r22, 0xFE	; 254
    1b9a:	6e 5f       	subi	r22, 0xFE	; 254
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	af 4f       	sbci	r26, 0xFF	; 255
    1ba4:	b1 e0       	ldi	r27, 0x01	; 1
    1ba6:	3e d0       	rcall	.+124    	; 0x1c24 <__ultoa_invert+0x9c>
    1ba8:	b4 e0       	ldi	r27, 0x04	; 4
    1baa:	3c d0       	rcall	.+120    	; 0x1c24 <__ultoa_invert+0x9c>
    1bac:	67 0f       	add	r22, r23
    1bae:	78 1f       	adc	r23, r24
    1bb0:	89 1f       	adc	r24, r25
    1bb2:	9a 1f       	adc	r25, r26
    1bb4:	a1 1d       	adc	r26, r1
    1bb6:	68 0f       	add	r22, r24
    1bb8:	79 1f       	adc	r23, r25
    1bba:	8a 1f       	adc	r24, r26
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	6a 0f       	add	r22, r26
    1bc2:	71 1d       	adc	r23, r1
    1bc4:	81 1d       	adc	r24, r1
    1bc6:	91 1d       	adc	r25, r1
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	20 d0       	rcall	.+64     	; 0x1c0c <__ultoa_invert+0x84>
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__ultoa_invert+0x48>
    1bce:	68 94       	set
    1bd0:	3f 91       	pop	r19
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	26 9f       	mul	r18, r22
    1bd6:	11 24       	eor	r1, r1
    1bd8:	30 19       	sub	r19, r0
    1bda:	30 5d       	subi	r19, 0xD0	; 208
    1bdc:	31 93       	st	Z+, r19
    1bde:	de f6       	brtc	.-74     	; 0x1b96 <__ultoa_invert+0xe>
    1be0:	cf 01       	movw	r24, r30
    1be2:	08 95       	ret
    1be4:	46 2f       	mov	r20, r22
    1be6:	47 70       	andi	r20, 0x07	; 7
    1be8:	40 5d       	subi	r20, 0xD0	; 208
    1bea:	41 93       	st	Z+, r20
    1bec:	b3 e0       	ldi	r27, 0x03	; 3
    1bee:	0f d0       	rcall	.+30     	; 0x1c0e <__ultoa_invert+0x86>
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__ultoa_invert+0x5c>
    1bf2:	f6 cf       	rjmp	.-20     	; 0x1be0 <__ultoa_invert+0x58>
    1bf4:	46 2f       	mov	r20, r22
    1bf6:	4f 70       	andi	r20, 0x0F	; 15
    1bf8:	40 5d       	subi	r20, 0xD0	; 208
    1bfa:	4a 33       	cpi	r20, 0x3A	; 58
    1bfc:	18 f0       	brcs	.+6      	; 0x1c04 <__ultoa_invert+0x7c>
    1bfe:	49 5d       	subi	r20, 0xD9	; 217
    1c00:	31 fd       	sbrc	r19, 1
    1c02:	40 52       	subi	r20, 0x20	; 32
    1c04:	41 93       	st	Z+, r20
    1c06:	02 d0       	rcall	.+4      	; 0x1c0c <__ultoa_invert+0x84>
    1c08:	a9 f7       	brne	.-22     	; 0x1bf4 <__ultoa_invert+0x6c>
    1c0a:	ea cf       	rjmp	.-44     	; 0x1be0 <__ultoa_invert+0x58>
    1c0c:	b4 e0       	ldi	r27, 0x04	; 4
    1c0e:	a6 95       	lsr	r26
    1c10:	97 95       	ror	r25
    1c12:	87 95       	ror	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	ba 95       	dec	r27
    1c1a:	c9 f7       	brne	.-14     	; 0x1c0e <__ultoa_invert+0x86>
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	61 05       	cpc	r22, r1
    1c20:	71 05       	cpc	r23, r1
    1c22:	08 95       	ret
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	0a 2e       	mov	r0, r26
    1c2a:	06 94       	lsr	r0
    1c2c:	57 95       	ror	r21
    1c2e:	47 95       	ror	r20
    1c30:	37 95       	ror	r19
    1c32:	27 95       	ror	r18
    1c34:	ba 95       	dec	r27
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <__ultoa_invert+0xa2>
    1c38:	62 0f       	add	r22, r18
    1c3a:	73 1f       	adc	r23, r19
    1c3c:	84 1f       	adc	r24, r20
    1c3e:	95 1f       	adc	r25, r21
    1c40:	a0 1d       	adc	r26, r0
    1c42:	08 95       	ret

00001c44 <_exit>:
    1c44:	f8 94       	cli

00001c46 <__stop_program>:
    1c46:	ff cf       	rjmp	.-2      	; 0x1c46 <__stop_program>
