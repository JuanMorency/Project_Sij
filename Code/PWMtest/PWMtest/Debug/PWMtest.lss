
PWMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000046f  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034c  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000272  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	cd c0       	rjmp	.+410    	; 0x1c0 <__vector_9>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	7a d0       	rcall	.+244    	; 0x1fa <main>
 106:	bb c0       	rjmp	.+374    	; 0x27e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN3escC1Ev>:
esc 3 = 0C5A
esc 4 = 0C5B
*/

//constructor
esc::esc()
 10a:	08 95       	ret

0000010c <_ZN3esc10initializeEv>:
}

void esc::initialize()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
 10c:	e0 ea       	ldi	r30, 0xA0	; 160
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 6a       	ori	r24, 0xA2	; 162
 114:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
 116:	e0 e2       	ldi	r30, 0x20	; 32
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	80 81       	ld	r24, Z
 11c:	82 6a       	ori	r24, 0xA2	; 162
 11e:	80 83       	st	Z, r24

  //wave generator mode à phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
 120:	e1 ea       	ldi	r30, 0xA1	; 161
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 61       	ori	r24, 0x11	; 17
 128:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
 12a:	e1 e2       	ldi	r30, 0x21	; 33
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	81 61       	ori	r24, 0x11	; 17
 132:	80 83       	st	Z, r24

  //Force Output Compare disabled
  TCCR4C = 0;
 134:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  TCCR5C = 0;
 138:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x700122>
  //régler TOP à 4096
  //ICR4H = 0x10;
  //ICR4L = 0x00;
  //ICR5H = 0x10;
  //ICR5L = 0x00;
    ICR4H = 0x08;
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    ICR4L = 0x00;
 142:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    ICR5H = 0x08;
 146:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    ICR5L = 0x00;
 14a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
  OCR4AH = 0x02;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
  OCR4AL = 0;
 154:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR4BH = 0x02;
 158:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
  OCR4BL = 0;
 15c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  OCR5AH = 0x02;
 160:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
  OCR5AL = 0;
 164:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
  OCR5BH = 0x02;
 168:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
  OCR5BL = 0;
 16c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 83       	st	Z, r24
  
  //Timer 4/5 set to 0
  TCNT4H = 0;
 184:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
  TCNT4L = 0;
 188:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5H = 0;
 18c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
  TCNT5L = 0;
 190:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f e7       	ldi	r18, 0x7F	; 127
 196:	8a e1       	ldi	r24, 0x1A	; 26
 198:	96 e0       	ldi	r25, 0x06	; 6
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <_ZN3esc10initializeEv+0x8e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_ZN3esc10initializeEv+0x98>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <_Z19initializeInterruptv>:
int button_rising = 0;
int button_falling = 0;

void initializeInterrupt()
{
	PCICR |= (1<<PCIE0); /* enable pin change interrupt 0 */
 1a8:	e8 e6       	ldi	r30, 0x68	; 104
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4); /* enable pin B0 to trigger PCINT0 */
 1b2:	eb e6       	ldi	r30, 0x6B	; 107
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	80 83       	st	Z, r24
		
	// Turn interrupts on.
	sei();
 1bc:	78 94       	sei
 1be:	08 95       	ret

000001c0 <__vector_9>:
}

ISR(PCINT0_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
	if (PINB & 0b00010000) button_rising = 1;
 1ce:	1c 9b       	sbis	0x03, 4	; 3
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <__vector_9+0x20>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <button_rising+0x1>
 1da:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <button_rising>
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <__vector_9+0x2c>
	else button_falling = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1e8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	//_delay_ms(500); //debounce
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:
#include <avr/interrupt.h>
#include "esc.h"
#include "interrupt.h"

int main()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	//create ESC object
	esc allESC;
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	80 df       	rcall	.-256    	; 0x10a <_ZN3escC1Ev>
	// initialize ESC
	allESC.initialize();
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	7e df       	rcall	.-260    	; 0x10c <_ZN3esc10initializeEv>
	//initialize INT
	initializeInterrupt();
 210:	cb df       	rcall	.-106    	; 0x1a8 <_Z19initializeInterruptv>
			_delay_ms(1000);
			button_falling = 0;
		}
		else
		{
			OCR4AH = 0x02;
 212:	a9 ea       	ldi	r26, 0xA9	; 169
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	22 e0       	ldi	r18, 0x02	; 2
			OCR4AL = 0x00;	
 218:	e8 ea       	ldi	r30, 0xA8	; 168
 21a:	f0 e0       	ldi	r31, 0x00	; 0
			_delay_ms(1000);
			button_rising = 0;
		}
		else if (button_falling)
		{
			OCR4AH = 0x03;
 21c:	43 e0       	ldi	r20, 0x03	; 3
	while(1)
	{
		if (button_rising)
		{
			OCR4AH = 0x02;
			OCR4AL = 0x80;
 21e:	30 e8       	ldi	r19, 0x80	; 128
	initializeInterrupt();
	
	// run forever
	while(1)
	{
		if (button_rising)
 220:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <button_rising>
 224:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <button_rising+0x1>
 228:	89 2b       	or	r24, r25
 22a:	81 f0       	breq	.+32     	; 0x24c <main+0x52>
		{
			OCR4AH = 0x02;
 22c:	2c 93       	st	X, r18
			OCR4AL = 0x80;
 22e:	30 83       	st	Z, r19
 230:	5f e3       	ldi	r21, 0x3F	; 63
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	93 e0       	ldi	r25, 0x03	; 3
 236:	51 50       	subi	r21, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x3c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x46>
 240:	00 00       	nop
			_delay_ms(1000);
			button_rising = 0;
 242:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <button_rising+0x1>
 246:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <button_rising>
 24a:	ea cf       	rjmp	.-44     	; 0x220 <main+0x26>
		}
		else if (button_falling)
 24c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 250:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 254:	89 2b       	or	r24, r25
 256:	81 f0       	breq	.+32     	; 0x278 <main+0x7e>
		{
			OCR4AH = 0x03;
 258:	4c 93       	st	X, r20
			OCR4AL = 0x00;
 25a:	10 82       	st	Z, r1
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	51 50       	subi	r21, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x68>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x72>
 26c:	00 00       	nop
			_delay_ms(1000);
			button_falling = 0;
 26e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 272:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 276:	d4 cf       	rjmp	.-88     	; 0x220 <main+0x26>
		}
		else
		{
			OCR4AH = 0x02;
 278:	2c 93       	st	X, r18
			OCR4AL = 0x00;	
 27a:	10 82       	st	Z, r1
 27c:	d1 cf       	rjmp	.-94     	; 0x220 <main+0x26>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
