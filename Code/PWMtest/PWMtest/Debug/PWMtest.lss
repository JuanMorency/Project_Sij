
PWMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800200  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800254  00800254  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba4  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056f  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8a  00000000  00000000  00001e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040c  00000000  00000000  0000316f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000357b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	fd c0       	rjmp	.+506    	; 0x220 <__vector_9>
  26:	00 00       	nop
  28:	18 c1       	rjmp	.+560    	; 0x25a <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d8 c2       	rjmp	.+1456   	; 0x63e <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 37       	cpi	r26, 0x73	; 115
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	65 d4       	rcall	.+2250   	; 0x9ea <main>
 120:	fc c4       	rjmp	.+2552   	; 0xb1a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN3escC1Ev>:
esc 3 = 0C5A
esc 4 = 0C5B
*/

//constructor
esc::esc()
 124:	08 95       	ret

00000126 <_ZN3esc10initializeEv>:
}

void esc::initialize()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
 126:	e0 ea       	ldi	r30, 0xA0	; 160
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 6a       	ori	r24, 0xA2	; 162
 12e:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
 130:	e0 e2       	ldi	r30, 0x20	; 32
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	80 81       	ld	r24, Z
 136:	82 6a       	ori	r24, 0xA2	; 162
 138:	80 83       	st	Z, r24

  //wave generator mode à phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
 13a:	e1 ea       	ldi	r30, 0xA1	; 161
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 61       	ori	r24, 0x11	; 17
 142:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
 144:	e1 e2       	ldi	r30, 0x21	; 33
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	80 81       	ld	r24, Z
 14a:	81 61       	ori	r24, 0x11	; 17
 14c:	80 83       	st	Z, r24
  
  //régler TOP à 4096
  ICR4 = 4096;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e1       	ldi	r25, 0x10	; 16
 152:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 156:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  ICR5 = 4096;
 15a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 15e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
  OCR4A = 0;
 162:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 166:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR4B = 0;
 16a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 16e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  OCR5A = 0;
 172:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 176:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
  OCR5B = 0;
 17a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 17e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
 182:	ea e0       	ldi	r30, 0x0A	; 10
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	80 81       	ld	r24, Z
 188:	88 61       	ori	r24, 0x18	; 24
 18a:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
 18c:	e1 e0       	ldi	r30, 0x01	; 1
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	80 81       	ld	r24, Z
 192:	88 61       	ori	r24, 0x18	; 24
 194:	80 83       	st	Z, r24
  
  //delay to make sure the ESC are armed before playing with the PWM
  _delay_ms(DELAY_ESC);
  
  //Timer 4/5 set to 0
  TCNT4 = 0;
 196:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 19a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5 = 0;
 19e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 1a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 1a6:	08 95       	ret

000001a8 <_Z19initializeInterruptv>:
static uint16_t count_ch_1, count_ch_2, count_ch_3, count_ch_4;
static bool timer_3_ovf, ch_1_ovf_rising, ch_2_ovf_rising, ch_3_ovf_rising, ch_4_ovf_rising;

void initializeInterrupt()
{
	PCICR |= (1<<PCIE0) | (1<<PCIE1); /* enable pin change interrupt 0 and 1 */
 1a8:	e8 e6       	ldi	r30, 0x68	; 104
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4); /* enable pin B0 to trigger PCINT0 */
 1b2:	eb e6       	ldi	r30, 0x6B	; 107
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT13) | (1<<PCINT14) | (1<<PCINT15); /* enable pin J3-J6 to trigger PCINT1 */
 1bc:	ec e6       	ldi	r30, 0x6C	; 108
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 6f       	ori	r24, 0xF0	; 240
 1c4:	80 83       	st	Z, r24
	sei();	/* Turn interrupts on */
 1c6:	78 94       	sei
 1c8:	08 95       	ret

000001ca <_Z24initializecounterPWMreadv>:
}

void initializecounterPWMread()
{
	last_ch_1 = false, last_ch_2 = false, last_ch_3 = false, last_ch_4 = false;
 1ca:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZL9last_ch_1>
 1ce:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <_ZL9last_ch_2>
 1d2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZL9last_ch_3>
 1d6:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <_ZL9last_ch_4>
	ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
 1da:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <_ZL13ch_1_counting>
 1de:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZL13ch_2_counting>
 1e2:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZL13ch_3_counting>
 1e6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <_ZL13ch_4_counting>
	ch_1_pw = 0, ch_2_pw = 0, ch_3_pw = 0, ch_4_pw = 0;
 1ea:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <ch_1_pw+0x1>
 1ee:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <ch_1_pw>
 1f2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <ch_2_pw+0x1>
 1f6:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <ch_2_pw>
 1fa:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <ch_3_pw+0x1>
 1fe:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <ch_3_pw>
 202:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <ch_4_pw+0x1>
 206:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <ch_4_pw>
	//counter for measuring pulse width of incoming radio signal
	TCCR3B |= (1 << CS30); //set-up counter in normal mode with prescaler = 1
 20a:	e1 e9       	ldi	r30, 0x91	; 145
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3); // enable interrupt on overflow
 214:	e1 e7       	ldi	r30, 0x71	; 113
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <__vector_9>:
}
//for button press
ISR(PCINT0_vect) {
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
	//read pin PB4 and if 1 this must be a rising edge change
	if (PINB & 0b00010000) button_rising = true;
 22e:	1c 9b       	sbis	0x03, 4	; 3
 230:	04 c0       	rjmp	.+8      	; 0x23a <__vector_9+0x1a>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <button_rising>
 238:	03 c0       	rjmp	.+6      	; 0x240 <__vector_9+0x20>
	else button_falling = true;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <button_falling>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	87 e8       	ldi	r24, 0x87	; 135
 242:	93 e1       	ldi	r25, 0x13	; 19
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <__vector_9+0x24>
 248:	00 c0       	rjmp	.+0      	; 0x24a <__vector_9+0x2a>
 24a:	00 00       	nop
	_delay_ms(20); //debounce
}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_10>:
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
	//channel_1
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
 272:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 276:	83 ff       	sbrs	r24, 3
 278:	6b c1       	rjmp	.+726    	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
 27a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZL9last_ch_1>
 27e:	81 11       	cpse	r24, r1
 280:	bf c1       	rjmp	.+894    	; 0x600 <__FUSE_REGION_LENGTH__+0x200>
 282:	6b c1       	rjmp	.+726    	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
	{	last_ch_1 = true;
		ch_1_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
			ch_1_ovf_rising = true;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <_ZL15ch_1_ovf_rising>
 28a:	02 c0       	rjmp	.+4      	; 0x290 <__vector_10+0x36>
		else 
			ch_1_ovf_rising = false;
 28c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZL15ch_1_ovf_rising>
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
 290:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 294:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	92 2b       	or	r25, r18
 29c:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <_ZL10count_ch_1+0x1>
 2a0:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <_ZL10count_ch_1>
 2a4:	3f c0       	rjmp	.+126    	; 0x324 <__vector_10+0xca>
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 2a6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZL9last_ch_1>
 2aa:	81 11       	cpse	r24, r1
 2ac:	60 c1       	rjmp	.+704    	; 0x56e <__FUSE_REGION_LENGTH__+0x16e>
 2ae:	3a c0       	rjmp	.+116    	; 0x324 <__vector_10+0xca>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
 2b0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <_ZL15ch_1_ovf_rising>
 2b4:	81 11       	cpse	r24, r1
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <__vector_10+0x8a>
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <__vector_10+0x68>
 2ba:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <_ZL15ch_1_ovf_rising>
 2be:	88 23       	and	r24, r24
 2c0:	89 f0       	breq	.+34     	; 0x2e4 <__vector_10+0x8a>
			ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
 2c2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 2c6:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	92 2b       	or	r25, r18
 2ce:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <_ZL10count_ch_1>
 2d2:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <_ZL10count_ch_1+0x1>
 2d6:	82 1b       	sub	r24, r18
 2d8:	93 0b       	sbc	r25, r19
 2da:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <ch_1_pw+0x1>
 2de:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <ch_1_pw>
 2e2:	10 c0       	rjmp	.+32     	; 0x304 <__vector_10+0xaa>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else 
			ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1;				
 2e4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 2e8:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	92 2b       	or	r25, r18
 2f0:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <_ZL10count_ch_1>
 2f4:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <_ZL10count_ch_1+0x1>
 2f8:	82 1b       	sub	r24, r18
 2fa:	93 0b       	sbc	r25, r19
 2fc:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <ch_1_pw+0x1>
 300:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <ch_1_pw>
		ch_1_counting = false;
 304:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <_ZL13ch_1_counting>
		//remove the overflow flag only when no channel is counting to avoid problems 
		//when overflow happens when 2 or more channels are counting simultaneously
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
 308:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZL13ch_2_counting>
 30c:	81 11       	cpse	r24, r1
 30e:	0a c0       	rjmp	.+20     	; 0x324 <__vector_10+0xca>
 310:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZL13ch_3_counting>
 314:	81 11       	cpse	r24, r1
 316:	06 c0       	rjmp	.+12     	; 0x324 <__vector_10+0xca>
 318:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZL13ch_4_counting>
 31c:	81 11       	cpse	r24, r1
 31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_10+0xca>
 320:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZL11timer_3_ovf>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
 324:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 328:	84 ff       	sbrs	r24, 4
 32a:	32 c1       	rjmp	.+612    	; 0x590 <__FUSE_REGION_LENGTH__+0x190>
 32c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL9last_ch_2>
 330:	81 11       	cpse	r24, r1
 332:	6b c1       	rjmp	.+726    	; 0x60a <__FUSE_REGION_LENGTH__+0x20a>
 334:	23 c1       	rjmp	.+582    	; 0x57c <__FUSE_REGION_LENGTH__+0x17c>
	{	last_ch_2 = true;
		ch_2_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL15ch_2_ovf_rising>
 33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_10+0xe8>
		else ch_2_ovf_rising = false;
 33e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZL15ch_2_ovf_rising>
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
 342:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 346:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	92 2b       	or	r25, r18
 34e:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <_ZL10count_ch_2+0x1>
 352:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <_ZL10count_ch_2>
 356:	3f c0       	rjmp	.+126    	; 0x3d6 <__vector_10+0x17c>
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
 358:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL9last_ch_2>
 35c:	81 11       	cpse	r24, r1
 35e:	1d c1       	rjmp	.+570    	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
 360:	3a c0       	rjmp	.+116    	; 0x3d6 <__vector_10+0x17c>
	{	last_ch_2 = false;
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
 362:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <_ZL15ch_2_ovf_rising>
 366:	81 11       	cpse	r24, r1
 368:	16 c0       	rjmp	.+44     	; 0x396 <__vector_10+0x13c>
 36a:	04 c0       	rjmp	.+8      	; 0x374 <__vector_10+0x11a>
 36c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <_ZL15ch_2_ovf_rising>
 370:	88 23       	and	r24, r24
 372:	89 f0       	breq	.+34     	; 0x396 <__vector_10+0x13c>
 374:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 378:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	92 2b       	or	r25, r18
 380:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <_ZL10count_ch_2>
 384:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <_ZL10count_ch_2+0x1>
 388:	82 1b       	sub	r24, r18
 38a:	93 0b       	sbc	r25, r19
 38c:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <ch_2_pw+0x1>
 390:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <ch_2_pw>
 394:	10 c0       	rjmp	.+32     	; 0x3b6 <__vector_10+0x15c>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_1_pw = 65535 - count_ch_2 + (TCNT3L | TCNT3H << 8) + 1;
 396:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 39a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	92 2b       	or	r25, r18
 3a2:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <_ZL10count_ch_2>
 3a6:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <_ZL10count_ch_2+0x1>
 3aa:	82 1b       	sub	r24, r18
 3ac:	93 0b       	sbc	r25, r19
 3ae:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <ch_1_pw+0x1>
 3b2:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <ch_1_pw>
		ch_2_counting = false;
 3b6:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZL13ch_2_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
 3ba:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZL13ch_1_counting>
 3be:	81 11       	cpse	r24, r1
 3c0:	0a c0       	rjmp	.+20     	; 0x3d6 <__vector_10+0x17c>
 3c2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZL13ch_3_counting>
 3c6:	81 11       	cpse	r24, r1
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <__vector_10+0x17c>
 3ca:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZL13ch_4_counting>
 3ce:	81 11       	cpse	r24, r1
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__vector_10+0x17c>
 3d2:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZL11timer_3_ovf>
	}
	
	
	//channel_3
	if (PINJ & 0b00100000 && last_ch_3 == false) //Rising edge
 3d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 3da:	85 ff       	sbrs	r24, 5
 3dc:	ef c0       	rjmp	.+478    	; 0x5bc <__FUSE_REGION_LENGTH__+0x1bc>
 3de:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZL9last_ch_3>
 3e2:	81 11       	cpse	r24, r1
 3e4:	17 c1       	rjmp	.+558    	; 0x614 <__FUSE_REGION_LENGTH__+0x214>
 3e6:	e0 c0       	rjmp	.+448    	; 0x5a8 <__FUSE_REGION_LENGTH__+0x1a8>
	{	last_ch_3 = true;
		ch_3_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <_ZL15ch_3_ovf_rising>
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <__vector_10+0x19a>
		else ch_3_ovf_rising = false;
 3f0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <_ZL15ch_3_ovf_rising>
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
 3f4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 3f8:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	92 2b       	or	r25, r18
 400:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <_ZL10count_ch_3+0x1>
 404:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <_ZL10count_ch_3>
 408:	44 c0       	rjmp	.+136    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
 40a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZL9last_ch_3>
 40e:	81 11       	cpse	r24, r1
 410:	da c0       	rjmp	.+436    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
 412:	3f c0       	rjmp	.+126    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
	{	last_ch_3 = false;
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
 414:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <_ZL15ch_3_ovf_rising>
 418:	81 11       	cpse	r24, r1
 41a:	16 c0       	rjmp	.+44     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 41e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <_ZL15ch_3_ovf_rising>
 422:	88 23       	and	r24, r24
 424:	89 f0       	breq	.+34     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 426:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 42a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	92 2b       	or	r25, r18
 432:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <_ZL10count_ch_3>
 436:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <_ZL10count_ch_3+0x1>
 43a:	82 1b       	sub	r24, r18
 43c:	93 0b       	sbc	r25, r19
 43e:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <ch_3_pw+0x1>
 442:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <ch_3_pw>
 446:	15 c0       	rjmp	.+42     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_3_pw = 65535 - count_ch_3 + (TCNT3L | TCNT3H << 8) + 3;
 448:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 44c:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 450:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <_ZL10count_ch_3>
 454:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <_ZL10count_ch_3+0x1>
 458:	22 e0       	ldi	r18, 0x02	; 2
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	26 1b       	sub	r18, r22
 45e:	37 0b       	sbc	r19, r23
 460:	89 2f       	mov	r24, r25
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	94 2b       	or	r25, r20
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <ch_3_pw+0x1>
 46e:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <ch_3_pw>
		ch_3_counting = false;
 472:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZL13ch_3_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
 476:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZL13ch_1_counting>
 47a:	81 11       	cpse	r24, r1
 47c:	0a c0       	rjmp	.+20     	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 47e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZL13ch_2_counting>
 482:	81 11       	cpse	r24, r1
 484:	06 c0       	rjmp	.+12     	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 486:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZL13ch_4_counting>
 48a:	81 11       	cpse	r24, r1
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 48e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZL11timer_3_ovf>
	}
	
	
	//channel_4
	if (PINJ & 0b01000000 && last_ch_4 == false) //Rising edge
 492:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 496:	86 ff       	sbrs	r24, 6
 498:	a7 c0       	rjmp	.+334    	; 0x5e8 <__FUSE_REGION_LENGTH__+0x1e8>
 49a:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZL9last_ch_4>
 49e:	81 11       	cpse	r24, r1
 4a0:	be c0       	rjmp	.+380    	; 0x61e <__FUSE_REGION_LENGTH__+0x21e>
 4a2:	98 c0       	rjmp	.+304    	; 0x5d4 <__FUSE_REGION_LENGTH__+0x1d4>
	{	last_ch_4 = true;
		ch_4_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
		else ch_4_ovf_rising = false;
 4ac:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__data_end>
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
 4b0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 4b4:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	92 2b       	or	r25, r18
 4bc:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <_ZL10count_ch_4+0x1>
 4c0:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <_ZL10count_ch_4>
 4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
 4c6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZL9last_ch_4>
 4ca:	81 11       	cpse	r24, r1
 4cc:	92 c0       	rjmp	.+292    	; 0x5f2 <__FUSE_REGION_LENGTH__+0x1f2>
 4ce:	ab c0       	rjmp	.+342    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
	{	last_ch_4 = false;
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
 4d0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 4d4:	81 11       	cpse	r24, r1
 4d6:	16 c0       	rjmp	.+44     	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
 4da:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 4de:	88 23       	and	r24, r24
 4e0:	89 f0       	breq	.+34     	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
 4e2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 4e6:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	92 2b       	or	r25, r18
 4ee:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <_ZL10count_ch_4>
 4f2:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <_ZL10count_ch_4+0x1>
 4f6:	82 1b       	sub	r24, r18
 4f8:	93 0b       	sbc	r25, r19
 4fa:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <ch_4_pw+0x1>
 4fe:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <ch_4_pw>
 502:	15 c0       	rjmp	.+42     	; 0x52e <__FUSE_REGION_LENGTH__+0x12e>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_4_pw = 65535 - count_ch_4 + (TCNT3L | TCNT3H << 8) + 4;
 504:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 508:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 50c:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <_ZL10count_ch_4>
 510:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <_ZL10count_ch_4+0x1>
 514:	23 e0       	ldi	r18, 0x03	; 3
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	26 1b       	sub	r18, r22
 51a:	37 0b       	sbc	r19, r23
 51c:	89 2f       	mov	r24, r25
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	94 2b       	or	r25, r20
 522:	82 0f       	add	r24, r18
 524:	93 1f       	adc	r25, r19
 526:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <ch_4_pw+0x1>
 52a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <ch_4_pw>
		ch_4_counting = false;
 52e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <_ZL13ch_4_counting>
		//remove the overflow flag only when no channel is counting to avoid problems
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
 532:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZL13ch_1_counting>
 536:	81 11       	cpse	r24, r1
 538:	76 c0       	rjmp	.+236    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
 53a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZL13ch_2_counting>
 53e:	81 11       	cpse	r24, r1
 540:	72 c0       	rjmp	.+228    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
 542:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZL13ch_3_counting>
 546:	81 11       	cpse	r24, r1
 548:	6e c0       	rjmp	.+220    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
 54a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZL11timer_3_ovf>
 54e:	6b c0       	rjmp	.+214    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 550:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 554:	83 ff       	sbrs	r24, 3
 556:	a7 ce       	rjmp	.-690    	; 0x2a6 <__vector_10+0x4c>
 558:	e5 ce       	rjmp	.-566    	; 0x324 <__vector_10+0xca>
}
//for reading the pwm receiver for the radio receiver
ISR(PCINT1_vect) {
	//channel_1
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZL9last_ch_1>
		ch_1_counting = true;
 560:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZL13ch_1_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) 
 564:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 568:	81 11       	cpse	r24, r1
 56a:	8c ce       	rjmp	.-744    	; 0x284 <__vector_10+0x2a>
 56c:	8f ce       	rjmp	.-738    	; 0x28c <__vector_10+0x32>
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
 56e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZL9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising)) 
 572:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 576:	81 11       	cpse	r24, r1
 578:	a0 ce       	rjmp	.-704    	; 0x2ba <__vector_10+0x60>
 57a:	9a ce       	rjmp	.-716    	; 0x2b0 <__vector_10+0x56>
	}
	
	
	//channel_2
	if (PINJ & 0b00010000 && last_ch_2 == false) //Rising edge
	{	last_ch_2 = true;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZL9last_ch_2>
		ch_2_counting = true;
 582:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <_ZL13ch_2_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_2_ovf_rising = true;
 586:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 58a:	81 11       	cpse	r24, r1
 58c:	d4 ce       	rjmp	.-600    	; 0x336 <__vector_10+0xdc>
 58e:	d7 ce       	rjmp	.-594    	; 0x33e <__vector_10+0xe4>
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
 590:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 594:	84 ff       	sbrs	r24, 4
 596:	e0 ce       	rjmp	.-576    	; 0x358 <__vector_10+0xfe>
 598:	1e cf       	rjmp	.-452    	; 0x3d6 <__vector_10+0x17c>
	{	last_ch_2 = false;
 59a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <_ZL9last_ch_2>
		//subtract current counter to old one in count_ch_2 and store variable in ch_2_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_2_ovf_rising) || (timer_3_ovf && ch_2_ovf_rising) ) ch_2_pw = (TCNT3L | TCNT3H << 8) - count_ch_2;
 59e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 5a2:	81 11       	cpse	r24, r1
 5a4:	e3 ce       	rjmp	.-570    	; 0x36c <__vector_10+0x112>
 5a6:	dd ce       	rjmp	.-582    	; 0x362 <__vector_10+0x108>
	}
	
	
	//channel_3
	if (PINJ & 0b00100000 && last_ch_3 == false) //Rising edge
	{	last_ch_3 = true;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZL9last_ch_3>
		ch_3_counting = true;
 5ae:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <_ZL13ch_3_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_3_ovf_rising = true;
 5b2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 5b6:	81 11       	cpse	r24, r1
 5b8:	17 cf       	rjmp	.-466    	; 0x3e8 <__vector_10+0x18e>
 5ba:	1a cf       	rjmp	.-460    	; 0x3f0 <__vector_10+0x196>
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
 5bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 5c0:	85 ff       	sbrs	r24, 5
 5c2:	23 cf       	rjmp	.-442    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 5c4:	66 cf       	rjmp	.-308    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
	{	last_ch_3 = false;
 5c6:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZL9last_ch_3>
		//subtract current counter to old one in count_ch_3 and store variable in ch_3_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_3_ovf_rising) || (timer_3_ovf && ch_3_ovf_rising) ) ch_3_pw = (TCNT3L | TCNT3H << 8) - count_ch_3;
 5ca:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 5ce:	81 11       	cpse	r24, r1
 5d0:	26 cf       	rjmp	.-436    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 5d2:	20 cf       	rjmp	.-448    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
	}
	
	
	//channel_4
	if (PINJ & 0b01000000 && last_ch_4 == false) //Rising edge
	{	last_ch_4 = true;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_ZL9last_ch_4>
		ch_4_counting = true;
 5da:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <_ZL13ch_4_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_4_ovf_rising = true;
 5de:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 5e2:	81 11       	cpse	r24, r1
 5e4:	5f cf       	rjmp	.-322    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 5e6:	62 cf       	rjmp	.-316    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
 5e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 5ec:	86 ff       	sbrs	r24, 6
 5ee:	6b cf       	rjmp	.-298    	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
 5f0:	1a c0       	rjmp	.+52     	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
	{	last_ch_4 = false;
 5f2:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <_ZL9last_ch_4>
		//subtract current counter to old one in count_ch_4 and store variable in ch_4_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_4_ovf_rising) || (timer_3_ovf && ch_4_ovf_rising) ) ch_4_pw = (TCNT3L | TCNT3H << 8) - count_ch_4;
 5f6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL11timer_3_ovf>
 5fa:	81 11       	cpse	r24, r1
 5fc:	6e cf       	rjmp	.-292    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
 5fe:	68 cf       	rjmp	.-304    	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
		else 
			ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 600:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 604:	83 ff       	sbrs	r24, 3
 606:	b3 cf       	rjmp	.-154    	; 0x56e <__FUSE_REGION_LENGTH__+0x16e>
 608:	8d ce       	rjmp	.-742    	; 0x324 <__vector_10+0xca>
		if(timer_3_ovf) ch_2_ovf_rising = true;
		else ch_2_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_2 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00010000) && last_ch_2 == true) //Falling edge
 60a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 60e:	84 ff       	sbrs	r24, 4
 610:	c4 cf       	rjmp	.-120    	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
 612:	e1 ce       	rjmp	.-574    	; 0x3d6 <__vector_10+0x17c>
		if(timer_3_ovf) ch_3_ovf_rising = true;
		else ch_3_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_3 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b00100000) && last_ch_3 == true) //Falling edge
 614:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 618:	85 ff       	sbrs	r24, 5
 61a:	d5 cf       	rjmp	.-86     	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
 61c:	3a cf       	rjmp	.-396    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
		if(timer_3_ovf) ch_4_ovf_rising = true;
		else ch_4_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_4 = TCNT3L | TCNT3H << 8;
	}
	else if (!(PINJ & 0b01000000) && last_ch_4 == true) //Falling edge
 61e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 622:	86 ff       	sbrs	r24, 6
 624:	e6 cf       	rjmp	.-52     	; 0x5f2 <__FUSE_REGION_LENGTH__+0x1f2>
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
	}
	
	//do the same for every channel when cleaned up
	
}
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_35>:

ISR(TIMER3_OVF_vect) {
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	8f 93       	push	r24
	timer_3_ovf=true;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZL11timer_3_ovf>
	TIFR3 &= ~(1 << TOV3);
 650:	c0 98       	cbi	0x18, 0	; 24
 652:	8f 91       	pop	r24
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <_Z6enablev>:
	* @brief Toggle the enable pin to "send" command to display
	* @param None
	* @retval None
	*/
void enable(void){
	PORTL |= (1 << E);
 65e:	eb e0       	ldi	r30, 0x0B	; 11
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	80 81       	ld	r24, Z
 664:	80 68       	ori	r24, 0x80	; 128
 666:	80 83       	st	Z, r24
	TCNT1L = 0, TCNT1H = 0;
 668:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 66c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < ENABLE_TIME){/* delay for synchronization */}	
 670:	a4 e8       	ldi	r26, 0x84	; 132
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e5 e8       	ldi	r30, 0x85	; 133
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	8c 91       	ld	r24, X
 67a:	20 81       	ld	r18, Z
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	92 2b       	or	r25, r18
 680:	80 39       	cpi	r24, 0x90	; 144
 682:	91 40       	sbci	r25, 0x01	; 1
 684:	cc f3       	brlt	.-14     	; 0x678 <_Z6enablev+0x1a>
	TCNT1L = 0, TCNT1H = 0;
 686:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 68a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	PORTL &= ~(1 << E);
 68e:	eb e0       	ldi	r30, 0x0B	; 11
 690:	f1 e0       	ldi	r31, 0x01	; 1
 692:	80 81       	ld	r24, Z
 694:	8f 77       	andi	r24, 0x7F	; 127
 696:	80 83       	st	Z, r24
 698:	08 95       	ret

0000069a <_Z13LCD_WriteCharc>:
/**
	* @brief set the data pin to a particular character
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f2 e0       	ldi	r31, 0x02	; 2
	int i;
	for (i = 0; i < 8; i++) {
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	50 e0       	ldi	r21, 0x00	; 0
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
 6aa:	c1 e0       	ldi	r28, 0x01	; 1
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
 6ae:	08 2f       	mov	r16, r24
 6b0:	10 e0       	ldi	r17, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
 6b2:	a8 e0       	ldi	r26, 0x08	; 8
 6b4:	b1 e0       	ldi	r27, 0x01	; 1
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
		/* extracts a bit of the char and checks if it's 1 to set the line to high */
		if ((c & (1 << i)) >> i == 1) {
 6b6:	9e 01       	movw	r18, r28
 6b8:	04 2e       	mov	r0, r20
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <_Z13LCD_WriteCharc+0x26>
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	0a 94       	dec	r0
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <_Z13LCD_WriteCharc+0x22>
 6c4:	20 23       	and	r18, r16
 6c6:	31 23       	and	r19, r17
 6c8:	04 2e       	mov	r0, r20
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <_Z13LCD_WriteCharc+0x36>
 6cc:	35 95       	asr	r19
 6ce:	27 95       	ror	r18
 6d0:	0a 94       	dec	r0
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <_Z13LCD_WriteCharc+0x32>
 6d4:	21 30       	cpi	r18, 0x01	; 1
 6d6:	31 05       	cpc	r19, r1
 6d8:	59 f4       	brne	.+22     	; 0x6f0 <_Z13LCD_WriteCharc+0x56>
			PORTK |= (1 << dataPin[i]);
 6da:	2c 91       	ld	r18, X
 6dc:	ce 01       	movw	r24, r28
 6de:	00 80       	ld	r0, Z
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_Z13LCD_WriteCharc+0x4c>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	0a 94       	dec	r0
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <_Z13LCD_WriteCharc+0x48>
 6ea:	82 2b       	or	r24, r18
 6ec:	8c 93       	st	X, r24
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <_Z13LCD_WriteCharc+0x6e>
		} else {
			PORTK &= ~(1 << dataPin[i]);
 6f0:	2c 91       	ld	r18, X
 6f2:	be 01       	movw	r22, r28
 6f4:	00 80       	ld	r0, Z
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <_Z13LCD_WriteCharc+0x62>
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	0a 94       	dec	r0
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <_Z13LCD_WriteCharc+0x5e>
 700:	96 2f       	mov	r25, r22
 702:	90 95       	com	r25
 704:	92 23       	and	r25, r18
 706:	9c 93       	st	X, r25
  * @param c: char to be written on the LCD
	* @retval None
	*/
void LCD_WriteChar(char c){
	int i;
	for (i = 0; i < 8; i++) {
 708:	4f 5f       	subi	r20, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	32 96       	adiw	r30, 0x02	; 2
 70e:	48 30       	cpi	r20, 0x08	; 8
 710:	51 05       	cpc	r21, r1
 712:	89 f6       	brne	.-94     	; 0x6b6 <_Z13LCD_WriteCharc+0x1c>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
 714:	a4 df       	rcall	.-184    	; 0x65e <_Z6enablev>
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <_Z12clearDisplayv>:
	* @brief Clear every character on the display and returns to the first address of display
	* @param None
	* @retval None
	*/
void clearDisplay(void){
	PORTL &= ~(1 << RS);
 720:	eb e0       	ldi	r30, 0x0B	; 11
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	80 81       	ld	r24, Z
 726:	8f 7d       	andi	r24, 0xDF	; 223
 728:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 72a:	80 81       	ld	r24, Z
 72c:	8f 7b       	andi	r24, 0xBF	; 191
 72e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
 730:	e8 e0       	ldi	r30, 0x08	; 8
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	80 81       	ld	r24, Z
 736:	8f 77       	andi	r24, 0x7F	; 127
 738:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
 73a:	80 81       	ld	r24, Z
 73c:	8f 7b       	andi	r24, 0xBF	; 191
 73e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
 740:	80 81       	ld	r24, Z
 742:	8f 7d       	andi	r24, 0xDF	; 223
 744:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
 746:	80 81       	ld	r24, Z
 748:	8f 7e       	andi	r24, 0xEF	; 239
 74a:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
 74c:	80 81       	ld	r24, Z
 74e:	87 7f       	andi	r24, 0xF7	; 247
 750:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
 752:	80 81       	ld	r24, Z
 754:	8b 7f       	andi	r24, 0xFB	; 251
 756:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
 758:	80 81       	ld	r24, Z
 75a:	8d 7f       	andi	r24, 0xFD	; 253
 75c:	80 83       	st	Z, r24
	PORTK |= (1 << DB0);
 75e:	80 81       	ld	r24, Z
 760:	81 60       	ori	r24, 0x01	; 1
 762:	80 83       	st	Z, r24
	enable();
 764:	7c df       	rcall	.-264    	; 0x65e <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
 766:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 76a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}	
 76e:	a4 e8       	ldi	r26, 0x84	; 132
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e5 e8       	ldi	r30, 0x85	; 133
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	8c 91       	ld	r24, X
 778:	20 81       	ld	r18, Z
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	92 2b       	or	r25, r18
 77e:	80 3d       	cpi	r24, 0xD0	; 208
 780:	97 40       	sbci	r25, 0x07	; 7
 782:	cc f3       	brlt	.-14     	; 0x776 <_Z12clearDisplayv+0x56>
	TCNT1L = 0, TCNT1H = 0;
 784:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 788:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 78c:	08 95       	ret

0000078e <_Z9SetAdressi>:
	* @retval None
	*	@note When 1-line display mode (N=LOW), DDRAM address is form 0x00 to 0x4F
	* 			In 2-line display mode (N=HIGH), DDRAM address is form 0x00 to 0x27 for first line
	*				and 0x40 to 0x67 for second line
	*/
void SetAdress(int address){
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	8c 01       	movw	r16, r24
  int i;
	PORTL &= ~(1 << RS);
 798:	eb e0       	ldi	r30, 0x0B	; 11
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	80 81       	ld	r24, Z
 79e:	8f 7d       	andi	r24, 0xDF	; 223
 7a0:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 7a2:	80 81       	ld	r24, Z
 7a4:	8f 7b       	andi	r24, 0xBF	; 191
 7a6:	80 83       	st	Z, r24
	PORTK |= (1 << DB7);
 7a8:	e8 e0       	ldi	r30, 0x08	; 8
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	80 81       	ld	r24, Z
 7ae:	80 68       	ori	r24, 0x80	; 128
 7b0:	80 83       	st	Z, r24
 7b2:	e0 e0       	ldi	r30, 0x00	; 0
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	50 e0       	ldi	r21, 0x00	; 0
		if ((address & (1 << i)) >> i == 1) {
 7ba:	c1 e0       	ldi	r28, 0x01	; 1
 7bc:	d0 e0       	ldi	r29, 0x00	; 0
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
 7be:	a8 e0       	ldi	r26, 0x08	; 8
 7c0:	b1 e0       	ldi	r27, 0x01	; 1
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
		if ((address & (1 << i)) >> i == 1) {
 7c2:	9e 01       	movw	r18, r28
 7c4:	04 2e       	mov	r0, r20
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <_Z9SetAdressi+0x3e>
 7c8:	22 0f       	add	r18, r18
 7ca:	33 1f       	adc	r19, r19
 7cc:	0a 94       	dec	r0
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <_Z9SetAdressi+0x3a>
 7d0:	20 23       	and	r18, r16
 7d2:	31 23       	and	r19, r17
 7d4:	04 2e       	mov	r0, r20
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <_Z9SetAdressi+0x4e>
 7d8:	35 95       	asr	r19
 7da:	27 95       	ror	r18
 7dc:	0a 94       	dec	r0
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <_Z9SetAdressi+0x4a>
 7e0:	21 30       	cpi	r18, 0x01	; 1
 7e2:	31 05       	cpc	r19, r1
 7e4:	59 f4       	brne	.+22     	; 0x7fc <_Z9SetAdressi+0x6e>
			PORTK |= (1 << dataPin[i]);
 7e6:	2c 91       	ld	r18, X
 7e8:	ce 01       	movw	r24, r28
 7ea:	00 80       	ld	r0, Z
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <_Z9SetAdressi+0x64>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	0a 94       	dec	r0
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <_Z9SetAdressi+0x60>
 7f6:	82 2b       	or	r24, r18
 7f8:	8c 93       	st	X, r24
 7fa:	0c c0       	rjmp	.+24     	; 0x814 <_Z9SetAdressi+0x86>
		} else {
			PORTK &= ~(1 << dataPin[i]);
 7fc:	2c 91       	ld	r18, X
 7fe:	be 01       	movw	r22, r28
 800:	00 80       	ld	r0, Z
 802:	02 c0       	rjmp	.+4      	; 0x808 <_Z9SetAdressi+0x7a>
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <_Z9SetAdressi+0x76>
 80c:	96 2f       	mov	r25, r22
 80e:	90 95       	com	r25
 810:	92 23       	and	r25, r18
 812:	9c 93       	st	X, r25
  int i;
	PORTL &= ~(1 << RS);
	PORTL &= ~(1 << RW);
	PORTK |= (1 << DB7);
	/* set DB0 to DB6 to the address of the DDRAM */
	for (i = 0; i < 7; i++) {
 814:	4f 5f       	subi	r20, 0xFF	; 255
 816:	5f 4f       	sbci	r21, 0xFF	; 255
 818:	32 96       	adiw	r30, 0x02	; 2
 81a:	47 30       	cpi	r20, 0x07	; 7
 81c:	51 05       	cpc	r21, r1
 81e:	89 f6       	brne	.-94     	; 0x7c2 <_Z9SetAdressi+0x34>
			PORTK |= (1 << dataPin[i]);
		} else {
			PORTK &= ~(1 << dataPin[i]);
		}
	}
	enable();
 820:	1e df       	rcall	.-452    	; 0x65e <_Z6enablev>
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	08 95       	ret

0000082c <_Z10returnHomev>:
	* @brief change the address of the LCD pointer to the first one
	* @param None
	* @retval None
	*/
void returnHome(void){
	PORTL &= ~(1 << RS);
 82c:	eb e0       	ldi	r30, 0x0B	; 11
 82e:	f1 e0       	ldi	r31, 0x01	; 1
 830:	80 81       	ld	r24, Z
 832:	8f 7d       	andi	r24, 0xDF	; 223
 834:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 836:	80 81       	ld	r24, Z
 838:	8f 7b       	andi	r24, 0xBF	; 191
 83a:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
 83c:	e8 e0       	ldi	r30, 0x08	; 8
 83e:	f1 e0       	ldi	r31, 0x01	; 1
 840:	80 81       	ld	r24, Z
 842:	8f 77       	andi	r24, 0x7F	; 127
 844:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
 846:	80 81       	ld	r24, Z
 848:	8f 7b       	andi	r24, 0xBF	; 191
 84a:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
 84c:	80 81       	ld	r24, Z
 84e:	8f 7d       	andi	r24, 0xDF	; 223
 850:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
 852:	80 81       	ld	r24, Z
 854:	8f 7e       	andi	r24, 0xEF	; 239
 856:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
 858:	80 81       	ld	r24, Z
 85a:	87 7f       	andi	r24, 0xF7	; 247
 85c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
 85e:	80 81       	ld	r24, Z
 860:	8b 7f       	andi	r24, 0xFB	; 251
 862:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
 864:	80 81       	ld	r24, Z
 866:	82 60       	ori	r24, 0x02	; 2
 868:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
 86a:	80 81       	ld	r24, Z
 86c:	8e 7f       	andi	r24, 0xFE	; 254
 86e:	80 83       	st	Z, r24
	enable();
 870:	f6 de       	rcall	.-532    	; 0x65e <_Z6enablev>
	/* extra wait time from the datasheet 1.53ms */
	TCNT1L = 0, TCNT1H = 0;
 872:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 876:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	while ((TCNT1L | TCNT1H << 8) < WAIT_TIME_AFTER_RESET){/* delay for synchronization */}
 87a:	a4 e8       	ldi	r26, 0x84	; 132
 87c:	b0 e0       	ldi	r27, 0x00	; 0
 87e:	e5 e8       	ldi	r30, 0x85	; 133
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	8c 91       	ld	r24, X
 884:	20 81       	ld	r18, Z
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	92 2b       	or	r25, r18
 88a:	80 3d       	cpi	r24, 0xD0	; 208
 88c:	97 40       	sbci	r25, 0x07	; 7
 88e:	cc f3       	brlt	.-14     	; 0x882 <_Z10returnHomev+0x56>
	TCNT1L = 0, TCNT1H = 0;
 890:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 894:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 898:	08 95       	ret

0000089a <_Z9inputModev>:
	* @brief set up pins to input mode
	* @param None
	* @retval None
	*/
void inputMode(void){
	PORTL |= (1 << RS);
 89a:	eb e0       	ldi	r30, 0x0B	; 11
 89c:	f1 e0       	ldi	r31, 0x01	; 1
 89e:	80 81       	ld	r24, Z
 8a0:	80 62       	ori	r24, 0x20	; 32
 8a2:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 8a4:	80 81       	ld	r24, Z
 8a6:	8f 7b       	andi	r24, 0xBF	; 191
 8a8:	80 83       	st	Z, r24
 8aa:	08 95       	ret

000008ac <_Z15LCD_WriteStringPc>:
/**
	* @brief send one by one all the character of the string to LCD_WriteChar()
  * @param string: String to be printed on the LCD
	* @retval None
	*/
void LCD_WriteString(char * string){
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	8c 01       	movw	r16, r24
	int i;
	inputMode(); /************ NOT sure we need this */
 8b6:	f1 df       	rcall	.-30     	; 0x89a <_Z9inputModev>
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 8b8:	f8 01       	movw	r30, r16
 8ba:	80 81       	ld	r24, Z
 8bc:	81 11       	cpse	r24, r1
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <_Z15LCD_WriteStringPc+0x26>
 8c0:	0e c0       	rjmp	.+28     	; 0x8de <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 8c2:	eb de       	rcall	.-554    	; 0x69a <_Z13LCD_WriteCharc>
void LCD_WriteString(char * string){
	int i;
	inputMode(); /************ NOT sure we need this */
	/* Extract each char individually and calls LCD_WriteChar for each one */
	/* until it hits the MAX_NUMBER_CHAR_LCD_DISPLAY or the end char \0 */
	for (i = 0; (i < MAX_NUMBER_CHAR_LCD_DISPLAY) && (string[i] != '\0') ; i++){
 8c4:	c0 17       	cp	r28, r16
 8c6:	d1 07       	cpc	r29, r17
 8c8:	51 f0       	breq	.+20     	; 0x8de <_Z15LCD_WriteStringPc+0x32>
 8ca:	89 91       	ld	r24, Y+
 8cc:	81 11       	cpse	r24, r1
 8ce:	f9 cf       	rjmp	.-14     	; 0x8c2 <_Z15LCD_WriteStringPc+0x16>
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <_Z15LCD_WriteStringPc+0x32>
		LCD_WriteChar(string[i]);
 8d2:	e3 de       	rcall	.-570    	; 0x69a <_Z13LCD_WriteCharc>
 8d4:	e8 01       	movw	r28, r16
 8d6:	21 96       	adiw	r28, 0x01	; 1
 8d8:	00 5f       	subi	r16, 0xF0	; 240
 8da:	1f 4f       	sbci	r17, 0xFF	; 255
 8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <_Z15LCD_WriteStringPc+0x1e>
	}
}
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	08 95       	ret

000008e8 <_Z6turnOnv>:
	* @brief Turn on the display
	* @param None
	* @retval None
	*/
void turnOn(void){
	PORTL &= ~(1 << RS);
 8e8:	eb e0       	ldi	r30, 0x0B	; 11
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	80 81       	ld	r24, Z
 8ee:	8f 7d       	andi	r24, 0xDF	; 223
 8f0:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 8f2:	80 81       	ld	r24, Z
 8f4:	8f 7b       	andi	r24, 0xBF	; 191
 8f6:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
 8f8:	e8 e0       	ldi	r30, 0x08	; 8
 8fa:	f1 e0       	ldi	r31, 0x01	; 1
 8fc:	80 81       	ld	r24, Z
 8fe:	8f 77       	andi	r24, 0x7F	; 127
 900:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
 902:	80 81       	ld	r24, Z
 904:	8f 7b       	andi	r24, 0xBF	; 191
 906:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
 908:	80 81       	ld	r24, Z
 90a:	8f 7d       	andi	r24, 0xDF	; 223
 90c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
 90e:	80 81       	ld	r24, Z
 910:	8f 7e       	andi	r24, 0xEF	; 239
 912:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
 914:	80 81       	ld	r24, Z
 916:	88 60       	ori	r24, 0x08	; 8
 918:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
 91a:	80 81       	ld	r24, Z
 91c:	84 60       	ori	r24, 0x04	; 4
 91e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
 920:	80 81       	ld	r24, Z
 922:	8d 7f       	andi	r24, 0xFD	; 253
 924:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
 926:	80 81       	ld	r24, Z
 928:	8e 7f       	andi	r24, 0xFE	; 254
 92a:	80 83       	st	Z, r24
	enable();
 92c:	98 ce       	rjmp	.-720    	; 0x65e <_Z6enablev>
 92e:	08 95       	ret

00000930 <_Z11functionSetv>:
	* @brief Set up length of data bus, and size of display
	* @param None
	* @retval None
	*/
void functionSet(void){
	PORTL &= ~(1 << RS);
 930:	eb e0       	ldi	r30, 0x0B	; 11
 932:	f1 e0       	ldi	r31, 0x01	; 1
 934:	80 81       	ld	r24, Z
 936:	8f 7d       	andi	r24, 0xDF	; 223
 938:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 93a:	80 81       	ld	r24, Z
 93c:	8f 7b       	andi	r24, 0xBF	; 191
 93e:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
 940:	e8 e0       	ldi	r30, 0x08	; 8
 942:	f1 e0       	ldi	r31, 0x01	; 1
 944:	80 81       	ld	r24, Z
 946:	8f 77       	andi	r24, 0x7F	; 127
 948:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
 94a:	80 81       	ld	r24, Z
 94c:	8f 7b       	andi	r24, 0xBF	; 191
 94e:	80 83       	st	Z, r24
	PORTK |= (1 << DB5);
 950:	80 81       	ld	r24, Z
 952:	80 62       	ori	r24, 0x20	; 32
 954:	80 83       	st	Z, r24
	PORTK |= (1 << DB4);
 956:	80 81       	ld	r24, Z
 958:	80 61       	ori	r24, 0x10	; 16
 95a:	80 83       	st	Z, r24
	PORTK |= (1 << DB3);
 95c:	80 81       	ld	r24, Z
 95e:	88 60       	ori	r24, 0x08	; 8
 960:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB2);
 962:	80 81       	ld	r24, Z
 964:	8b 7f       	andi	r24, 0xFB	; 251
 966:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB1);
 968:	80 81       	ld	r24, Z
 96a:	8d 7f       	andi	r24, 0xFD	; 253
 96c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
 96e:	80 81       	ld	r24, Z
 970:	8e 7f       	andi	r24, 0xFE	; 254
 972:	80 83       	st	Z, r24
	enable();
 974:	74 ce       	rjmp	.-792    	; 0x65e <_Z6enablev>
 976:	08 95       	ret

00000978 <_Z9entryModev>:
	* @brief set up the entry mode of the display
	* @param None
	* @retval None
	*/
void entryMode(void){
	PORTL &= ~(1 << RS);
 978:	eb e0       	ldi	r30, 0x0B	; 11
 97a:	f1 e0       	ldi	r31, 0x01	; 1
 97c:	80 81       	ld	r24, Z
 97e:	8f 7d       	andi	r24, 0xDF	; 223
 980:	80 83       	st	Z, r24
	PORTL &= ~(1 << RW);
 982:	80 81       	ld	r24, Z
 984:	8f 7b       	andi	r24, 0xBF	; 191
 986:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB7);
 988:	e8 e0       	ldi	r30, 0x08	; 8
 98a:	f1 e0       	ldi	r31, 0x01	; 1
 98c:	80 81       	ld	r24, Z
 98e:	8f 77       	andi	r24, 0x7F	; 127
 990:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB6);
 992:	80 81       	ld	r24, Z
 994:	8f 7b       	andi	r24, 0xBF	; 191
 996:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB5);
 998:	80 81       	ld	r24, Z
 99a:	8f 7d       	andi	r24, 0xDF	; 223
 99c:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB4);
 99e:	80 81       	ld	r24, Z
 9a0:	8f 7e       	andi	r24, 0xEF	; 239
 9a2:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB3);
 9a4:	80 81       	ld	r24, Z
 9a6:	87 7f       	andi	r24, 0xF7	; 247
 9a8:	80 83       	st	Z, r24
	PORTK |= (1 << DB2);
 9aa:	80 81       	ld	r24, Z
 9ac:	84 60       	ori	r24, 0x04	; 4
 9ae:	80 83       	st	Z, r24
	PORTK |= (1 << DB1);
 9b0:	80 81       	ld	r24, Z
 9b2:	82 60       	ori	r24, 0x02	; 2
 9b4:	80 83       	st	Z, r24
	PORTK &= ~(1 << DB0);
 9b6:	80 81       	ld	r24, Z
 9b8:	8e 7f       	andi	r24, 0xFE	; 254
 9ba:	80 83       	st	Z, r24
	enable();
 9bc:	50 ce       	rjmp	.-864    	; 0x65e <_Z6enablev>
 9be:	08 95       	ret

000009c0 <_Z7initLCDv>:
	* @param None
	* @retval None
	*/
void initLCD(void){
	//init timer for LCD control. Counts up every 1us
	TCCR1B |= (1 << CS00); /*prescaler 1*/
 9c0:	e1 e8       	ldi	r30, 0x81	; 129
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	80 83       	st	Z, r24
	//set pins as outputs
	DDRK |= (1 << DDK7) | (1 << DDK6) | (1 << DDK5) | (1 << DDK4) | (1 << DDK3) | (1 << DDK2) | (1 << DDK1) | (1 << DDK0);
 9ca:	e7 e0       	ldi	r30, 0x07	; 7
 9cc:	f1 e0       	ldi	r31, 0x01	; 1
 9ce:	80 81       	ld	r24, Z
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	80 83       	st	Z, r24
	DDRL |= (1 << DDL7) | (1 << DDL6) | (1 << DDL5);
 9d4:	ea e0       	ldi	r30, 0x0A	; 10
 9d6:	f1 e0       	ldi	r31, 0x01	; 1
 9d8:	80 81       	ld	r24, Z
 9da:	80 6e       	ori	r24, 0xE0	; 224
 9dc:	80 83       	st	Z, r24
	clearDisplay();
 9de:	a0 de       	rcall	.-704    	; 0x720 <_Z12clearDisplayv>
	turnOn();
 9e0:	83 df       	rcall	.-250    	; 0x8e8 <_Z6turnOnv>
	functionSet();
 9e2:	a6 df       	rcall	.-180    	; 0x930 <_Z11functionSetv>
	entryMode();
 9e4:	c9 df       	rcall	.-110    	; 0x978 <_Z9entryModev>
	returnHome();
 9e6:	22 cf       	rjmp	.-444    	; 0x82c <_Z10returnHomev>
 9e8:	08 95       	ret

000009ea <main>:
#include "esc.h"
#include "interrupt.h"
#include "lcd.h"

int main()
{
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	1f 92       	push	r1
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
	//char* buffers for printing stuff on the LCD
	char buffer[20];
	//create ESC object
	esc allESC;
 9f4:	ce 01       	movw	r24, r28
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	95 db       	rcall	.-2262   	; 0x124 <_ZN3escC1Ev>
	// initialize ESC
	allESC.initialize();
 9fa:	ce 01       	movw	r24, r28
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	93 db       	rcall	.-2266   	; 0x126 <_ZN3esc10initializeEv>
	//initialize INT
	initializeInterrupt();
 a00:	d3 db       	rcall	.-2138   	; 0x1a8 <_Z19initializeInterruptv>
	//initialize Radio Controller counter
	initializecounterPWMread();
 a02:	e3 db       	rcall	.-2106   	; 0x1ca <_Z24initializecounterPWMreadv>
	//initialize LCD
	initLCD(); 		/* configure LCD */
 a04:	dd df       	rcall	.-70     	; 0x9c0 <_Z7initLCDv>
		}
		else
		{
			//the divide by 2 here is required because of the way the ESC is set up
			//when we will have a frequency of 16MHz we will actually have to multiply by 8
			OCR4A = ch_3_pw/2;
 a06:	0f 2e       	mov	r0, r31
 a08:	f8 ea       	ldi	r31, 0xA8	; 168
 a0a:	8f 2e       	mov	r8, r31
 a0c:	91 2c       	mov	r9, r1
 a0e:	f0 2d       	mov	r31, r0
			OCR4B = ch_3_pw/2;
 a10:	0f 2e       	mov	r0, r31
 a12:	fa ea       	ldi	r31, 0xAA	; 170
 a14:	af 2e       	mov	r10, r31
 a16:	b1 2c       	mov	r11, r1
 a18:	f0 2d       	mov	r31, r0
			OCR5A = ch_3_pw/2;
 a1a:	0f 2e       	mov	r0, r31
 a1c:	f8 e2       	ldi	r31, 0x28	; 40
 a1e:	cf 2e       	mov	r12, r31
 a20:	dd 24       	eor	r13, r13
 a22:	d3 94       	inc	r13
 a24:	f0 2d       	mov	r31, r0
			OCR5B = ch_3_pw/2;
 a26:	0f 2e       	mov	r0, r31
 a28:	fa e2       	ldi	r31, 0x2A	; 42
 a2a:	ef 2e       	mov	r14, r31
 a2c:	ff 24       	eor	r15, r15
 a2e:	f3 94       	inc	r15
 a30:	f0 2d       	mov	r31, r0
	
	while(1)
	{	
		if (button_falling)
		{
			OCR4A = 1100/2;
 a32:	06 e2       	ldi	r16, 0x26	; 38
 a34:	12 e0       	ldi	r17, 0x02	; 2
	//initialize LCD
	initLCD(); 		/* configure LCD */
	
	while(1)
	{	
		if (button_falling)
 a36:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <button_falling>
 a3a:	88 23       	and	r24, r24
 a3c:	e1 f0       	breq	.+56     	; 0xa76 <main+0x8c>
		{
			OCR4A = 1100/2;
 a3e:	f4 01       	movw	r30, r8
 a40:	11 83       	std	Z+1, r17	; 0x01
 a42:	00 83       	st	Z, r16
			OCR4B = 1100/2;
 a44:	f5 01       	movw	r30, r10
 a46:	11 83       	std	Z+1, r17	; 0x01
 a48:	00 83       	st	Z, r16
			OCR5A = 1100/2;
 a4a:	f6 01       	movw	r30, r12
 a4c:	11 83       	std	Z+1, r17	; 0x01
 a4e:	00 83       	st	Z, r16
			OCR5B = 1100/2;
 a50:	f7 01       	movw	r30, r14
 a52:	11 83       	std	Z+1, r17	; 0x01
 a54:	00 83       	st	Z, r16
			clearDisplay();
 a56:	64 de       	rcall	.-824    	; 0x720 <_Z12clearDisplayv>
			LCD_WriteString("Salut Ben");
 a58:	80 e1       	ldi	r24, 0x10	; 16
 a5a:	92 e0       	ldi	r25, 0x02	; 2
 a5c:	27 df       	rcall	.-434    	; 0x8ac <_Z15LCD_WriteStringPc>
 a5e:	ff e3       	ldi	r31, 0x3F	; 63
 a60:	2d e0       	ldi	r18, 0x0D	; 13
 a62:	83 e0       	ldi	r24, 0x03	; 3
 a64:	f1 50       	subi	r31, 0x01	; 1
 a66:	20 40       	sbci	r18, 0x00	; 0
 a68:	80 40       	sbci	r24, 0x00	; 0
 a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x7a>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <main+0x84>
 a6e:	00 00       	nop
			_delay_ms(1000);
			button_falling = false;
 a70:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <button_falling>
 a74:	e0 cf       	rjmp	.-64     	; 0xa36 <main+0x4c>
		}
		else if (button_rising)
 a76:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <button_rising>
 a7a:	88 23       	and	r24, r24
 a7c:	19 f0       	breq	.+6      	; 0xa84 <main+0x9a>
		{				
			button_rising = false;
 a7e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <button_rising>
 a82:	d9 cf       	rjmp	.-78     	; 0xa36 <main+0x4c>
		}
		else
		{
			//the divide by 2 here is required because of the way the ESC is set up
			//when we will have a frequency of 16MHz we will actually have to multiply by 8
			OCR4A = ch_3_pw/2;
 a84:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <ch_3_pw>
 a88:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <ch_3_pw+0x1>
 a8c:	96 95       	lsr	r25
 a8e:	87 95       	ror	r24
 a90:	f4 01       	movw	r30, r8
 a92:	91 83       	std	Z+1, r25	; 0x01
 a94:	80 83       	st	Z, r24
			OCR4B = ch_3_pw/2;
 a96:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <ch_3_pw>
 a9a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <ch_3_pw+0x1>
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	f5 01       	movw	r30, r10
 aa4:	91 83       	std	Z+1, r25	; 0x01
 aa6:	80 83       	st	Z, r24
			OCR5A = ch_3_pw/2;
 aa8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <ch_3_pw>
 aac:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <ch_3_pw+0x1>
 ab0:	96 95       	lsr	r25
 ab2:	87 95       	ror	r24
 ab4:	f6 01       	movw	r30, r12
 ab6:	91 83       	std	Z+1, r25	; 0x01
 ab8:	80 83       	st	Z, r24
			OCR5B = ch_3_pw/2;
 aba:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <ch_3_pw>
 abe:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <ch_3_pw+0x1>
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	f7 01       	movw	r30, r14
 ac8:	91 83       	std	Z+1, r25	; 0x01
 aca:	80 83       	st	Z, r24
			//LCD_WriteString(buffer);
			//SetAdress(64);
			//sprintf(buffer, "%u    %u     ", ch_3_pw, ch_4_pw);
			//LCD_WriteString(buffer);
			//_delay_ms(100);
			clearDisplay();
 acc:	29 de       	rcall	.-942    	; 0x720 <_Z12clearDisplayv>
			LCD_WriteString("   Rejouis-toi ");
 ace:	8a e1       	ldi	r24, 0x1A	; 26
 ad0:	92 e0       	ldi	r25, 0x02	; 2
 ad2:	ec de       	rcall	.-552    	; 0x8ac <_Z15LCD_WriteStringPc>
			SetAdress(64); // goes to line 2 of LCD
 ad4:	80 e4       	ldi	r24, 0x40	; 64
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	5a de       	rcall	.-844    	; 0x78e <_Z9SetAdressi>
			LCD_WriteString("     Lau!");
 ada:	8a e2       	ldi	r24, 0x2A	; 42
 adc:	92 e0       	ldi	r25, 0x02	; 2
 ade:	e6 de       	rcall	.-564    	; 0x8ac <_Z15LCD_WriteStringPc>
 ae0:	ff e7       	ldi	r31, 0x7F	; 127
 ae2:	2a e1       	ldi	r18, 0x1A	; 26
 ae4:	86 e0       	ldi	r24, 0x06	; 6
 ae6:	f1 50       	subi	r31, 0x01	; 1
 ae8:	20 40       	sbci	r18, 0x00	; 0
 aea:	80 40       	sbci	r24, 0x00	; 0
 aec:	e1 f7       	brne	.-8      	; 0xae6 <main+0xfc>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <main+0x106>
 af0:	00 00       	nop
			_delay_ms(2000);			
			clearDisplay();
 af2:	16 de       	rcall	.-980    	; 0x720 <_Z12clearDisplayv>
			LCD_WriteString("   Le meilleur");
 af4:	84 e3       	ldi	r24, 0x34	; 52
 af6:	92 e0       	ldi	r25, 0x02	; 2
 af8:	d9 de       	rcall	.-590    	; 0x8ac <_Z15LCD_WriteStringPc>
			SetAdress(64); // goes to line 2 of LCD
 afa:	80 e4       	ldi	r24, 0x40	; 64
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	47 de       	rcall	.-882    	; 0x78e <_Z9SetAdressi>
			LCD_WriteString(" reste a venir!!");					
 b00:	83 e4       	ldi	r24, 0x43	; 67
 b02:	92 e0       	ldi	r25, 0x02	; 2
 b04:	d3 de       	rcall	.-602    	; 0x8ac <_Z15LCD_WriteStringPc>
 b06:	9f eb       	ldi	r25, 0xBF	; 191
 b08:	e7 e2       	ldi	r30, 0x27	; 39
 b0a:	f9 e0       	ldi	r31, 0x09	; 9
 b0c:	91 50       	subi	r25, 0x01	; 1
 b0e:	e0 40       	sbci	r30, 0x00	; 0
 b10:	f0 40       	sbci	r31, 0x00	; 0
 b12:	e1 f7       	brne	.-8      	; 0xb0c <main+0x122>
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <main+0x12c>
 b16:	00 00       	nop
 b18:	8e cf       	rjmp	.-228    	; 0xa36 <main+0x4c>

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
