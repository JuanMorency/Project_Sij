
PWMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800200  00800200  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000610  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000375  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000549  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d9  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	d2 c0       	rjmp	.+420    	; 0x1ca <__vector_9>
  26:	00 00       	nop
  28:	e5 c0       	rjmp	.+458    	; 0x1f4 <__vector_10>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	39 c1       	rjmp	.+626    	; 0x300 <__vector_35>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ad 30       	cpi	r26, 0x0D	; 13
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e d1       	rcall	.+540    	; 0x322 <main>
 106:	47 c1       	rjmp	.+654    	; 0x396 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN3escC1Ev>:
esc 3 = 0C5A
esc 4 = 0C5B
*/

//constructor
esc::esc()
 10a:	08 95       	ret

0000010c <_ZN3esc10initializeEv>:
}

void esc::initialize()
{
  //Timer/Counter 4/5 set to non-inverted Phase Correct PWM (8 bits resolution)
  TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << WGM41);
 10c:	e0 ea       	ldi	r30, 0xA0	; 160
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 6a       	ori	r24, 0xA2	; 162
 114:	80 83       	st	Z, r24
  TCCR5A |= (1 << COM5A1) | (1 << COM5B1) | (1 << WGM51);
 116:	e0 e2       	ldi	r30, 0x20	; 32
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	80 81       	ld	r24, Z
 11c:	82 6a       	ori	r24, 0xA2	; 162
 11e:	80 83       	st	Z, r24

  //wave generator mode à phase correct full resolution et Prescaler = 1

  TCCR4B |= (1 << WGM43) | (1 << CS40) ;
 120:	e1 ea       	ldi	r30, 0xA1	; 161
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 61       	ori	r24, 0x11	; 17
 128:	80 83       	st	Z, r24
  TCCR5B |= (1 << WGM53) | (1 << CS50) ;
 12a:	e1 e2       	ldi	r30, 0x21	; 33
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	81 61       	ori	r24, 0x11	; 17
 132:	80 83       	st	Z, r24

  //Force Output Compare disabled
  TCCR4C = 0;
 134:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  TCCR5C = 0;
 138:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x700122>
  //régler TOP à 4096
  //ICR4H = 0x10;
  //ICR4L = 0x00;
  //ICR5H = 0x10;
  //ICR5L = 0x00;
    ICR4H = 0x08;
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    ICR4L = 0x00;
 142:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    ICR5H = 0x08;
 146:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    ICR5L = 0x00;
 14a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
  
  //Set ESCs speed to 0
  //TODO need to select right initial pulse width such that the ESC get armed
  OCR4AH = 0x02;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
  OCR4AL = 0;
 154:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR4BH = 0x02;
 158:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
  OCR4BL = 0;
 15c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  OCR5AH = 0x02;
 160:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
  OCR5AL = 0;
 164:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
  OCR5BH = 0x02;
 168:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
  OCR5BL = 0;
 16c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

  //Set Pins to output
  DDRL |= (1<<PL4) | (1<<PL3); 
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
  DDRH |= (1<<PH4) | (1<<PH3);  
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 83       	st	Z, r24
  
  //Timer 4/5 set to 0
  TCNT4H = 0;
 184:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
  TCNT4L = 0;
 188:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
  TCNT5H = 0;
 18c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
  TCNT5L = 0;
 190:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	9c e0       	ldi	r25, 0x0C	; 12
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <_ZN3esc10initializeEv+0x8e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_ZN3esc10initializeEv+0x98>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <_Z19initializeInterruptv>:
{
	last_ch_1 = false, last_ch_2 = false, last_ch_3 = false, last_ch_4 = false;
	ch_1_counting = false, ch_2_counting = false, ch_3_counting = false, ch_4_counting = false;
	ch_1_pw = 0, ch_2_pw = 0, ch_3_pw = 0, ch_4_pw = 0;
	TCCR3B |= (1 << CS30); //set-up counter in normal mode with prescaler = 1
	TIMSK3 |= (1 << TOIE3); // enable interrupt on overflow
 1a8:	e8 e6       	ldi	r30, 0x68	; 104
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	80 83       	st	Z, r24
 1b2:	eb e6       	ldi	r30, 0x6B	; 107
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	80 83       	st	Z, r24
 1bc:	ec e6       	ldi	r30, 0x6C	; 108
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 6f       	ori	r24, 0xF0	; 240
 1c4:	80 83       	st	Z, r24
 1c6:	78 94       	sei
 1c8:	08 95       	ret

000001ca <__vector_9>:
}

ISR(PCINT0_vect) {
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
	if (PINB & 0b00010000) button_rising = true;
 1d6:	1c 9b       	sbis	0x03, 4	; 3
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__vector_9+0x18>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <button_rising>
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <__vector_9+0x1e>
	else button_falling = true;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <button_falling>
	//_delay_ms(500); //debounce
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_10>:

ISR(PCINT1_vect) {
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
 206:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 20a:	83 ff       	sbrs	r24, 3
 20c:	56 c0       	rjmp	.+172    	; 0x2ba <__vector_10+0xc6>
 20e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL9last_ch_1>
 212:	81 11       	cpse	r24, r1
 214:	68 c0       	rjmp	.+208    	; 0x2e6 <__vector_10+0xf2>
 216:	56 c0       	rjmp	.+172    	; 0x2c4 <__vector_10+0xd0>
	{	last_ch_1 = true;
		ch_1_counting = true;
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_1_ovf_rising = true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_10+0x30>
		else ch_1_ovf_rising = false;
 220:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
 224:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 228:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	92 2b       	or	r25, r18
 230:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <_ZL10count_ch_1+0x1>
 234:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZL10count_ch_1>
 238:	5a c0       	rjmp	.+180    	; 0x2ee <__vector_10+0xfa>
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 23a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL9last_ch_1>
 23e:	81 11       	cpse	r24, r1
 240:	4b c0       	rjmp	.+150    	; 0x2d8 <__vector_10+0xe4>
 242:	55 c0       	rjmp	.+170    	; 0x2ee <__vector_10+0xfa>
	{	last_ch_1 = false;
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising) ) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
 244:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 248:	81 11       	cpse	r24, r1
 24a:	16 c0       	rjmp	.+44     	; 0x278 <__vector_10+0x84>
 24c:	04 c0       	rjmp	.+8      	; 0x256 <__vector_10+0x62>
 24e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 252:	88 23       	and	r24, r24
 254:	89 f0       	breq	.+34     	; 0x278 <__vector_10+0x84>
 256:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 25a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	92 2b       	or	r25, r18
 262:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZL10count_ch_1>
 266:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <_ZL10count_ch_1+0x1>
 26a:	82 1b       	sub	r24, r18
 26c:	93 0b       	sbc	r25, r19
 26e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ch_1_pw+0x1>
 272:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ch_1_pw>
 276:	10 c0       	rjmp	.+32     	; 0x298 <__vector_10+0xa4>
		//else there is an overflow calculate the real pulse time by adding 2^16
		else ch_1_pw = 65535 - count_ch_1 + (TCNT3L | TCNT3H << 8) + 1; //je pense que c'est bon mais à vérifier				
 278:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 27c:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	92 2b       	or	r25, r18
 284:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZL10count_ch_1>
 288:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <_ZL10count_ch_1+0x1>
 28c:	82 1b       	sub	r24, r18
 28e:	93 0b       	sbc	r25, r19
 290:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ch_1_pw+0x1>
 294:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ch_1_pw>
		ch_1_counting = false;
 298:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <_ZL13ch_1_counting>
		//remove the overflow flag only when no channel is counting to avoid problems 
		//when overflow happens when 2 channels are counting
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
 29c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL13ch_2_counting>
 2a0:	81 11       	cpse	r24, r1
 2a2:	25 c0       	rjmp	.+74     	; 0x2ee <__vector_10+0xfa>
 2a4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL13ch_3_counting>
 2a8:	81 11       	cpse	r24, r1
 2aa:	21 c0       	rjmp	.+66     	; 0x2ee <__vector_10+0xfa>
 2ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL13ch_4_counting>
 2b0:	81 11       	cpse	r24, r1
 2b2:	1d c0       	rjmp	.+58     	; 0x2ee <__vector_10+0xfa>
 2b4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZL11timer_3_ovf>
 2b8:	1a c0       	rjmp	.+52     	; 0x2ee <__vector_10+0xfa>
		if(timer_3_ovf) ch_1_ovf_rising = true;
		else ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 2ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 2be:	83 ff       	sbrs	r24, 3
 2c0:	bc cf       	rjmp	.-136    	; 0x23a <__vector_10+0x46>
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <__vector_10+0xfa>
	//_delay_ms(500); //debounce
}

ISR(PCINT1_vect) {
	if (PINJ & 0b00001000 && last_ch_1 == false) //Rising edge
	{	last_ch_1 = true;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZL9last_ch_1>
		ch_1_counting = true;
 2ca:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_ZL13ch_1_counting>
		//verify if there is an overflow before starting to count
		if(timer_3_ovf) ch_1_ovf_rising = true;
 2ce:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL11timer_3_ovf>
 2d2:	81 11       	cpse	r24, r1
 2d4:	a1 cf       	rjmp	.-190    	; 0x218 <__vector_10+0x24>
 2d6:	a4 cf       	rjmp	.-184    	; 0x220 <__vector_10+0x2c>
		else ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
	{	last_ch_1 = false;
 2d8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <_ZL9last_ch_1>
		//subtract current counter to old one in count_ch_1 and store variable in ch_1_pw
		//only if there is no overflow at rising and falling edge or if there is an overflow for both
		if((!timer_3_ovf && !ch_1_ovf_rising) || (timer_3_ovf && ch_1_ovf_rising) ) ch_1_pw = (TCNT3L | TCNT3H << 8) - count_ch_1;
 2dc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL11timer_3_ovf>
 2e0:	81 11       	cpse	r24, r1
 2e2:	b5 cf       	rjmp	.-150    	; 0x24e <__vector_10+0x5a>
 2e4:	af cf       	rjmp	.-162    	; 0x244 <__vector_10+0x50>
		if(timer_3_ovf) ch_1_ovf_rising = true;
		else ch_1_ovf_rising = false;
		//record the counter value for the rising edge
		count_ch_1 = TCNT3L | TCNT3H << 8;		
	}
	else if (!(PINJ & 0b00001000) && last_ch_1 == true) //Falling edge
 2e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 2ea:	83 ff       	sbrs	r24, 3
 2ec:	f5 cf       	rjmp	.-22     	; 0x2d8 <__vector_10+0xe4>
		if (!ch_1_counting && !ch_2_counting && !ch_3_counting && !ch_4_counting) timer_3_ovf=false;
	}
	
	//do the same for every channel when cleaned up
	
}
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_35>:

ISR(TIMER3_OVF_vect) {
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	8f 93       	push	r24
	timer_3_ovf=true;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZL11timer_3_ovf>
	TIFR3 |= (0 << TOV3);
 312:	88 b3       	in	r24, 0x18	; 24
 314:	88 bb       	out	0x18, r24	; 24
 316:	8f 91       	pop	r24
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <main>:
#include <inttypes.h>
#include "esc.h"
#include "interrupt.h"

int main()
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	1f 92       	push	r1
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	//create ESC object
	esc allESC;
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	ec de       	rcall	.-552    	; 0x10a <_ZN3escC1Ev>
	// initialize ESC
	allESC.initialize();
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	ea de       	rcall	.-556    	; 0x10c <_ZN3esc10initializeEv>
	//initialize INT
	initializeInterrupt();
 338:	37 df       	rcall	.-402    	; 0x1a8 <_Z19initializeInterruptv>
			_delay_ms(1000);
			button_falling = false;
		}
		else
		{
			OCR4AH = 0x02;
 33a:	a9 ea       	ldi	r26, 0xA9	; 169
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	92 e0       	ldi	r25, 0x02	; 2
			OCR4AL = 0x00;	
 340:	e8 ea       	ldi	r30, 0xA8	; 168
 342:	f0 e0       	ldi	r31, 0x00	; 0
			_delay_ms(1000);
			button_rising = false;
		}
		else if (button_falling)
		{
			OCR4AH = 0x03;
 344:	33 e0       	ldi	r19, 0x03	; 3
	while(1)
	{
		if (button_rising)
		{
			OCR4AH = 0x02;
			OCR4AL = 0x80;
 346:	20 e8       	ldi	r18, 0x80	; 128
	initializeInterrupt();
	
	// run forever
	while(1)
	{
		if (button_rising)
 348:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <button_rising>
 34c:	88 23       	and	r24, r24
 34e:	71 f0       	breq	.+28     	; 0x36c <main+0x4a>
		{
			OCR4AH = 0x02;
 350:	9c 93       	st	X, r25
			OCR4AL = 0x80;
 352:	20 83       	st	Z, r18
 354:	4f e3       	ldi	r20, 0x3F	; 63
 356:	5d e0       	ldi	r21, 0x0D	; 13
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	41 50       	subi	r20, 0x01	; 1
 35c:	50 40       	sbci	r21, 0x00	; 0
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x38>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x42>
 364:	00 00       	nop
			_delay_ms(1000);
			button_rising = false;
 366:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <button_rising>
 36a:	ee cf       	rjmp	.-36     	; 0x348 <main+0x26>
		}
		else if (button_falling)
 36c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <button_falling>
 370:	88 23       	and	r24, r24
 372:	71 f0       	breq	.+28     	; 0x390 <main+0x6e>
		{
			OCR4AH = 0x03;
 374:	3c 93       	st	X, r19
			OCR4AL = 0x00;
 376:	10 82       	st	Z, r1
 378:	4f e3       	ldi	r20, 0x3F	; 63
 37a:	5d e0       	ldi	r21, 0x0D	; 13
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	41 50       	subi	r20, 0x01	; 1
 380:	50 40       	sbci	r21, 0x00	; 0
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x5c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x66>
 388:	00 00       	nop
			_delay_ms(1000);
			button_falling = false;
 38a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <button_falling>
 38e:	dc cf       	rjmp	.-72     	; 0x348 <main+0x26>
		}
		else
		{
			OCR4AH = 0x02;
 390:	9c 93       	st	X, r25
			OCR4AL = 0x00;	
 392:	10 82       	st	Z, r1
 394:	d9 cf       	rjmp	.-78     	; 0x348 <main+0x26>

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
